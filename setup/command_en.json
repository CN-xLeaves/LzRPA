[
	{
		"Caption": "Common",
		"Icon": "文件夹",
		"Visible": true,
		"Templet": "index",
		"Help": {
			"Caption": ""
		},
		"Child": [
			{
				"Caption": "TracePrint",
				"Remark": "调试输出",
				"Visible": true,
				"Keyword": true,
				"InsCode": "TracePrint(\"消息内容\")",
				"Templet": "command",
				"Help": {
					"Caption": "TracePrint",
					"Define": "TracePrint(sMessage)",
					"Describe": "输出调试信息",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "sMessage",
							"DataType": "Integer",
							"Describe": "输出的调试信息文本",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "MsgBox",
				"Remark": "弹出消息框",
				"Visible": true,
				"Keyword": true,
				"InsCode": "MsgBox(\"消息内容\")",
				"Templet": "command",
				"Help": {
					"Caption": "MsgBox",
					"Define": "Result = MsgBox(Message[, Style[, Title]])",
					"Describe": "弹出消息对话框",
					"RetType": "Integer",
					"Return": "返回用户点击的对话框按钮",
					"Param": [
						{
							"Caption": "Message",
							"DataType": "String",
							"Describe": "弹出窗口显示的消息内容",
							"Optional": false
						},
						{
							"Caption": "Style",
							"DataType": "Integer",
							"Describe": "弹出窗口的样式",
							"Optional": true
						},
						{
							"Caption": "Title",
							"DataType": "String",
							"Describe": "弹出窗口的标题",
							"Optional": true
						}
					]
				}
			},
			{
				"Caption": "InputBox",
				"Remark": "弹出输入框",
				"Visible": true,
				"Keyword": true,
				"InsCode": "InputBox(\"提示内容\", \"默认内容\", \"标题\")",
				"Templet": "command",
				"Help": {
					"Caption": "InputBox",
					"Define": "Result = InputBox([hParent, ]Prompt[, Title[, DefaultText[, Pass]]])",
					"Describe": "弹出消息对话框",
					"RetType": "String",
					"Return": "返回用户输入的文本内容",
					"Param": [
						{
							"Caption": "Prompt",
							"DataType": "String",
							"Describe": "弹出窗口显示的提示内容",
							"Optional": false
						},
						{
							"Caption": "DefaultText",
							"DataType": "String",
							"Describe": "弹出窗口输入框里的默认文字内容",
							"Optional": true
						},
						{
							"Caption": "Title",
							"DataType": "String",
							"Describe": "弹出窗口的标题",
							"Optional": true
						}
					]
				}
			},
			{
				"Caption": "Alert",
				"Remark": "弹出消息通知",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Alert(\"标题\", \"消息内容\", 2)",
				"Templet": "command",
				"Help": {
					"Caption": "Alert",
					"Define": "Result = Alert(Title, Message[, Timeout])",
					"Describe": "弹出托盘提示对话框",
					"RetType": "Integer",
					"Return": "用户点击关闭按钮时返回 -1，用户点击消息链接时返回 -2，窗口超时关闭时返回 -3",
					"Param": [
						{
							"Caption": "Title",
							"DataType": "String",
							"Describe": "弹出提示窗口标题",
							"Optional": false
						},
						{
							"Caption": "Message",
							"DataType": "String",
							"Describe": "弹出提示窗口显示的内容",
							"Optional": false
						},
						{
							"Caption": "Timeout",
							"DataType": "Integer",
							"Describe": "弹出提示窗口超时关闭的时间(单位:秒)",
							"Optional": true
						}
					]
				}
			},
			{
				"Caption": "Delay",
				"Remark": "延时",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Delay(1000)",
				"Templet": "command",
				"Help": {
					"Caption": "Delay",
					"Define": "Delay(ms)",
					"Describe": "延时一定毫秒后继续执行代码",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "ms",
							"DataType": "Integer",
							"Describe": "延时的毫秒数",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "RunApp",
				"Remark": "运行应用程序",
				"Visible": true,
				"Keyword": true,
				"InsCode": "RunApp(\"程序路径\")",
				"Templet": "command",
				"Help": {
					"Caption": "RunApp",
					"Define": "Result = RunApp(sExecute[, iShowMode[, bASync]])",
					"Describe": "运行应用程序",
					"RetType": "Integer",
					"Return": "返回应用程序的退出代码",
					"Param": [
						{
							"Caption": "sExecute",
							"DataType": "String",
							"Describe": "执行的程序路径和命令行",
							"Optional": false
						},
						{
							"Caption": "iShowMode",
							"DataType": "Integer",
							"Describe": "窗口的显示状态，设置为 %OS_WNDSTYLE_HIDE 会隐藏窗口运行（并非所有程序都能隐藏）",
							"Optional": true
						},
						{
							"Caption": "bASync",
							"DataType": "Boolean",
							"Describe": "是否立刻执行之后的代码，设置为 %OS_SHELL_SYNC 会等待程序运行完毕，设置为 %OS_SHELL_ASYNC 则会继续执行之后的代码（默认）。",
							"Optional": true
						}
					]
				}
			},
			{
				"Caption": "ShellExecute",
				"Remark": "打开文件或网址",
				"Visible": true,
				"Keyword": true,
				"InsCode": "ShellExecute(\"open\", \"c:\\1.txt\", \"\", \"\", %SW_SHOWNORMAL)",
				"Templet": "command",
				"Help": {
					"Caption": "ShellExecute",
					"Define": "Result = ShellExecute(sOperation, sFile, sCommand, sDirectory[, iShow])",
					"Describe": "打开一个文件或网址",
					"RetType": "Integer",
					"Return": "如果函数执行成功，返回一个大于32的数值，否则返回错误代码",
					"Param": [
						{
							"Caption": "sOperation",
							"DataType": "String",
							"Describe": "操作方法，传递为 \\\"open\\\" 为打开，传递为 \\\"print\\\" 为打印",
							"Optional": false
						},
						{
							"Caption": "sFile",
							"DataType": "String",
							"Describe": "文件路径",
							"Optional": false
						},
						{
							"Caption": "sCommand",
							"DataType": "String",
							"Describe": "传递给应用程序的命令行",
							"Optional": false
						},
						{
							"Caption": "sDirectory",
							"DataType": "String",
							"Describe": "程序启动后的工作目录",
							"Optional": false
						},
						{
							"Caption": "iShow",
							"DataType": "Integer",
							"Describe": "窗口显示状态，可选值：%SW_SHOWNORMAL(正常显示)、%SW_HIDE(隐藏)、%SW_SHOW(显示)",
							"Optional": true
						}
					]
				}
			},
			{
				"Caption": "GetTickCount",
				"Remark": "获取时间戳",
				"Visible": true,
				"Keyword": true,
				"InsCode": "GetTickCount",
				"Templet": "command",
				"Help": {
					"Caption": "GetTickCount",
					"Define": "Result = GetTickCount",
					"Describe": "获取自系统开机时开始的时间戳（开机经过的毫秒数）",
					"RetType": "Integer",
					"Return": "返回系统时间戳",
					"Param": [
					]
				}
			},
			{
				"Caption": "DoEvents",
				"Remark": "执行消息循环",
				"Visible": true,
				"Keyword": true,
				"InsCode": "DoEvents",
				"Templet": "command",
				"Help": {
					"Caption": "DoEvents",
					"Define": "Result = DoEvents [bAuto]",
					"Describe": "执行事件循环，避免界面卡死",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "bAuto",
							"DataType": "Boolean",
							"Describe": "是否自动进行 DoEnents",
							"Optional": true
						}
					]
				}
			},
			{
				"Caption": "Stop",
				"Remark": "结束脚本运行",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Stop",
				"Templet": "command",
				"Help": {
					"Caption": "Stop",
					"Define": "Stop",
					"Describe": "结束脚本的运行",
					"RetType": "Null",
					"Return": "无",
					"Param": [
					]
				}
			}
		]
	},
	{
		"Caption": "Language Standard",
		"Icon": "文件夹",
		"Visible": true,
		"Templet": "index",
		"Help": {
			"Caption": ""
		},
		"Expand": true,
		"Child": [
			{
				"Caption": "Syntax",
				"Icon": "文件夹",
				"Visible": true,
				"Templet": "index",
				"Help": {
					"Caption": ""
				},
				"Child": [
					{
						"Caption": "Dim",
						"Remark": "定义变量",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Dim Var As Long = 0",
						"Templet": "syntax",
						"Help": {
							"Caption": "Dim",
							"Define": "Dim var As DataType[ = InitValue]<br>Dim As DataType var, var, var",
							"Describe": "定义一个变量命名为 var，其数据类型为 DataType，并将初始值设置为 InitValue。"
						}
					},
					{
						"Caption": "Const",
						"Remark": "定义常量",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Const Var As Long = 0",
						"Templet": "syntax",
						"Help": {
							"Caption": "Const",
							"Define": "Const var As DataType[ = InitValue]",
							"Describe": "定义一个常量命名为 var，其数据类型为 DataType，并赋值为 InitValue。"
						}
					},
					{
						"Caption": "If",
						"Remark": "条件判断",
						"Visible": true,
						"Keyword": true,
						"InsCode": "If Exp Then\n	\nEnd If",
						"Templet": "syntax",
						"Help": {
							"Caption": "If",
							"Define": "If exp Then<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>ElseIf exp Then<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>Else<br><br>End If",
							"Describe": "判断条件 exp，当 exp 满足时，执行条件下方的 block 代码，当条件不满足时，执行 Else 分支下的代码，条件可以使用多组。"
						}
					},
					{
						"Caption": "If Else",
						"Remark": "条件分支",
						"Visible": true,
						"InsCode": "If Exp Then\n	\nElse\n	\nEnd If",
						"Templet": "syntax",
						"Help": {
							"Caption": "If",
							"Define": "If exp Then<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>ElseIf exp Then<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>Else<br><br>End If",
							"Describe": "判断条件 exp，当 exp 满足时，执行条件下方的 block 代码，当条件不满足时，执行 Else 分支下的代码，条件可以使用多组。"
						}
					},
					{
						"Caption": "If ElseIf Else",
						"Remark": "多个条件分支",
						"Visible": true,
						"InsCode": "If Exp Then\n	\nElseIf Exp2 Then\n	\nElse\n	\nEnd If",
						"Templet": "syntax",
						"Help": {
							"Caption": "If",
							"Define": "If exp Then<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>ElseIf exp Then<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>Else<br><br>End If",
							"Describe": "判断条件 exp，当 exp 满足时，执行条件下方的 block 代码，当条件不满足时，执行 Else 分支下的代码，条件可以使用多组。"
						}
					},
					{
						"备注": "隐藏的条目，用来生成自动完成和气泡提示",
						"Caption": "Else",
						"Remark": "条件分支",
						"Visible": false,
						"Keyword": true,
						"Templet": "syntax",
						"Help": {
							"Caption": "If",
							"Define": "If exp Then<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>ElseIf exp Then<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>Else<br><br>End If",
							"Describe": "判断条件 exp，当 exp 满足时，执行条件下方的 block 代码，当条件不满足时，执行 Else 分支下的代码，条件可以使用多组。"
						}
					},
					{
						"备注": "隐藏的条目，用来生成自动完成和气泡提示",
						"Caption": "ElseIf",
						"Remark": "多个条件分支",
						"Visible": false,
						"Keyword": true,
						"Templet": "syntax",
						"Help": {
							"Caption": "If",
							"Define": "If exp Then<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>ElseIf exp Then<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>Else<br><br>End If",
							"Describe": "判断条件 exp，当 exp 满足时，执行条件下方的 block 代码，当条件不满足时，执行 Else 分支下的代码，条件可以使用多组。"
						}
					},
					{
						"Caption": "Select",
						"Remark": "条件分支选择",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Select Case Exp\n	Case Value1\n		\n	Case Value2\n		\n	Case Else\n		\nEnd Select",
						"Templet": "syntax",
						"Help": {
							"Caption": "Select",
							"Define": "Select Case exp<br>&nbsp;&nbsp;&nbsp;&nbsp;Case val<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;block<br>&nbsp;&nbsp;&nbsp;&nbsp;Case Else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;block<br>End Select",
							"Describe": "判断值 exo，当 exp 满足某项分支的条件时执行这条分支的 block 代码，当所有分支都不满足时，执行 Case Else 分支下的代码，条件可以使用多组。"
						}
					},
					{
						"备注": "隐藏的条目，用来生成自动完成和气泡提示",
						"Caption": "Case",
						"Remark": "条件分支",
						"Visible": false,
						"Keyword": true,
						"Templet": "syntax",
						"Help": {
							"Caption": "Select Case",
							"Define": "Select Case exp<br>&nbsp;&nbsp;&nbsp;&nbsp;Case val<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;block<br>&nbsp;&nbsp;&nbsp;&nbsp;Case Else<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;block<br>End Select",
							"Describe": "判断值 exo，当 exp 满足某项分支的条件时执行这条分支的 block 代码，当所有分支都不满足时，执行 Case Else 分支下的代码，条件可以使用多组。"
						}
					},
					{
						"Caption": "For",
						"Remark": "计次循环",
						"Visible": true,
						"Keyword": true,
						"InsCode": "For i As Long = 1 To 100\n	\nNext",
						"Templet": "syntax",
						"Help": {
							"Caption": "For",
							"Define": "For var [As Long] = start To end [Step stpval]<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>Next",
							"Describe": "代入循环变量 var （如果var没有定义，则需要在循环语句头定义），将它的值从 start 一直递增到 end，每次递增 stpval，每一次循环变量递增都会执行一遍 block 代码，直到循环变量的值超出 end 范围。"
						}
					},
					{
						"备注": "隐藏的条目，用来生成自动完成和气泡提示",
						"Caption": "Next",
						"Remark": "计次循环",
						"Visible": false,
						"Keyword": true,
						"Templet": "syntax",
						"Help": {
							"Caption": "For",
							"Define": "For var [As Long] = start To end [Step stpval]<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>Next",
							"Describe": "代入循环变量 var （如果var没有定义，则需要在循环语句头定义），将它的值从 start 一直递增到 end，每次递增 stpval，每一次循环变量递增都会执行一遍 block 代码，直到循环变量的值超出 end 范围。"
						}
					},
					{
						"Caption": "Exit For",
						"Remark": "结束计次循环",
						"Visible": true,
						"InsCode": "Exit For",
						"Templet": "syntax",
						"Help": {
							"Caption": "Exit For",
							"Define": "Exit For",
							"Describe": "跳出 For 循环，必须在 For 循环语句内使用。"
						}
					},
					{
						"Caption": "Continue For",
						"Remark": "跳过本次计次循环",
						"Visible": true,
						"InsCode": "Continue For",
						"Templet": "syntax",
						"Help": {
							"Caption": "Continue For",
							"Define": "Continue For",
							"Describe": "跳过本次 For 循环，开始下一轮循环逻辑的执行，必须在 For 循环语句内使用。"
						}
					},
					{
						"备注": "隐藏的条目，用来生成自动完成和气泡提示",
						"Caption": "Do",
						"Remark": "条件循环",
						"Visible": false,
						"Keyword": true,
						"Templet": "syntax",
						"Help": {
							"Caption": "Do Loop",
							"Define": "Do [While|Until exp]<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>Loop[While|Until exp]",
							"Describe": "循环执行 block 语句，直到 exp 的值满足条件，当使用 While 时，exp 必须为 true 才会循环，当使用 Until 时，exp 必须为 false 才会循环，当条件放在 Do 语句后面时，每一次循环之前都会进行一次判断，当条件放在 Loop 语句后面时，会在每次循环执行完毕后进行判断（循环语句至少执行一次）。"
						}
					},
					{
						"备注": "隐藏的条目，用来生成自动完成和气泡提示",
						"Caption": "Loop",
						"Remark": "条件循环",
						"Visible": false,
						"Keyword": true,
						"Templet": "syntax",
						"Help": {
							"Caption": "Do Loop",
							"Define": "Do [While|Until exp]<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>Loop[While|Until exp]",
							"Describe": "循环执行 block 语句，直到 exp 的值满足条件，当使用 While 时，exp 必须为 true 才会循环，当使用 Until 时，exp 必须为 false 才会循环，当条件放在 Do 语句后面时，每一次循环之前都会进行一次判断，当条件放在 Loop 语句后面时，会在每次循环执行完毕后进行判断（循环语句至少执行一次）。"
						}
					},
					{
						"备注": "隐藏的条目，用来生成自动完成和气泡提示",
						"Caption": "While",
						"Remark": "条件循环",
						"Visible": false,
						"Keyword": true,
						"Templet": "syntax",
						"Help": {
							"Caption": "Do Loop",
							"Define": "Do [While|Until exp]<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>Loop[While|Until exp]",
							"Describe": "循环执行 block 语句，直到 exp 的值满足条件，当使用 While 时，exp 必须为 true 才会循环，当使用 Until 时，exp 必须为 false 才会循环，当条件放在 Do 语句后面时，每一次循环之前都会进行一次判断，当条件放在 Loop 语句后面时，会在每次循环执行完毕后进行判断（循环语句至少执行一次）。"
						}
					},
					{
						"备注": "隐藏的条目，用来生成自动完成和气泡提示",
						"Caption": "Until",
						"Remark": "条件循环",
						"Visible": false,
						"Keyword": true,
						"Templet": "syntax",
						"Help": {
							"Caption": "Do Loop",
							"Define": "Do [While|Until exp]<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>Loop[While|Until exp]",
							"Describe": "循环执行 block 语句，直到 exp 的值满足条件，当使用 While 时，exp 必须为 true 才会循环，当使用 Until 时，exp 必须为 false 才会循环，当条件放在 Do 语句后面时，每一次循环之前都会进行一次判断，当条件放在 Loop 语句后面时，会在每次循环执行完毕后进行判断（循环语句至少执行一次）。"
						}
					},
					{
						"Caption": "Do Loop",
						"Remark": "条件循环",
						"Visible": true,
						"InsCode": "Do\n	\nLoop",
						"Templet": "syntax",
						"Help": {
							"Caption": "Do Loop",
							"Define": "Do [While|Until exp]<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>Loop[While|Until exp]",
							"Describe": "循环执行 block 语句，直到 exp 的值满足条件，当使用 While 时，exp 必须为 true 才会循环，当使用 Until 时，exp 必须为 false 才会循环，当条件放在 Do 语句后面时，每一次循环之前都会进行一次判断，当条件放在 Loop 语句后面时，会在每次循环执行完毕后进行判断（循环语句至少执行一次）。"
						}
					},
					{
						"Caption": "Do While",
						"Remark": "前置条件成立则循环",
						"Visible": true,
						"InsCode": "Do While Exp\n	\nLoop",
						"Templet": "syntax",
						"Help": {
							"Caption": "Do Loop",
							"Define": "Do [While|Until exp]<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>Loop[While|Until exp]",
							"Describe": "循环执行 block 语句，直到 exp 的值满足条件，当使用 While 时，exp 必须为 true 才会循环，当使用 Until 时，exp 必须为 false 才会循环，当条件放在 Do 语句后面时，每一次循环之前都会进行一次判断，当条件放在 Loop 语句后面时，会在每次循环执行完毕后进行判断（循环语句至少执行一次）。"
						}
					},
					{
						"Caption": "Do Until",
						"Remark": "前置条件不成立则循环",
						"Visible": true,
						"InsCode": "Do Until Exp\n	\nLoop",
						"Templet": "syntax",
						"Help": {
							"Caption": "Do Loop",
							"Define": "Do [While|Until exp]<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>Loop[While|Until exp]",
							"Describe": "循环执行 block 语句，直到 exp 的值满足条件，当使用 While 时，exp 必须为 true 才会循环，当使用 Until 时，exp 必须为 false 才会循环，当条件放在 Do 语句后面时，每一次循环之前都会进行一次判断，当条件放在 Loop 语句后面时，会在每次循环执行完毕后进行判断（循环语句至少执行一次）。"
						}
					},
					{
						"Caption": "Loop While",
						"Remark": "后置条件成立则循环",
						"Visible": true,
						"InsCode": "Do\n	\nLoop While Exp",
						"Templet": "syntax",
						"Help": {
							"Caption": "Do Loop",
							"Define": "Do [While|Until exp]<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>Loop[While|Until exp]",
							"Describe": "循环执行 block 语句，直到 exp 的值满足条件，当使用 While 时，exp 必须为 true 才会循环，当使用 Until 时，exp 必须为 false 才会循环，当条件放在 Do 语句后面时，每一次循环之前都会进行一次判断，当条件放在 Loop 语句后面时，会在每次循环执行完毕后进行判断（循环语句至少执行一次）。"
						}
					},
					{
						"Caption": "Loop Until",
						"Remark": "后置条件不成立则循环",
						"Visible": true,
						"InsCode": "Do\n	\nLoop Until Exp",
						"Templet": "syntax",
						"Help": {
							"Caption": "Do Loop",
							"Define": "Do [While|Until exp]<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>Loop[While|Until exp]",
							"Describe": "循环执行 block 语句，直到 exp 的值满足条件，当使用 While 时，exp 必须为 true 才会循环，当使用 Until 时，exp 必须为 false 才会循环，当条件放在 Do 语句后面时，每一次循环之前都会进行一次判断，当条件放在 Loop 语句后面时，会在每次循环执行完毕后进行判断（循环语句至少执行一次）。"
						}
					},
					{
						"Caption": "Exit Do",
						"Remark": "结束条件循环",
						"Visible": true,
						"InsCode": "Exit Do",
						"Templet": "syntax",
						"Help": {
							"Caption": "Exit Do",
							"Define": "Exit Do",
							"Describe": "跳出 Do 循环，必须在 Do 循环语句内使用。"
						}
					},
					{
						"Caption": "Continue Do",
						"Remark": "跳过本次条件循环",
						"Visible": true,
						"InsCode": "Continue Do",
						"Templet": "syntax",
						"Help": {
							"Caption": "Continue Do",
							"Define": "Continue Do",
							"Describe": "跳过本次 Do 循环，开始下一轮循环逻辑的执行，必须在 Do 循环语句内使用。"
						}
					},
					{
						"备注": "隐藏的条目，用来生成自动完成和气泡提示",
						"Caption": "Continue",
						"Remark": "跳过本次循环",
						"Visible": false,
						"Keyword": true,
						"Templet": "syntax",
						"Help": {
							"Caption": "Continue",
							"Define": "Continue For<br>Continue Do",
							"Describe": "跳过本次循环，开始下一轮循环逻辑的执行，必须在循环语句内使用。"
						}
					},
					{
						"Caption": "Sub",
						"Remark": "定义子程序",
						"Visible": true,
						"Keyword": true,
						"InsCodeEnd": "\nSub ProcName()\n	\nEnd Sub",
						"Templet": "syntax",
						"Help": {
							"Caption": "Sub",
							"Define": "[Callback] Sub ProcName([param As Variant ...])<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>End Sub",
							"Describe": "定义一个子过程，取名为 ProcName，可以设置多个参数 param，并指定这些参数的数据类型，当子过程前面加上 Callback 时，则代表这是一个可用于回调的函数。"
						}
					},
					{
						"Caption": "CallBack Sub",
						"Remark": "定义回调子程序",
						"Visible": true,
						"InsCodeEnd": "\nCallback Sub ProcName()\n	\nEnd Sub",
						"Templet": "syntax",
						"Help": {
							"Caption": "Sub",
							"Define": "[Callback] Sub ProcName([param As Variant ...])<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>End Sub",
							"Describe": "定义一个子过程，取名为 ProcName，可以设置多个参数 param，并指定这些参数的数据类型，当子过程前面加上 Callback 时，则代表这是一个可用于回调的子过程。"
						}
					},
					{
						"Caption": "Exit Sub",
						"Remark": "退出子程序",
						"Visible": true,
						"InsCode": "Exit Sub",
						"Templet": "syntax",
						"Help": {
							"Caption": "Exit Sub",
							"Define": "Exit Sub",
							"Describe": "跳出子过程，必须在 Sub 语句内使用。"
						}
					},
					{
						"Caption": "Function",
						"Remark": "定义函数",
						"Visible": true,
						"Keyword": true,
						"InsCodeEnd": "\nFunction ProcName() As Variant\n	\nEnd Function",
						"Templet": "syntax",
						"Help": {
							"Caption": "Function",
							"Define": "[Callback] Function ProcName([param As Variant ...]) As Variant<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>End Function",
							"Describe": "定义一个函数，取名为 ProcName，可以设置多个参数 param，并指定这些参数的数据类型，函数运行结束后，可以返回一个数据作为结果通知调用代码，函数定义时可以指定返回值的数据类型，当函数前面加上 Callback 时，则代表这是一个可用于回调的函数。"
						}
					},
					{
						"Caption": "CallBack Function",
						"Remark": "定义回调函数",
						"Visible": true,
						"InsCodeEnd": "\nCallback Function ProcName() As Variant\n	\nEnd Function",
						"Templet": "syntax",
						"Help": {
							"Caption": "Function",
							"Define": "[Callback] Function ProcName([param As Variant ...]) As Variant<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>End Function",
							"Describe": "定义一个函数，取名为 ProcName，可以设置多个参数 param，并指定这些参数的数据类型，函数运行结束后，可以返回一个数据作为结果通知调用代码，函数定义时可以指定返回值的数据类型，当函数前面加上 Callback 时，则代表这是一个可用于回调的函数。"
						}
					},
					{
						"Caption": "Exit Function",
						"Remark": "退出函数",
						"Visible": true,
						"InsCode": "Exit Function",
						"Templet": "syntax",
						"Help": {
							"Caption": "Exit Function",
							"Define": "Exit Function",
							"Describe": "跳出函数，必须在 Function 语句内使用。"
						}
					},
					{
						"备注": "隐藏的条目，用来生成自动完成和气泡提示",
						"Caption": "CallBack",
						"Remark": "定义回调函数或子程序",
						"Visible": false,
						"Keyword": true,
						"Templet": "syntax",
						"Help": {
							"Caption": "CallBack",
							"Define": "[Callback] Function|Sub ProcName([param As Variant ...])[ As Variant]<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>End Function|Sub",
							"Describe": "定义一个函数或子程序，取名为 ProcName，可以设置多个参数 param，并指定这些参数的数据类型。函数运行结束后，可以返回一个数据作为结果通知调用代码，函数定义时可以指定返回值的数据类型。"
						}
					},
					{
						"备注": "隐藏的条目，用来生成自动完成和气泡提示",
						"Caption": "Exit",
						"Remark": "跳出结构化语句",
						"Visible": false,
						"Keyword": true,
						"Templet": "syntax",
						"Help": {
							"Caption": "Exit",
							"Define": "Exit For<br>Exit Do<br>Exit Sub<br>Exit Function",
							"Describe": "跳出当前结构化语句块，必须在结构语句内使用。"
						}
					},
					{
						"Caption": "Return",
						"Remark": "返回数据并退出",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Return 0",
						"Templet": "syntax",
						"Help": {
							"Caption": "Return",
							"Define": "Return value",
							"Describe": "将数据 value 作为函数返回值返回给调用代码，必须在 Function 语句内使用。"
						}
					},
					{
						"Caption": "Type",
						"Remark": "定义结构体",
						"Visible": true,
						"Keyword": true,
						"InsCodeTop": "\nType TypeName\n	Property As Variant\nEnd Type",
						"Templet": "syntax",
						"Help": {
							"Caption": "Type",
							"Define": "Type TypeName [Extends parent]<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>End Type",
							"Describe": "定义一个名为 TypeName 的新数据类型，这个数据类型可以选择继承自其他数据类型（不能继承基础类型），自定义的数据类型中可以包含若干变量，或成员函数，当成员函数名字为 _Create 时，则这个成员函数会作为构造函数使用，当成员函数名字为 _Destroy 时，则这个成员函数会作为析构函数使用。"
						}
					},
					{
						"Caption": "Class",
						"Remark": "定义类",
						"Visible": true,
						"InsCodeTop": "\nType ClassName Extends ParentClass\n\n	' Property\n	Property As Variant\n\n	' Constructor\n	Sub _Create()\n		\n	End Sub\n\n	' Destructor\n	Sub _Destroy()\n		\n	End Sub\n\nEnd Type",
						"Templet": "syntax",
						"Help": {
							"Caption": "Type",
							"Define": "Type TypeName [Extends parent]<br>&nbsp;&nbsp;&nbsp;&nbsp;block<br>End Type",
							"Describe": "定义一个名为 TypeName 的新数据类型，这个数据类型可以选择继承自其他数据类型（不能继承基础类型），自定义的数据类型中可以包含若干变量，或成员函数，当成员函数名字为 _Create 时，则这个成员函数会作为构造函数使用，当成员函数名字为 _Destroy 时，则这个成员函数会作为析构函数使用。"
						}
					},
					{
						"备注": "隐藏的条目，用来生成自动完成和气泡提示",
						"Caption": "End",
						"Remark": "结束结构化语句",
						"Visible": false,
						"Keyword": true,
						"Templet": "syntax",
						"Help": {
							"Caption": "End",
							"Define": "End Sub<br>End Function<br>End Type",
							"Describe": "结束结构化语句。"
						}
					},
					{
						"Caption": "New",
						"Remark": "创建类对象",
						"Visible": true,
						"Keyword": true,
						"InsCode": "var = New ClassName",
						"Templet": "syntax",
						"Help": {
							"Caption": "New",
							"Define": "New ClassName[(param)]",
							"Describe": "创建一个类的实例，会触发类的构造函数，如果构造函数要求传值，则要加括号传值"
						}
					},
					{
						"Caption": "Declare Sub",
						"Remark": "声明外部DLL子程序",
						"Visible": true,
						"InsCodeTop": "Declare Sub FuncName Lib \"LibName\" Alias \"AliasName\" (ByVal Param As Long)",
						"Templet": "syntax",
						"Help": {
							"Caption": "Declare",
							"Define": "Declare Sub FuncName Lib \\\"LibName\\\" Alias \\\"AliasName\\\" (...)<br>Declare Function FuncName Lib \\\"LibName\\\" Alias \\\"AliasName\\\" (...) As Long",
							"Describe": "定义一个来自外部 DLL 的函数，一般用于定义系统 API，支持各种基础类型和结构体、指针的访问，也支持回调函数（函数声明时应使用 CallBack 关键字修饰）。"
						}
					},
					{
						"Caption": "Declare Function",
						"Remark": "声明外部DLL函数",
						"Visible": true,
						"InsCodeTop": "Declare Function FuncName Lib \"LibName\" Alias \"AliasName\" (ByVal Param As Long) As Long",
						"Templet": "syntax",
						"Help": {
							"Caption": "Declare",
							"Define": "Declare Sub FuncName Lib \\\"LibName\\\" Alias \\\"AliasName\\\" (...)<br>Declare Function FuncName Lib \\\"LibName\\\" Alias \\\"AliasName\\\" (...) As Long",
							"Describe": "定义一个来自外部 DLL 的函数，一般用于定义系统 API，支持各种基础类型和结构体、指针的访问，也支持回调函数（函数声明时应使用 CallBack 关键字修饰）。"
						}
					},
					{
						"备注": "隐藏的条目，用来生成自动完成和气泡提示",
						"Caption": "Declare",
						"Remark": "声明外部DLL函数",
						"Visible": false,
						"Keyword": true,
						"Templet": "syntax",
						"Help": {
							"Caption": "Declare",
							"Define": "Declare Sub FuncName Lib \\\"LibName\\\" Alias \\\"AliasName\\\" (...)<br>Declare Function FuncName Lib \\\"LibName\\\" Alias \\\"AliasName\\\" (...) As Long",
							"Describe": "定义一个来自外部 DLL 的函数，一般用于定义系统 API，支持各种基础类型和结构体、指针的访问，也支持回调函数（函数声明时应使用 CallBack 关键字修饰）。"
						}
					},
					{
						"Caption": "Include",
						"Remark": "引用代码文件",
						"Visible": true,
						"Keyword": true,
						"InsCodeTop": "#Include Once \"文件名\"",
						"Templet": "syntax",
						"Help": {
							"Caption": "#Include",
							"Define": "#Include [Once] \\\"Path\\\"",
							"Describe": "引用 Path 路径的文件到当前源代码，相当于在引用的位置添加了目标文件的内容，如果指定了 Once，则文件只会被引用一次，避免出现重复定义的问题。"
						}
					},
					{
						"Caption": "Uses",
						"Remark": "引用插件",
						"Visible": true,
						"Keyword": true,
						"InsCodeTop": "Uses \"文件名\"",
						"Templet": "syntax",
						"Help": {
							"Caption": "Uses",
							"Define": "Uses \\\"Name\\\"",
							"Describe": "引用名为 Name 的 ThinBasic 插件。"
						}
					}
				]
			},
			{
				"Caption": "Data Type",
				"Icon": "文件夹",
				"Visible": true,
				"Templet": "index",
				"Help": {
					"Caption": ""
				},
				"Child": [
					{
						"Caption": "Byte",
						"Remark": "字节",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Dim sVarName As Byte",
						"Templet": "variant",
						"Help": {
							"Caption": "Byte",
							"Define": "Dim sVarName As Byte",
							"Describe": "字节类型（8位长度整数），占用空间 1 字节，可表示范围 0 - 255。"
						}
					},
					{
						"Caption": "Integer",
						"Remark": "短整数",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Dim sVarName As Integer",
						"Templet": "variant",
						"Help": {
							"Caption": "Integer",
							"Define": "Dim sVarName As Integer",
							"Describe": "短整数类型（16位长度整数），占用空间 2 字节，可表示范围 -32768 - 32767。"
						}
					},
					{
						"Caption": "Long",
						"Remark": "整数",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Dim sVarName As Long",
						"Templet": "variant",
						"Help": {
							"Caption": "Long",
							"Define": "Dim sVarName As Long",
							"Describe": "整数类型（32位长度整数），占用空间 4 字节，可表示范围 -2147483648 - 2147483647。"
						}
					},
					{
						"Caption": "Int64",
						"Remark": "长整数",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Dim sVarName As Int64",
						"Templet": "variant",
						"Help": {
							"Caption": "Int64",
							"Define": "Dim sVarName As Int64",
							"Describe": "长整数类型（64位长度整数），占用空间 8 字节，表示范围 -9223372036854775808 到 9223372036854775807。"
						}
					},
					{
						"Caption": "WORD",
						"Remark": "无符号短整数",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Dim sVarName As WORD",
						"Templet": "variant",
						"Help": {
							"Caption": "WORD",
							"Define": "Dim sVarName As WORD",
							"Describe": "无符号短整数类型（16位长度无符号整数），占用空间 2 字节，可表示范围 0 - 65535。"
						}
					},
					{
						"Caption": "DWORD",
						"Remark": "无符号整数",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Dim sVarName As DWORD",
						"Templet": "variant",
						"Help": {
							"Caption": "DWORD",
							"Define": "Dim sVarName As DWORD",
							"Describe": "无符号整数类型（32位长度无符号整数），占用空间 4 字节，可表示范围 0 - 4294967295。"
						}
					},
					{
						"Caption": "Single",
						"Remark": "单精度浮点数",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Dim sVarName As Single",
						"Templet": "variant",
						"Help": {
							"Caption": "Single",
							"Define": "Dim sVarName As Single",
							"Describe": "单精度浮点数类型（32位长度小数），占用空间 4 字节，可表示范围 8.43x10^-37 - 3.40x10^38。"
						}
					},
					{
						"Caption": "Double",
						"Remark": "双精度浮点数",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Dim sVarName As Double",
						"Templet": "variant",
						"Help": {
							"Caption": "Double",
							"Define": "Dim sVarName As Double",
							"Describe": "双精度浮点数类型（64位长度小数），占用空间 8 字节，可表示范围 4.19x10^-307 - 1.79x10^308。"
						}
					},
					{
						"Caption": "Currency",
						"Remark": "货币",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Dim sVarName As Currency",
						"Templet": "variant",
						"Help": {
							"Caption": "Currency",
							"Define": "Dim sVarName As Currency",
							"Describe": "货币类型，占用空间 8 字节，可表示4位小数点范围内的小数，表示范围 -9.22x10^14 - +9.22x10^14。"
						}
					},
					{
						"Caption": "String",
						"Remark": "字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Dim sVarName As String",
						"Templet": "variant",
						"Help": {
							"Caption": "String",
							"Define": "Dim sVarName As String[ * Size]",
							"Describe": "字符串类型，最大可存储 2GB 内容的字符串。"
						}
					},
					{
						"Caption": "ZString",
						"Remark": "ANSI字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Dim sVarName As ZString",
						"Templet": "variant",
						"Help": {
							"Caption": "ZString",
							"Define": "Dim sVarName As ZString[ * Size]",
							"Describe": "字符串类型，最大可存储 2GB 内容的字符串，这种字符串以 \\0 结尾，多用于 API 调用。"
						}
					},
					{
						"Caption": "WString",
						"Remark": "Unicode字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Dim sVarName As WString",
						"Templet": "variant",
						"Help": {
							"Caption": "WString",
							"Define": "Dim sVarName As WString[Z][ * Size]",
							"Describe": "Unicode字符串类型，最大可存储 2GB 内容的字符串，定义固定长度字符串时，类型应使用 WStringZ。"
						}
					},
					{
						"Caption": "Variant",
						"Remark": "变体类型",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Dim sVarName As Variant",
						"Templet": "variant",
						"Help": {
							"Caption": "Variant",
							"Define": "Dim sVarName As Variant",
							"Describe": "变体数据类型，可以容纳任何已知类型的数据（很多命令不支持这种数据类型，不推荐使用）"
						}
					},
					{
						"Caption": "COM Object",
						"Remark": "COM对象",
						"Visible": true,
						"InsCode": "Dim sVarName As Object = CreateObject(\"sProgID\")",
						"Templet": "variant",
						"Help": {
							"Caption": "Object",
							"Define": "Dim sVarName As Object<br>Dim sVarName As COM<br>Dim sVarName As iDispatch",
							"Describe": "COM对象，可用于访问大漠插件、WSH、WMI等对象。"
						}
					},
					{
						"备注": "隐藏的条目，用来生成自动完成和气泡提示",
						"Caption": "COM",
						"Remark": "COM对象",
						"Visible": false,
						"Keyword": true,
						"Templet": "variant",
						"Help": {
							"Caption": "Object",
							"Define": "Dim sVarName As Object<br>Dim sVarName As COM<br>Dim sVarName As iDispatch",
							"Describe": "COM对象，可用于访问大漠插件、WSH、WMI等对象。"
						}
					},
					{
						"备注": "隐藏的条目，用来生成自动完成和气泡提示",
						"Caption": "Object",
						"Remark": "COM对象",
						"Visible": false,
						"Keyword": true,
						"Templet": "variant",
						"Help": {
							"Caption": "Object",
							"Define": "Dim sVarName As Object<br>Dim sVarName As COM<br>Dim sVarName As iDispatch",
							"Describe": "COM对象，可用于访问大漠插件、WSH、WMI等对象。"
						}
					},
					{
						"备注": "隐藏的条目，用来生成自动完成和气泡提示",
						"Caption": "iDispatch",
						"Remark": "COM对象",
						"Visible": false,
						"Keyword": true,
						"Templet": "variant",
						"Help": {
							"Caption": "Object",
							"Define": "Dim sVarName As Object<br>Dim sVarName As COM<br>Dim sVarName As iDispatch",
							"Describe": "COM对象，可用于访问大漠插件、WSH、WMI等对象。"
						}
					}
				]
			},
			{
				"Caption": "Math Operator",
				"Icon": "文件夹",
				"Visible": true,
				"Templet": "index",
				"Help": {
					"Caption": ""
				},
				"Child": [
					{
						"Caption": "+",
						"Remark": "加法",
						"Visible": true,
						"InsCode": "1 + 1",
						"Templet": "syntax",
						"Help": {
							"Caption": "+",
							"Define": "val1 + val2",
							"Describe": "加法运算。"
						}
					},
					{
						"Caption": "-",
						"Remark": "减法",
						"Visible": true,
						"InsCode": "1 - 1",
						"Templet": "syntax",
						"Help": {
							"Caption": "-",
							"Define": "val1 - val2",
							"Describe": "减法运算。"
						}
					},
					{
						"Caption": "*",
						"Remark": "乘法",
						"Visible": true,
						"InsCode": "2 * 2",
						"Templet": "syntax",
						"Help": {
							"Caption": "*",
							"Define": "val1 * val2",
							"Describe": "乘法运算。"
						}
					},
					{
						"Caption": "/",
						"Remark": "除法",
						"Visible": true,
						"InsCode": "5 / 2",
						"Templet": "syntax",
						"Help": {
							"Caption": "/",
							"Define": "val1 / val2",
							"Describe": "除法运算，得到小数结果。"
						}
					},
					{
						"Caption": "\\",
						"Remark": "除法 [整数]",
						"Visible": true,
						"InsCode": "5 \\ 2",
						"Templet": "syntax",
						"Help": {
							"Caption": "\\",
							"Define": "val1 \\ val2",
							"Describe": "除法运算，得到整数结果。"
						}
					},
					{
						"Caption": "^",
						"Remark": "求幂",
						"Visible": true,
						"InsCode": "3 ^ 3",
						"Templet": "syntax",
						"Help": {
							"Caption": "^",
							"Define": "val1 ^ val2",
							"Describe": "求幂运算。"
						}
					}
				]
			},
			{
				"Caption": "Logical Operator",
				"Icon": "文件夹",
				"Visible": true,
				"Templet": "index",
				"Help": {
					"Caption": ""
				},
				"Child": [
					{
						"Caption": ">",
						"Remark": "大于",
						"Visible": true,
						"InsCode": "1 > 2",
						"Templet": "syntax",
						"Help": {
							"Caption": ">",
							"Define": "val1 > val2",
							"Describe": "比较两个数值的大小。"
						}
					},
					{
						"Caption": "<",
						"Remark": "小于",
						"Visible": true,
						"InsCode": "1 < 2",
						"Templet": "syntax",
						"Help": {
							"Caption": "&lt;",
							"Define": "val1 < val2",
							"Describe": "比较两个数值的大小。"
						}
					},
					{
						"Caption": ">=",
						"Remark": "大于或等于",
						"Visible": true,
						"InsCode": "1 >= 2",
						"Templet": "syntax",
						"Help": {
							"Caption": ">=",
							"Define": "val1 >= val2",
							"Describe": "比较两个数值的大小。"
						}
					},
					{
						"Caption": "<=",
						"Remark": "小于或等于",
						"Visible": true,
						"InsCode": "1 <= 2",
						"Templet": "syntax",
						"Help": {
							"Caption": "<=",
							"Define": "val1 <= val2",
							"Describe": "比较两个数值的大小。"
						}
					},
					{
						"Caption": "=",
						"Remark": "等于",
						"Visible": true,
						"InsCode": "1 = 2",
						"Templet": "syntax",
						"Help": {
							"Caption": "=",
							"Define": "val1 = val2",
							"Describe": "判断两个数值是否相等。"
						}
					},
					{
						"Caption": "<>",
						"Remark": "不等于",
						"Visible": true,
						"InsCode": "1 <> 2",
						"Templet": "syntax",
						"Help": {
							"Caption": "<>",
							"Define": "val1 <> val2",
							"Describe": "判断两个数值是否不相等。"
						}
					},
					{
						"Caption": "And",
						"Remark": "与",
						"Visible": true,
						"InsCode": "true And false",
						"Templet": "syntax",
						"Help": {
							"Caption": "And",
							"Define": "val1 And val2",
							"Describe": "与运算，运算两侧条件必须同时达成，才会返回 true。"
						}
					},
					{
						"Caption": "Or",
						"Remark": "或",
						"Visible": true,
						"InsCode": "true Or false",
						"Templet": "syntax",
						"Help": {
							"Caption": "Or",
							"Define": "val1 Or val2",
							"Describe": "或运算，运算两侧条件有一个达成，就会返回 true。"
						}
					},
					{
						"Caption": "Not",
						"Remark": "非",
						"Visible": true,
						"InsCode": "Not true",
						"Templet": "syntax",
						"Help": {
							"Caption": "Not",
							"Define": "Not val",
							"Describe": "非运算，将运算结果翻转，如果结果为 true，则运算后为 false。"
						}
					},
					{
						"Caption": "All",
						"Remark": "判断所有条件成立",
						"Visible": true,
						"InsCode": "All(true, false, true)",
						"Templet": "syntax",
						"Help": {
							"Caption": "All",
							"Define": "All(...)",
							"Describe": "输入的条件表达式必须全部为 true，才会返回 true。"
						}
					},
					{
						"Caption": "Some",
						"Remark": "判断部分条件成立",
						"Visible": true,
						"InsCode": "Some(true, false, true)",
						"Templet": "syntax",
						"Help": {
							"Caption": "Some",
							"Define": "Some(...)",
							"Describe": "输入的条件表达式只要有一个为 true，就会返回 true。"
						}
					},
					{
						"Caption": "IsTrue",
						"Remark": "是否为 true",
						"Visible": true,
						"InsCode": "IsTrue(true)",
						"Templet": "syntax",
						"Help": {
							"Caption": "IsTrue",
							"Define": "IsTrue(Exp)",
							"Describe": "判断一个值的结果是否为 true。"
						}
					},
					{
						"Caption": "IsFalse",
						"Remark": "是否为 false",
						"Visible": true,
						"InsCode": "IsFalse(true)",
						"Templet": "syntax",
						"Help": {
							"Caption": "IsFalse",
							"Define": "IsFalse(Exp)",
							"Describe": "判断一个值的结果是否为 false。"
						}
					}
				]
			},
			{
				"Caption": "String Operator",
				"Icon": "文件夹",
				"Visible": true,
				"Templet": "index",
				"Help": {
					"Caption": ""
				},
				"Child": [
					{
						"Caption": "&",
						"Remark": "字符串拼接",
						"Visible": true,
						"InsCode": "\"3\" & 3",
						"Templet": "syntax",
						"Help": {
							"Caption": "&amp;",
							"Define": "val1 & val2",
							"Describe": "将两个数据转换为字符串，再拼接起来。"
						}
					}
				]
			},
			{
				"Caption": "Bit Operator",
				"Icon": "文件夹",
				"Visible": true,
				"Templet": "index",
				"Help": {
					"Caption": ""
				},
				"Child": [
					{
						"Caption": "<<",
						"Remark": "左移位",
						"Visible": true,
						"InsCode": "8 << 2",
						"Templet": "syntax",
						"Help": {
							"Caption": "<<",
							"Define": "val << count",
							"Describe": "将 val 向左移 count 位（二进制位）。"
						}
					},
					{
						"Caption": ">>",
						"Remark": "右移位",
						"Visible": true,
						"InsCode": "8 >> 2",
						"Templet": "syntax",
						"Help": {
							"Caption": ">>",
							"Define": "val >> count",
							"Describe": "将 val 右左移 count 位（二进制位）。"
						}
					},
					{
						"Caption": "AndB",
						"Remark": "按位与",
						"Visible": true,
						"InsCode": "AndB(8, 15)",
						"Templet": "syntax",
						"Help": {
							"Caption": "AndB",
							"Define": "AndB(val1, val2)",
							"Describe": "将 val1 和 val2 进行位与运算。"
						}
					},
					{
						"Caption": "OrB",
						"Remark": "按位或",
						"Visible": true,
						"InsCode": "OrB(8, 15)",
						"Templet": "syntax",
						"Help": {
							"Caption": "OrB",
							"Define": "OrB(val1, val2)",
							"Describe": "将 val1 和 val2 进行位或运算。"
						}
					},
					{
						"Caption": "NotB",
						"Remark": "按位非",
						"Visible": true,
						"InsCode": "NotB(15)",
						"Templet": "syntax",
						"Help": {
							"Caption": "NotB",
							"Define": "NotB(val)",
							"Describe": "将 val 进行位非运算。"
						}
					},
					{
						"Caption": "Xor",
						"Remark": "按位异或",
						"Visible": true,
						"InsCode": "8 Xor 15",
						"Templet": "syntax",
						"Help": {
							"Caption": "Xor",
							"Define": "val1 Xor val2",
							"Describe": "将 val1 和 val2 进行位异或运算。"
						}
					}
				]
			}
		]
	},
	{
		"Caption": "Standard library",
		"Icon": "文件夹",
		"Visible": true,
		"Templet": "index",
		"Help": {
			"Caption": ""
		},
		"Expand": false,
		"Child": [
			{
				"Caption": "Data Type",
				"Icon": "文件夹",
				"Visible": true,
				"Templet": "index",
				"Help": {
					"Caption": ""
				},
				"Child": [
					{
						"Caption": "CStr",
						"Remark": "转换为字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "CStr(0)",
						"Templet": "command",
						"Help": {
							"Caption": "CStr",
							"Define": "sRet = CStr(varNum[, Digits])",
							"Describe": "将数字转换为字符串类型",
							"RetType": "String",
							"Return": "返回转换后的字符串",
							"Param": [
								{
									"Caption": "varNum",
									"DataType": "Double",
									"Describe": "要转换的数据",
									"Optional": false
								},
								{
									"Caption": "Digits",
									"DataType": "Integer",
									"Describe": "生成结果时保留的最大有效位数（1-18）",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "CLng",
						"Remark": "转换为整数",
						"Visible": true,
						"Keyword": true,
						"InsCode": "CLng(\"10\")",
						"Templet": "command",
						"Help": {
							"Caption": "CLng",
							"Define": "sRet = CLng(sText)",
							"Describe": "将字符串转换为整数类型",
							"RetType": "Integer",
							"Return": "返回转换后的整数",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "要转换的数据",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "CDbl",
						"Remark": "转换为小数",
						"Visible": true,
						"Keyword": true,
						"InsCode": "CDbl(\"3.14\")",
						"Templet": "command",
						"Help": {
							"Caption": "CDbl",
							"Define": "sRet = CDbl(sText)",
							"Describe": "将字符串转换为数字类型",
							"RetType": "Double",
							"Return": "返回转换后的数字",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "要转换的数据",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "CBool",
						"Remark": "转换为逻辑数据",
						"Visible": true,
						"Keyword": true,
						"InsCode": "CBool(0)",
						"Templet": "command",
						"Help": {
							"Caption": "CBool",
							"Define": "sRet = CBool(varData)",
							"Describe": "将数据转换为逻辑类型",
							"RetType": "Boolean",
							"Return": "返回转换后的逻辑值",
							"Param": [
								{
									"Caption": "varData",
									"DataType": "Var",
									"Describe": "要转换的数据",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "SizeOf",
						"Remark": "获取数据长度",
						"Visible": true,
						"Keyword": true,
						"InsCode": "SizeOf(Long)",
						"Templet": "command",
						"Help": {
							"Caption": "SizeOf",
							"Define": "Result = SizeOf(Variant)",
							"Describe": "获取一个变量或数据类型的数据长度（字节）",
							"RetType": "Integer",
							"Return": "返回变量或数据类型的数据长度",
							"Param": [
								{
									"Caption": "Variant",
									"DataType": "Any",
									"Describe": "变量或数据类型",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "TypeOf",
						"Remark": "获取数据类型",
						"Visible": true,
						"Keyword": true,
						"InsCode": "TypeOf(0)",
						"Templet": "command",
						"Help": {
							"Caption": "TypeOf",
							"Define": "Result = TypeOf(Variant)",
							"Describe": "获取一个变量或值的数据类型",
							"RetType": "String",
							"Return": "返回值的数据类型，字符串格式",
							"Param": [
								{
									"Caption": "Variant",
									"DataType": "Any",
									"Describe": "变量或立即值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Swap",
						"Remark": "交换数据",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Swap(Var1, Var2)",
						"Templet": "command",
						"Help": {
							"Caption": "Swap",
							"Define": "Swap(Var1, Var2)",
							"Describe": "交换两个变量的值",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "Var1",
									"DataType": "Any",
									"Describe": "交换给第二个变量的值",
									"Optional": false
								},
								{
									"Caption": "Var2",
									"DataType": "Any",
									"Describe": "交换给第一个变量的值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Variable_Exists",
						"Remark": "变量是否存在",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Variable_Exists(\"varName\")",
						"Templet": "command",
						"Help": {
							"Caption": "Variable_Exists",
							"Define": "Variable_Exists(svarName)",
							"Describe": "判断某个变量是否存在",
							"RetType": "Boolean",
							"Return": "存在返回 true，不存在返回 false",
							"Param": [
								{
									"Caption": "svarName",
									"DataType": "String",
									"Describe": "变量名",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Type_Exists",
						"Remark": "数据类型是否存在",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Type_Exists(\"TypeName\")",
						"Templet": "command",
						"Help": {
							"Caption": "Type_Exists",
							"Define": "Type_Exists(sTypeName)",
							"Describe": "判断某个数据类型是否存在（主要用于判断结构体）",
							"RetType": "Boolean",
							"Return": "存在返回 true，不存在返回 false",
							"Param": [
								{
									"Caption": "sTypeName",
									"DataType": "String",
									"Describe": "变量名",
									"Optional": false
								}
							]
						}
					}
				]
			},
			{
				"Caption": "String",
				"Icon": "文件夹",
				"Visible": true,
				"Templet": "index",
				"Help": {
					"Caption": ""
				},
				"Child": [
					{
						"Caption": "Asc",
						"Remark": "获取字符的ASCII码",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Asc(\"A\")",
						"Templet": "command",
						"Help": {
							"Caption": "Asc",
							"Define": "sRet = Asc(sExp[, iPos])",
							"Describe": "获取字符对应的 ASCII 代码，只能获取英文字符。",
							"RetType": "Byte",
							"Return": "返回获取到的 ASCII 代码",
							"Param": [
								{
									"Caption": "sExp",
									"DataType": "String",
									"Describe": "要转换的数据",
									"Optional": false
								},
								{
									"Caption": "iPos",
									"DataType": "Integer",
									"Describe": "要获取的字符位置，如果设置为负数，则从后向前数；如果指定为 0 或超出字符串范围，函数返回 -1",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "Chr",
						"Remark": "根据ASCII码获取字符",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Chr(65)",
						"Templet": "command",
						"Help": {
							"Caption": "Chr",
							"Define": "sRet = Chr(...)",
							"Describe": "返回 ASCII 码对应的字符，可以设置多个 ASCII 码。",
							"RetType": "String",
							"Return": "返回转换后的字符串",
							"Param": [
								{
									"Caption": "...",
									"DataType": "Byte",
									"Describe": "要转换的 ASCII 码序列",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Bin",
						"Remark": "转换数字到二进制表达形式",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Bin(16)",
						"Templet": "command",
						"Help": {
							"Caption": "Bin",
							"Define": "sRet = Bin(iExp[, iDigits])",
							"Describe": "将一个整数数据转换为二进制表达形式（字符串）。",
							"RetType": "String",
							"Return": "返回转换后的二进制数值序列",
							"Param": [
								{
									"Caption": "iExp",
									"DataType": "Integer",
									"Describe": "要转换为二进制字符串表达形式的整数数据",
									"Optional": false
								},
								{
									"Caption": "iDigits",
									"DataType": "Integer",
									"Describe": "每隔多少位使用空格进行分割",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "Choose$",
						"Remark": "返回某个参数",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Choose$(3, \"Val1\", \"Val2\", \"Val3\")",
						"Templet": "command",
						"Help": {
							"Caption": "Choose$",
							"Define": "sRet = Choose$(iExp, ...)",
							"Describe": "返回第 iExp + 1 个参数的值。",
							"RetType": "String",
							"Return": "返回第 iExp + 1 个参数的值",
							"Param": [
								{
									"Caption": "iExp",
									"DataType": "Integer",
									"Describe": "返回第几个参数的数据",
									"Optional": false
								},
								{
									"Caption": "...",
									"DataType": "String",
									"Describe": "可以返回的参数序列",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Expand$",
						"Remark": "将变量代入字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Expand$(\"\")",
						"Templet": "command",
						"Help": {
							"Caption": "Expand$",
							"Define": "sRet = Expand$(sText)",
							"Describe": "在字符串中找到以 $ 开头的文本，如果脚本中存在同名变量，则以变量值替换这段内容。",
							"RetType": "String",
							"Return": "返回替换后的文本",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "进行处理的字符串",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Hex",
						"Remark": "转换数字到十六进制表达形式",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Hex(254)",
						"Templet": "command",
						"Help": {
							"Caption": "Hex",
							"Define": "sRet = Hex(iNumber[, iDigits])",
							"Describe": "将整数转换为十六进制表示形式的字符串。",
							"RetType": "String",
							"Return": "返回转换后的文本",
							"Param": [
								{
									"Caption": "iNumber",
									"DataType": "Integer",
									"Describe": "要转换为16进制的整数",
									"Optional": false
								},
								{
									"Caption": "iDigits",
									"DataType": "String",
									"Describe": "转换后的数据要保留多少位",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "InStr",
						"Remark": "查找字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "InStr(\"abc\", \"b\")",
						"Templet": "command",
						"Help": {
							"Caption": "InStr",
							"Define": "sRet = InStr([iPos, ]sText, sSubText)",
							"Describe": "查找字符串。",
							"RetType": "Integer",
							"Return": "返回找到的字符串出现的位置，这个位置是相对文本开始位置而言的。",
							"Param": [
								{
									"Caption": "iPos",
									"DataType": "Integer",
									"Describe": "从哪个位置开始查找",
									"Optional": true
								},
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "从这个字符串中查找",
									"Optional": false
								},
								{
									"Caption": "sSubText",
									"DataType": "String",
									"Describe": "要查找的字符串",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "IsLike",
						"Remark": "判断字符串是否相似",
						"Visible": true,
						"Keyword": true,
						"InsCode": "IsLike(\"abc\", \"?b*\", false)",
						"Templet": "command",
						"Help": {
							"Caption": "IsLike",
							"Define": "sRet = IsLike(sText, sPattern[, bIgnoreCase])",
							"Describe": "判断两个字符串是否近似（使用通配符进行匹配）。",
							"RetType": "Boolean",
							"Return": "可以匹配返回 true，无法匹配返回 false。",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "匹配进行对比的字符串",
									"Optional": false
								},
								{
									"Caption": "sPattern",
									"DataType": "String",
									"Describe": "匹配表达式（?代表任意一个字符、*代表任意多个字符、#代表任意一个数字）",
									"Optional": false
								},
								{
									"Caption": "bIgnoreCase",
									"DataType": "Boolean",
									"Describe": "是否区分大小写",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "LCase$",
						"Remark": "转换为小写",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LCase$(\"AbCdE\")",
						"Templet": "command",
						"Help": {
							"Caption": "LCase$",
							"Define": "sRet = LCase$(sText)",
							"Describe": "将字符串中的大写字符全部转换为小写字符（仅限半角英文字符）。",
							"RetType": "String",
							"Return": "返回转换后的文本",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "要进行转换的字符串",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "UCase$",
						"Remark": "转换为大写",
						"Visible": true,
						"Keyword": true,
						"InsCode": "UCase$(\"AbCdE\")",
						"Templet": "command",
						"Help": {
							"Caption": "UCase$",
							"Define": "sRet = UCase$(sText)",
							"Describe": "将字符串中的小写字符全部转换为大写字符（仅限半角英文字符）。",
							"RetType": "String",
							"Return": "返回转换后的文本",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "要进行转换的字符串",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "MCase$",
						"Remark": "转换为首字母大写",
						"Visible": true,
						"Keyword": true,
						"InsCode": "MCase$(\"AbCdE\")",
						"Templet": "command",
						"Help": {
							"Caption": "MCase$",
							"Define": "sRet = MCase$(sText)",
							"Describe": "将字符串转换为首字母大写格式（仅限半角英文字符）。",
							"RetType": "String",
							"Return": "返回转换后的文本",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "要进行转换的字符串",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Left$",
						"Remark": "获取左侧字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Left$(\"ABCDEFG\", 3)",
						"Templet": "command",
						"Help": {
							"Caption": "Left$",
							"Define": "sRet = Left$(sText, iSize)",
							"Describe": "截取字符串 sText 左侧指定长度的内容返回（长度为字节长度）。",
							"RetType": "String",
							"Return": "返回截取后的文本",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "要进行截取的字符串",
									"Optional": false
								},
								{
									"Caption": "iSize",
									"DataType": "Integer",
									"Describe": "要截取的字节长度",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Right$",
						"Remark": "获取右侧字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Right$(\"ABCDEFG\", 3)",
						"Templet": "command",
						"Help": {
							"Caption": "Right$",
							"Define": "sRet = Right$(sText, iSize)",
							"Describe": "截取字符串 sText 右侧指定长度的内容返回（长度为字节长度）。",
							"RetType": "String",
							"Return": "返回截取后的文本",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "要进行截取的字符串",
									"Optional": false
								},
								{
									"Caption": "iSize",
									"DataType": "Integer",
									"Describe": "要截取的字节长度",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Mid$",
						"Remark": "获取中间字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Mid$(\"ABCDEFG\", 3, 3)",
						"Templet": "command",
						"Help": {
							"Caption": "Mid$",
							"Define": "sRet = Mid$(sText, iPos, iSize)",
							"Describe": "截取字符串 sText 中间指定长度的内容返回（长度为字节长度）。",
							"RetType": "String",
							"Return": "返回截取后的文本",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "要进行截取的字符串",
									"Optional": false
								},
								{
									"Caption": "iPos",
									"DataType": "Integer",
									"Describe": "要进行截取的字符串",
									"Optional": false
								},
								{
									"Caption": "iSize",
									"DataType": "Integer",
									"Describe": "要截取的字节长度",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "LeftAndRight$",
						"Remark": "获取左右两侧字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LeftAndRight$(\"ABCDEFG\", 2, 2)",
						"Templet": "command",
						"Help": {
							"Caption": "LeftAndRight$",
							"Define": "sRet = LeftAndRight$(sText, iLeftSize, iRightSize)",
							"Describe": "截取字符串 sText 两侧指定长度的内容返回（长度为字节长度）。",
							"RetType": "String",
							"Return": "返回截取后的文本",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "要进行截取的字符串",
									"Optional": false
								},
								{
									"Caption": "iLeftSize",
									"DataType": "Integer",
									"Describe": "左侧截取的长度",
									"Optional": false
								},
								{
									"Caption": "iRightSize",
									"DataType": "Integer",
									"Describe": "右侧截取的长度",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Len",
						"Remark": "获取字符串长度",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Len(\"ABCDEFG\")",
						"Templet": "command",
						"Help": {
							"Caption": "Len",
							"Define": "iRet = Len(sText)",
							"Describe": "获取一个字符串的长度（字节长度）。",
							"RetType": "Integer",
							"Return": "返回字符串长度",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "要获取长度的字符串",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "LSet$",
						"Remark": "填充左侧字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LSet$(\"ABCDEFG\", 10)",
						"Templet": "command",
						"Help": {
							"Caption": "LSet$",
							"Define": "sRet = LSet$(sText, iSize[ Using sChar])",
							"Describe": "使用特定字符填充字符串到指定长度，这个字符串会保证在填充后左对齐。",
							"RetType": "String",
							"Return": "返回填充后的文本",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "原始字符串",
									"Optional": false
								},
								{
									"Caption": "iSize",
									"DataType": "Integer",
									"Describe": "填充后的字符串长度",
									"Optional": false
								},
								{
									"Caption": "sChar",
									"DataType": "String",
									"Describe": "填充使用的字符串，默认为半角空格",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "RSet$",
						"Remark": "填充右侧字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "RSet$(\"ABCDEFG\", 10)",
						"Templet": "command",
						"Help": {
							"Caption": "RSet$",
							"Define": "sRet = RSet$(sText, iSize[ Using sChar])",
							"Describe": "使用特定字符填充字符串到指定长度，这个字符串会保证在填充后右对齐。",
							"RetType": "String",
							"Return": "返回填充后的文本",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "原始字符串",
									"Optional": false
								},
								{
									"Caption": "iSize",
									"DataType": "Integer",
									"Describe": "填充后的字符串长度",
									"Optional": false
								},
								{
									"Caption": "sChar",
									"DataType": "String",
									"Describe": "填充使用的字符串，默认为半角空格",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "CSet$",
						"Remark": "填充左右两侧字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "CSet$(\"ABCDEFG\", 10)",
						"Templet": "command",
						"Help": {
							"Caption": "CSet$",
							"Define": "sRet = CSet$(sText, iSize[ Using sChar])",
							"Describe": "使用特定字符填充字符串到指定长度，这个字符串会保证在填充后居中对齐。",
							"RetType": "String",
							"Return": "返回填充后的文本",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "原始字符串",
									"Optional": false
								},
								{
									"Caption": "iSize",
									"DataType": "Integer",
									"Describe": "填充后的字符串长度",
									"Optional": false
								},
								{
									"Caption": "sChar",
									"DataType": "String",
									"Describe": "填充使用的字符串，默认为半角空格",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "Iif$",
						"Remark": "根据条件返回数据",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Iif$(\"ABCDEFG\", 10)",
						"Templet": "command",
						"Help": {
							"Caption": "Iif$",
							"Define": "sRet = Iif$(bExp, sTruePart, sFalsePart)",
							"Describe": "判断参数 bExp 是否成立，来决定返回第二个还是第三个参数。",
							"RetType": "String",
							"Return": "根据条件决定具体返回的数据",
							"Param": [
								{
									"Caption": "bExp",
									"DataType": "Boolean",
									"Describe": "要判断的表达式",
									"Optional": false
								},
								{
									"Caption": "sTruePart",
									"DataType": "String",
									"Describe": "当 bExp 参数为 true 时返回的值",
									"Optional": false
								},
								{
									"Caption": "sFalsePart",
									"DataType": "String",
									"Describe": "当 bExp 参数为 false 时返回的值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Trim",
						"Remark": "清理两侧字符",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Trim(\"   <内容>\", Any \" <>\")",
						"Templet": "command",
						"Help": {
							"Caption": "Trim",
							"Define": "sRet = Trim(sText[, [Any ]sMatch])",
							"Describe": "将字符串左右两侧不希望出现的字符清除掉。",
							"RetType": "String",
							"Return": "返回处理后的字符串",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "要处理的字符串",
									"Optional": false
								},
								{
									"Caption": "sMatch",
									"DataType": "String",
									"Describe": "如果这个参数没指定，则默认清除空格，否则清除指定的字符串；如果指定了 Any 参数，则清除 sMatch 出现的所有字符",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "LTrim",
						"Remark": "清理左侧字符",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LTrim(\"   <内容>\", Any \" <>\")",
						"Templet": "command",
						"Help": {
							"Caption": "LTrim",
							"Define": "sRet = LTrim(sText[, [Any ]sMatch])",
							"Describe": "将字符串左侧不希望出现的字符清除掉。",
							"RetType": "String",
							"Return": "返回处理后的字符串",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "要处理的字符串",
									"Optional": false
								},
								{
									"Caption": "sMatch",
									"DataType": "String",
									"Describe": "如果这个参数没指定，则默认清除空格，否则清除指定的字符串；如果指定了 Any 参数，则清除 sMatch 出现的所有字符",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "RTrim",
						"Remark": "清理右侧字符",
						"Visible": true,
						"Keyword": true,
						"InsCode": "RTrim(\"   <内容>\", Any \" <>\")",
						"Templet": "command",
						"Help": {
							"Caption": "RTrim",
							"Define": "sRet = RTrim(sText[, [Any ]sMatch])",
							"Describe": "将字符串右侧不希望出现的字符清除掉。",
							"RetType": "String",
							"Return": "返回处理后的字符串",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "要处理的字符串",
									"Optional": false
								},
								{
									"Caption": "sMatch",
									"DataType": "String",
									"Describe": "如果这个参数没指定，则默认清除空格，否则清除指定的字符串；如果指定了 Any 参数，则清除 sMatch 出现的所有字符",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "Replace",
						"Remark": "替换字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Replace(\"qaq\", \"a\", \"w\")",
						"Templet": "command",
						"Help": {
							"Caption": "Replace",
							"Define": "sRet = Replace(sText, sSubText, sRepText)",
							"Describe": "在字符串中查找。",
							"RetType": "String",
							"Return": "返回处理后的字符串",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "要处理的字符串",
									"Optional": false
								},
								{
									"Caption": "sSubText",
									"DataType": "String",
									"Describe": "要查找的字符串",
									"Optional": false
								},
								{
									"Caption": "sRepText",
									"DataType": "String",
									"Describe": "替换的字符串",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Split",
						"Remark": "分割字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Split(\"1,2,3\", \",\", Array)",
						"Templet": "command",
						"Help": {
							"Caption": "Split",
							"Define": "sRet = Split(sText, sDeli, pArray)",
							"Describe": "使用指定分隔符将字符串分割为数组。",
							"RetType": "Array",
							"Return": "返回分割后数组的成员数量",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "要分割的字符串",
									"Optional": false
								},
								{
									"Caption": "sDeli",
									"DataType": "String",
									"Describe": "分隔符",
									"Optional": false
								},
								{
									"Caption": "pArray",
									"DataType": "String",
									"Describe": "保存分割后数据的数组",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "String$",
						"Remark": "生成字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "String$(10, \"*\")",
						"Templet": "command",
						"Help": {
							"Caption": "String$",
							"Define": "sRet = String$(iCount, sChar)",
							"Describe": "生成指定数量的重复字符。",
							"RetType": "String",
							"Return": "返回生成后的字符串",
							"Param": [
								{
									"Caption": "iCount",
									"DataType": "Integer",
									"Describe": "要生成多少个字符",
									"Optional": false
								},
								{
									"Caption": "sChar",
									"DataType": "String",
									"Describe": "重复字符，如果设置为字符串，只会生成重复的第一个字符。",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "StrInsert",
						"Remark": "插入字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "StrInsert(\"qq\", \"a\", 2)",
						"Templet": "command",
						"Help": {
							"Caption": "StrInsert",
							"Define": "sRet = StrInsert(sText, sInsText, iPos)",
							"Describe": "在字符串中间指定位置插入另一个字符串。",
							"RetType": "String",
							"Return": "返回操作后的字符串",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "要操作的字符串",
									"Optional": false
								},
								{
									"Caption": "sInsText",
									"DataType": "String",
									"Describe": "添加的新字符串。",
									"Optional": false
								},
								{
									"Caption": "iPos",
									"DataType": "Integer",
									"Describe": "字符串添加的位置。",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "StrDelete",
						"Remark": "删除字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "StrDelete(\"qaq\", 2, 1)",
						"Templet": "command",
						"Help": {
							"Caption": "StrDelete",
							"Define": "sRet = StrDelete(sText, iPos, iSize)",
							"Describe": "在字符串中间指定开始，删除指定长度的一段文字。",
							"RetType": "String",
							"Return": "返回操作后的字符串",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "要操作的字符串",
									"Optional": false
								},
								{
									"Caption": "iPos",
									"DataType": "Integer",
									"Describe": "从哪里开始删除文字。",
									"Optional": false
								},
								{
									"Caption": "iSize",
									"DataType": "Integer",
									"Describe": "要删除多长的文字。",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "StrReverse",
						"Remark": "翻转字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "StrReverse(\"CDEFGAB\")",
						"Templet": "command",
						"Help": {
							"Caption": "StrReverse",
							"Define": "sRet = StrReverse(sText)",
							"Describe": "将字符串顺序翻转。",
							"RetType": "String",
							"Return": "返回操作后的字符串",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "要操作的字符串",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "StrFormat",
						"Remark": "格式化字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "StrFormat(\"{1}是全世界{2}\", \"叶飞\", \"最帅的人\")",
						"Templet": "command",
						"Help": {
							"Caption": "StrFormat",
							"Define": "sRet = StrFormat(sFormat, ...)",
							"Describe": "根据字符串格式化排版返回填写内容后的值。",
							"RetType": "String",
							"Return": "返回操作后的字符串",
							"Param": [
								{
									"Caption": "sFormat",
									"DataType": "String",
									"Describe": "格式化排版字符串，使用 {*} 代表之后的参数，从 1 开始",
									"Optional": false
								},
								{
									"Caption": "...",
									"DataType": "String",
									"Describe": "向排版字符串中填写的文本",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Tally",
						"Remark": "统计字符串出现的次数",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Tally(\"qaq\", \"q\")",
						"Templet": "command",
						"Help": {
							"Caption": "Tally",
							"Define": "sRet = Tally(sText, [Any ]sMatch)",
							"Describe": "计算字符串中某个字串或字符出现的次数。",
							"RetType": "Integer",
							"Return": "返回统计好的字串出现次数",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "要做统计的字符串将在这里查找",
									"Optional": false
								},
								{
									"Caption": "sMatch",
									"DataType": "String",
									"Describe": "查找统计的字符串，当这个参数前面加上 Any 时，这个参数中出现的每个字符都会进行统计，结果累加",
									"Optional": false
								}
							]
						}
					}
				]
			},
			{
				"Caption": "Numeric",
				"Icon": "文件夹",
				"Visible": true,
				"Templet": "index",
				"Help": {
					"Caption": ""
				},
				"Child": [
					{
						"Caption": "Int",
						"Remark": "转换为整数",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Int(3.5)",
						"Templet": "command",
						"Help": {
							"Caption": "Int",
							"Define": "iRet = Int(dExp)",
							"Describe": "将浮点数转换为整数。",
							"RetType": "Integer",
							"Return": "返回转换后的整数值",
							"Param": [
								{
									"Caption": "dExp",
									"DataType": "Double",
									"Describe": "要转换的浮点数值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Round",
						"Remark": "四舍五入取整数",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Round(3.5)",
						"Templet": "command",
						"Help": {
							"Caption": "Round",
							"Define": "iRet = Round(dExp)",
							"Describe": "将浮点数转换为整数。",
							"RetType": "Integer",
							"Return": "返回转换后的整数值",
							"Param": [
								{
									"Caption": "dExp",
									"DataType": "Double",
									"Describe": "要转换的浮点数值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Fix",
						"Remark": "返回整数部分",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Fix(3.5)",
						"Templet": "command",
						"Help": {
							"Caption": "Fix",
							"Define": "iRet = Fix(dExp)",
							"Describe": "将浮点数转换为整数。",
							"RetType": "Integer",
							"Return": "返回转换后的整数值",
							"Param": [
								{
									"Caption": "dExp",
									"DataType": "Double",
									"Describe": "要转换的浮点数值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Frac",
						"Remark": "返回小数部分",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Frac(3.14)",
						"Templet": "command",
						"Help": {
							"Caption": "Frac",
							"Define": "iRet = Frac(dExp)",
							"Describe": "获取一个数值的小数部分。",
							"RetType": "Double",
							"Return": "返回数值的小数部分",
							"Param": [
								{
									"Caption": "dExp",
									"DataType": "Double",
									"Describe": "要获取小数部分的数值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Sgn",
						"Remark": "获取符号信息",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Sgn(-1)",
						"Templet": "command",
						"Help": {
							"Caption": "Sgn",
							"Define": "iRet = Sgn(dExp)",
							"Describe": "返回数值表达式的符号信息（正数、负数或0），当数值为正数时返回1，当数值为负数时返回-1，否则返回0。",
							"RetType": "Integer",
							"Return": "返回符号信息",
							"Param": [
								{
									"Caption": "dExp",
									"DataType": "Double",
									"Describe": "要处理的数值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Abs",
						"Remark": "取绝对值",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Abs(-12)",
						"Templet": "command",
						"Help": {
							"Caption": "Abs",
							"Define": "dRet = Abs(dExp)",
							"Describe": "获取 dExp 参数的绝对值。",
							"RetType": "Integer",
							"Return": "返回 dExp 参数的绝对值",
							"Param": [
								{
									"Caption": "dExp",
									"DataType": "Double",
									"Describe": "要获取绝对值的数值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Mod",
						"Remark": "取模（求余数）",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Mod(5, 2)",
						"Templet": "command",
						"Help": {
							"Caption": "Mod",
							"Define": "dRet = Mod(dDividend, dDivisor)",
							"Describe": "取模运算（求余数）。",
							"RetType": "Integer",
							"Return": "返回余数",
							"Param": [
								{
									"Caption": "dDividend",
									"DataType": "Double",
									"Describe": "被除数",
									"Optional": false
								},
								{
									"Caption": "dDivisor",
									"DataType": "Double",
									"Describe": "除数",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Sum",
						"Remark": "求和",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Sum(1, 2, 3, 4)",
						"Templet": "command",
						"Help": {
							"Caption": "Sum",
							"Define": "dRet = Sum(...)",
							"Describe": "数值求和。",
							"RetType": "Integer",
							"Return": "返回所有参数的累加结果",
							"Param": [
								{
									"Caption": "...",
									"DataType": "Double",
									"Describe": "求和的数值序列",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Pow",
						"Remark": "次方计算",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Pow(5, 2)",
						"Templet": "command",
						"Help": {
							"Caption": "Pow",
							"Define": "dRet = Pow(dBase, dExponent)",
							"Describe": "次方计算。",
							"RetType": "Integer",
							"Return": "返回 dBase 参数的 dExponent 次方",
							"Param": [
								{
									"Caption": "dBase",
									"DataType": "Double",
									"Describe": "进行运算的数值",
									"Optional": false
								},
								{
									"Caption": "dExponent",
									"DataType": "Double",
									"Describe": "次方数",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Sqr",
						"Remark": "平方根计算",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Sqr(9)",
						"Templet": "command",
						"Help": {
							"Caption": "Sqr",
							"Define": "dRet = Sqr(dNumber)",
							"Describe": "平方根计算。",
							"RetType": "Double",
							"Return": "返回 dNumber 参数的平方根",
							"Param": [
								{
									"Caption": "dNumber",
									"DataType": "Double",
									"Describe": "进行运算的数值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Pct",
						"Remark": "求百分比",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Pct(23412, 100000, 2)",
						"Templet": "command",
						"Help": {
							"Caption": "Pct",
							"Define": "dRet = Pct(dVal1, dVal2[, iNumberOfDecimalPlaces])",
							"Describe": "计算 dVal1 参数相当于 dVal2 的百分比。",
							"RetType": "Double",
							"Return": "返回计算后的百分比数值",
							"Param": [
								{
									"Caption": "dVal1",
									"DataType": "Double",
									"Describe": "第一个数值",
									"Optional": false
								},
								{
									"Caption": "dVal2",
									"DataType": "Double",
									"Describe": "第二个数值",
									"Optional": false
								},
								{
									"Caption": "iNumberOfDecimalPlaces",
									"DataType": "Integer",
									"Describe": "保留小数位数（默认不保留小数）",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "Exp",
						"Remark": "e为底的指数",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Exp(2)",
						"Templet": "command",
						"Help": {
							"Caption": "Exp",
							"Define": "dRet = Exp(dExp)",
							"Describe": "获取自然常数e为底的指数函数值。",
							"RetType": "Double",
							"Return": "返回自然常数e为底的指数函数值",
							"Param": [
								{
									"Caption": "dExp",
									"DataType": "Double",
									"Describe": "要处理的数值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Log",
						"Remark": "e为底的对数",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Log(2)",
						"Templet": "command",
						"Help": {
							"Caption": "Log",
							"Define": "dRet = Log(dExp)",
							"Describe": "获取自然常数e为底的对数。",
							"RetType": "Double",
							"Return": "返回自然常数e为底的对数",
							"Param": [
								{
									"Caption": "dExp",
									"DataType": "Double",
									"Describe": "要处理的数值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Log10",
						"Remark": "常用对数",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Log10(2)",
						"Templet": "command",
						"Help": {
							"Caption": "Log10",
							"Define": "dRet = Log10(dExp)",
							"Describe": "获取10为底的对数（常用对数）。",
							"RetType": "Double",
							"Return": "返回10为底的对数",
							"Param": [
								{
									"Caption": "dExp",
									"DataType": "Double",
									"Describe": "要处理的数值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Tan",
						"Remark": "正切",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Tan(2)",
						"Templet": "command",
						"Help": {
							"Caption": "Tan",
							"Define": "dRet = Tan(dExp)",
							"Describe": "获取 dExp 参数的正切值。",
							"RetType": "Double",
							"Return": "返回 dExp 参数的正切值",
							"Param": [
								{
									"Caption": "dExp",
									"DataType": "Double",
									"Describe": "要获取正切值的数值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Atn",
						"Remark": "反正切",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Atn(2)",
						"Templet": "command",
						"Help": {
							"Caption": "Atn",
							"Define": "dRet = Atn(dExp)",
							"Describe": "获取 dExp 参数的反正切值。",
							"RetType": "Double",
							"Return": "返回 dExp 参数的反正切值",
							"Param": [
								{
									"Caption": "dExp",
									"DataType": "Double",
									"Describe": "要获取反正切值的数值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Sin",
						"Remark": "正弦",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Sin(2)",
						"Templet": "command",
						"Help": {
							"Caption": "Sin",
							"Define": "dRet = Sin(dExp)",
							"Describe": "获取角度的正弦值。",
							"RetType": "Double",
							"Return": "返回角度的正弦值。",
							"Param": [
								{
									"Caption": "dExp",
									"DataType": "Double",
									"Describe": "要获取正弦的数值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Cos",
						"Remark": "余弦",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Cos(2)",
						"Templet": "command",
						"Help": {
							"Caption": "Cos",
							"Define": "dRet = Cos(dExp)",
							"Describe": "获取角度的余弦值。",
							"RetType": "Double",
							"Return": "返回角度的余弦值。",
							"Param": [
								{
									"Caption": "dExp",
									"DataType": "Double",
									"Describe": "要获取余弦的数值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Max",
						"Remark": "找最大值",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Max(2, 1, 3)",
						"Templet": "command",
						"Help": {
							"Caption": "Max",
							"Define": "dRet = Max(...)",
							"Describe": "获取数值序列中最大的那个数。",
							"RetType": "Double",
							"Return": "返回最大的值。",
							"Param": [
								{
									"Caption": "...",
									"DataType": "Double",
									"Describe": "数值序列",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Min",
						"Remark": "找最小值",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Min(2, 1, 3)",
						"Templet": "command",
						"Help": {
							"Caption": "Min",
							"Define": "dRet = Min(...)",
							"Describe": "获取数值序列中最小的那个数。",
							"RetType": "Double",
							"Return": "返回最小的值。",
							"Param": [
								{
									"Caption": "...",
									"DataType": "Double",
									"Describe": "数值序列",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "MinMax",
						"Remark": "限定数字范围",
						"Visible": true,
						"Keyword": true,
						"InsCode": "MinMax(123, 0, 100)",
						"Templet": "command",
						"Help": {
							"Caption": "MinMax",
							"Define": "dRet = MinMax(dExp, dLowerLimit, dUpperLimit)",
							"Describe": "将数值限定在一个范围内，如果数值大于或小于这个范围，则根据大于或小于返回最大值或最小值。",
							"RetType": "Double",
							"Return": "返回限定范围后的数值。",
							"Param": [
								{
									"Caption": "dExp",
									"DataType": "Double",
									"Describe": "要处理的数值",
									"Optional": false
								},
								{
									"Caption": "dLowerLimit",
									"DataType": "Double",
									"Describe": "范围最小值",
									"Optional": false
								},
								{
									"Caption": "dUpperLimit",
									"DataType": "Double",
									"Describe": "范围最大值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Between",
						"Remark": "获取范围百分比",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Between(300, 0, 1000)",
						"Templet": "command",
						"Help": {
							"Caption": "Between",
							"Define": "dRet = Between(dExp, dLowerValue, dUpperValue)",
							"Describe": "提供一个数值范围（dLowerValue参数确定最小数值、dUpperValue参数确定最大数值），返回 dExp 参数位于这个范围的百分比。",
							"RetType": "Double",
							"Return": "返回数值所处范围的百分比",
							"Param": [
								{
									"Caption": "dExp",
									"DataType": "Double",
									"Describe": "要获取所处范围位置的数值",
									"Optional": false
								},
								{
									"Caption": "dLowerValue",
									"DataType": "Double",
									"Describe": "数值范围的最小值",
									"Optional": false
								},
								{
									"Caption": "dUpperValue",
									"DataType": "Double",
									"Describe": "数值范围的最大值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Choose",
						"Remark": "返回某个参数",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Choose(2, 123, 456, 789)",
						"Templet": "command",
						"Help": {
							"Caption": "Choose",
							"Define": "sRet = Choose(iExp, ...)",
							"Describe": "返回第 iExp + 1 个参数的值。",
							"RetType": "Double",
							"Return": "返回第 iExp + 1 个参数的值",
							"Param": [
								{
									"Caption": "iExp",
									"DataType": "Integer",
									"Describe": "返回第几个参数的数据",
									"Optional": false
								},
								{
									"Caption": "...",
									"DataType": "Double",
									"Describe": "可以返回的参数序列",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Randomize",
						"Remark": "初始化随机数种子",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Randomize",
						"Templet": "command",
						"Help": {
							"Caption": "Randomize",
							"Define": "Randomize[(dRndSeed)]",
							"Describe": "设置随机数生成器种子。",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "dRndSeed",
									"DataType": "Double",
									"Describe": "随机数种子，缺省使用 Timer 作为随机数种子",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "Rnd",
						"Remark": "取随机数",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Rnd",
						"Templet": "command",
						"Help": {
							"Caption": "Rnd",
							"Define": "Rnd<br>Rnd(min, max)",
							"Describe": "生成随机数（随机数是一个伪随机队列，受随机数种子的影响，可使用 Randomize 命令初始化随机数种子），当函数指定两个参数时，生成参数范围内的随机整数（包含参数本身），不指定参数时生成 0 - 1 范围内的随机小数（不包含1）。",
							"RetType": "Integer",
							"Return": "返回生成的随机数",
							"Param": [
								{
									"Caption": "min",
									"DataType": "Integer",
									"Describe": "范围最小值（也可以作为最大值使用）",
									"Optional": true
								},
								{
									"Caption": "max",
									"DataType": "Integer",
									"Describe": "范围最大值（也可以作为最小值使用）",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "RndF",
						"Remark": "取指定范围浮点随机数",
						"Visible": true,
						"Keyword": true,
						"InsCode": "RndF(1, 10)",
						"Templet": "command",
						"Help": {
							"Caption": "RndF",
							"Define": "RndF(min, max)",
							"Describe": "生成参数范围内的随机小数（包含参数本身）。",
							"RetType": "Double",
							"Return": "返回生成的随机数",
							"Param": [
								{
									"Caption": "min",
									"DataType": "Integer",
									"Describe": "范围最小值（也可以作为最大值使用）",
									"Optional": true
								},
								{
									"Caption": "max",
									"DataType": "Integer",
									"Describe": "范围最大值（也可以作为最小值使用）",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "Collision_CToC",
						"Remark": "圆形碰撞检测",
						"Visible": false,
						"Keyword": true,
						"InsCode": "Collision_CToC(2, 123, 456, 789)",
						"Templet": "command",
						"Help": {
							"Caption": "Collision_CToC",
							"Define": "sRet = Collision_CToC(iExp)",
							"Describe": "圆形碰撞检测。",
							"RetType": "Integer",
							"Return": "返回第 iExp + 1 个参数的值",
							"Param": [
								{
									"Caption": "iExp",
									"DataType": "Integer",
									"Describe": "返回第几个参数的数据",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Dist",
						"Remark": "取两点间距",
						"Visible": false,
						"Keyword": true,
						"InsCode": "Dist(2, 123, 456, 789)",
						"Templet": "command",
						"Help": {
							"Caption": "Dist",
							"Define": "sRet = Dist(iExp)",
							"Describe": "获取两点之间的距离（勾股定理）。",
							"RetType": "Integer",
							"Return": "返回第 iExp + 1 个参数的值",
							"Param": [
								{
									"Caption": "iExp",
									"DataType": "Integer",
									"Describe": "返回第几个参数的数据",
									"Optional": false
								}
							]
						}
					}
				]
			},
			{
				"Caption": "Array",
				"Icon": "文件夹",
				"Visible": true,
				"Templet": "index",
				"Help": {
					"Caption": ""
				},
				"Child": [
					{
						"Caption": "CountOf",
						"Remark": "获取元素数量",
						"Visible": true,
						"Keyword": true,
						"InsCode": "CountOf(arr)",
						"Templet": "command",
						"Help": {
							"Caption": "CountOf",
							"Define": "CountOf(arr[(Dimension)])<br>CountOf(arr[, Dimension])",
							"Describe": "获取数组指定维度的元素数量。",
							"RetType": "Integer",
							"Return": "返回元素数量",
							"Param": [
								{
									"Caption": "arr",
									"DataType": "Array",
									"Describe": "进行操作的数组",
									"Optional": false
								},
								{
									"Caption": "Dimension",
									"DataType": "Integer",
									"Describe": "数组的维度，缺省为 1",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "LBound",
						"Remark": "获取数组下标",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LBound(arr)",
						"Templet": "command",
						"Help": {
							"Caption": "LBound",
							"Define": "LBound(arr[(Dimension)])<br>LBound(arr[, Dimension])",
							"Describe": "获取数组指定维度的下标。",
							"RetType": "Integer",
							"Return": "返回数组下标",
							"Param": [
								{
									"Caption": "arr",
									"DataType": "Array",
									"Describe": "进行操作的数组",
									"Optional": false
								},
								{
									"Caption": "Dimension",
									"DataType": "Integer",
									"Describe": "数组的维度，缺省为 1",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "UBound",
						"Remark": "获取数组上标",
						"Visible": true,
						"Keyword": true,
						"InsCode": "UBound(arr)",
						"Templet": "command",
						"Help": {
							"Caption": "UBound",
							"Define": "UBound(arr[(Dimension)])<br>UBound(arr[, Dimension])",
							"Describe": "获取数组指定维度的上标。",
							"RetType": "Integer",
							"Return": "返回数组上标",
							"Param": [
								{
									"Caption": "arr",
									"DataType": "Array",
									"Describe": "进行操作的数组",
									"Optional": false
								},
								{
									"Caption": "Dimension",
									"DataType": "Integer",
									"Describe": "数组的维度，缺省为 1",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "Join",
						"Remark": "将数组合并为字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Join(Array, \",\")",
						"Templet": "command",
						"Help": {
							"Caption": "Join",
							"Define": "sRet = Join(arrData, sDeli[, sFormat[, iIndexFrom[, iIndexTo]]])<br>sRet = Join(arrData, sDeli, sRowDeli[, sFormat])",
							"Describe": "将一个数组合并为字符串（最高支持到二维数组）。",
							"RetType": "String",
							"Return": "返回合并后的字符串。",
							"Param": [
								{
									"Caption": "arrData",
									"DataType": "Array",
									"Describe": "要合并为字符串的数组",
									"Optional": false
								},
								{
									"Caption": "sDeli",
									"DataType": "String",
									"Describe": "合并数组时使用的分隔符",
									"Optional": false
								},
								{
									"Caption": "sRowDeli",
									"DataType": "String",
									"Describe": "合并二维数组时，使用的行分隔符（仅二维数组时有效）",
									"Optional": false
								},
								{
									"Caption": "sFormat",
									"DataType": "String",
									"Describe": "当合并的数组项是数字类型时，使用的格式化字符串",
									"Optional": true
								},
								{
									"Caption": "iIndexFrom",
									"DataType": "Integer",
									"Describe": "从数组的第几个索引开始合并（仅一维数组时有效）",
									"Optional": true
								},
								{
									"Caption": "iIndexTo",
									"DataType": "Integer",
									"Describe": "合并到数组的第几个索引（仅一维数组时有效）",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "Array Assign",
						"Remark": "批量赋值",
						"Visible": true,
						"InsCode": "Dim arr(3) As Long\nArray Assign arr() = 1, 2, 3",
						"Templet": "command",
						"Help": {
							"Caption": "Array Assign",
							"Define": "Array Assign arr([StartIndex]) = ...",
							"Describe": "对数组元素进行批量赋值。",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "arr",
									"DataType": "Array",
									"Describe": "要进行连续赋值的数组",
									"Optional": false
								},
								{
									"Caption": "...",
									"DataType": "Var",
									"Describe": "数组赋值的数据",
									"Optional": false
								},
								{
									"Caption": "StartIndex",
									"DataType": "Integer",
									"Describe": "从哪一个索引开始进行赋值，缺省为 1",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "Array Fill",
						"Remark": "填充数组",
						"Visible": true,
						"InsCode": "Dim arr(3) As Long\nArray Fill arr() With 1",
						"Templet": "command",
						"Help": {
							"Caption": "Array Fill",
							"Define": "Array Fill arr([StartIndex]) With Value",
							"Describe": "对数组元素的值进行填充。",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "arr",
									"DataType": "Array",
									"Describe": "要进行数据填充的数组",
									"Optional": false
								},
								{
									"Caption": "Value",
									"DataType": "Var",
									"Describe": "填充数组元素的值",
									"Optional": false
								},
								{
									"Caption": "StartIndex",
									"DataType": "Integer",
									"Describe": "从哪一个索引开始进行填充，缺省为 1",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "Array Scan",
						"Remark": "数组元素搜索",
						"Visible": false,
						"InsCode": "Array Scan arr() With 1",
						"Templet": "command",
						"Help": {
							"Caption": "Array Scan",
							"Define": "Array Scan arr([StartIndex]) With Value",
							"Describe": "对数组元素的值进行填充。",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "arr",
									"DataType": "Array",
									"Describe": "要进行数据填充的数组",
									"Optional": false
								},
								{
									"Caption": "Value",
									"DataType": "Var",
									"Describe": "填充数组元素的值",
									"Optional": false
								},
								{
									"Caption": "StartIndex",
									"DataType": "Integer",
									"Describe": "从哪一个索引开始进行填充，缺省为 1",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "Array Sort",
						"Remark": "数组排序",
						"Visible": true,
						"InsCode": "Array Sort arr()",
						"Templet": "command",
						"Help": {
							"Caption": "Array Sort",
							"Define": "Array Sort arr([StartIndex]) [For nElements] [, Collate UCase] [, {Ascend | Descend}] [, AsFiles]",
							"Describe": "对数组元素的值进行排序。",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "arr",
									"DataType": "Array",
									"Describe": "要进行排序的数组",
									"Optional": false
								},
								{
									"Caption": "StartIndex",
									"DataType": "Integer",
									"Describe": "从哪一个索引开始进行排序，缺省为 1",
									"Optional": true
								},
								{
									"Caption": "nElements",
									"DataType": "Integer",
									"Describe": "对多少个数组元素进行排序，缺省为全部数组元素",
									"Optional": true
								},
								{
									"Caption": "Collate UCase",
									"DataType": "Any",
									"Describe": "将所有元素视为大写（仅字符串数组生效，用于忽略大小写区别）",
									"Optional": true
								},
								{
									"Caption": "{Ascend | Descend}",
									"DataType": "Any",
									"Describe": "升序或降序",
									"Optional": true
								},
								{
									"Caption": "AsFiles",
									"DataType": "Any",
									"Describe": "对文件名进行自然排序（避免10排在2之前）",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "Array Sum",
						"Remark": "数组求和",
						"Visible": true,
						"InsCode": "Array Sum arr()",
						"Templet": "command",
						"Help": {
							"Caption": "Array Sum",
							"Define": "dRet = Array Sum arr([StartIndex]) [For nElements]",
							"Describe": "对数组元素的值进行求和。",
							"RetType": "Integer",
							"Return": "返回元素累加的结果",
							"Param": [
								{
									"Caption": "arr",
									"DataType": "Array",
									"Describe": "要进行求和的数组",
									"Optional": false
								},
								{
									"Caption": "StartIndex",
									"DataType": "Integer",
									"Describe": "从哪一个索引开始进行求和，缺省为 1",
									"Optional": true
								},
								{
									"Caption": "nElements",
									"DataType": "Integer",
									"Describe": "对多少个数组元素进行求和，缺省为全部数组元素",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "Array Shift",
						"Remark": "数组元素移动",
						"Visible": false,
						"InsCode": "Array Shift arr()",
						"Templet": "command",
						"Help": {
							"Caption": "Array Shift",
							"Define": "Array Shift arr([StartIndex]) [For nElements]",
							"Describe": "对数组元素的值进行求和。",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "arr",
									"DataType": "Array",
									"Describe": "要进行求和的数组",
									"Optional": false
								},
								{
									"Caption": "StartIndex",
									"DataType": "Integer",
									"Describe": "从哪一个索引开始进行求和，缺省为 1",
									"Optional": true
								},
								{
									"Caption": "nElements",
									"DataType": "Integer",
									"Describe": "对多少个数组元素进行求和，缺省为全部数组元素",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "Array Shuffle",
						"Remark": "数组元素洗牌",
						"Visible": true,
						"InsCode": "Array Shuffle arr()",
						"Templet": "command",
						"Help": {
							"Caption": "Array Shuffle",
							"Define": "Array Shuffle arr([StartIndex]) [For nCount]",
							"Describe": "对数组元素进行“洗牌”，使元素顺序随机（仅支持对数字、字符串和Type用户自定义类型数组进行操作）。",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "arr",
									"DataType": "Array",
									"Describe": "要进行洗牌的数组",
									"Optional": false
								},
								{
									"Caption": "StartIndex",
									"DataType": "Integer",
									"Describe": "从哪一个索引开始进行洗牌，缺省为 1",
									"Optional": true
								},
								{
									"Caption": "nCount",
									"DataType": "Integer",
									"Describe": "词牌次数，缺省为 1",
									"Optional": true
								}
							]
						}
					}
				]
			},
			{
				"Caption": "Hash Table",
				"Icon": "文件夹",
				"Visible": true,
				"Templet": "index",
				"Help": {
					"Caption": ""
				},
				"Child": [
					{
						"Caption": "Hash_New",
						"Remark": "创建哈希表",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Hash_New(0)",
						"Templet": "command",
						"Help": {
							"Caption": "Hash_New",
							"Define": "pRet = Hash_New(nElement)",
							"Describe": "创建一个新的哈希表，并预申请 nElement 参数个数的键值数量；使用这条命令创建的哈希表，不再使用后必须使用 Hash_Free 命令释放，否则会出现内存泄漏 。",
							"RetType": "Ptr",
							"Return": "返回哈希表指针",
							"Param": [
								{
									"Caption": "nElement",
									"DataType": "Integer",
									"Describe": "预申请的元素数量（低于100将按照100计算）",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Hash_Free",
						"Remark": "释放哈希表",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Hash_Free(pHashTable)",
						"Templet": "command",
						"Help": {
							"Caption": "Hash_Free",
							"Define": "Hash_Free(pHashTable)",
							"Describe": "释放之前创建的哈希表，并回收哈希表使用的内存。",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "pHashTable",
									"DataType": "Ptr",
									"Describe": "哈希表指针（使用 Hash_New 创建）",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Hash_Set",
						"Remark": "设置键值",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Hash_Set(pHashTable, \"Key\", \"Value\")",
						"Templet": "command",
						"Help": {
							"Caption": "Hash_Set",
							"Define": "Hash_Set(pHashTable, sKey, sValue)",
							"Describe": "设置哈希表中某个键的值。",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "pHashTable",
									"DataType": "Ptr",
									"Describe": "哈希表指针（使用 Hash_New 创建）",
									"Optional": false
								},
								{
									"Caption": "sKey",
									"DataType": "String",
									"Describe": "键",
									"Optional": false
								},
								{
									"Caption": "sValue",
									"DataType": "String",
									"Describe": "值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Hash_Get",
						"Remark": "获取键值",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Hash_Get(pHashTable, \"Key\")",
						"Templet": "command",
						"Help": {
							"Caption": "Hash_Get",
							"Define": "sRet = Hash_Get(pHashTable, sKey)",
							"Describe": "获取哈希表中某个键的值。",
							"RetType": "String",
							"Return": "返回对应键的值",
							"Param": [
								{
									"Caption": "pHashTable",
									"DataType": "Ptr",
									"Describe": "哈希表指针（使用 Hash_New 创建）",
									"Optional": false
								},
								{
									"Caption": "sKey",
									"DataType": "String",
									"Describe": "键",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Hash_GetPtr",
						"Remark": "获取键值指针",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Hash_GetPtr(pHashTable, \"Key\")",
						"Templet": "command",
						"Help": {
							"Caption": "Hash_GetPtr",
							"Define": "pRet = Hash_GetPtr(pHashTable, sKey)",
							"Describe": "获取哈希表中某个值的数据指针，这个命令主要用于通过内存访问检查数据的正确性，平时不常用到。",
							"RetType": "Ptr",
							"Return": "返回对应值的数据指针",
							"Param": [
								{
									"Caption": "pHashTable",
									"DataType": "Ptr",
									"Describe": "哈希表指针（使用 Hash_New 创建）",
									"Optional": false
								},
								{
									"Caption": "sKey",
									"DataType": "String",
									"Describe": "键",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Hash_Exists",
						"Remark": "键是否存在",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Hash_Exists(pHashTable, \"Key\")",
						"Templet": "command",
						"Help": {
							"Caption": "Hash_Exists",
							"Define": "bRet = Hash_Exists(pHashTable, sKey)",
							"Describe": "判断哈希表中的某个键是否存在。",
							"RetType": "Boolean",
							"Return": "存在返回 true，否则返回 false",
							"Param": [
								{
									"Caption": "pHashTable",
									"DataType": "Ptr",
									"Describe": "哈希表指针（使用 Hash_New 创建）",
									"Optional": false
								},
								{
									"Caption": "sKey",
									"DataType": "String",
									"Describe": "键",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Hash_Del",
						"Remark": "删除键值",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Hash_Del(pHashTable, \"Key\")",
						"Templet": "command",
						"Help": {
							"Caption": "Hash_Del",
							"Define": "Hash_Del(pHashTable, sKey)",
							"Describe": "删除哈希表中的某个键值。",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "pHashTable",
									"DataType": "Ptr",
									"Describe": "哈希表指针（使用 Hash_New 创建）",
									"Optional": false
								},
								{
									"Caption": "sKey",
									"DataType": "String",
									"Describe": "键",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Hash_Count",
						"Remark": "键值数量",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Hash_Count(pHashTable)",
						"Templet": "command",
						"Help": {
							"Caption": "Hash_Count",
							"Define": "iRet = Hash_Count(pHashTable)",
							"Describe": "获取哈希表中所有键值对的数量。",
							"RetType": "Integer",
							"Return": "返回哈希表中键值对的数量",
							"Param": [
								{
									"Caption": "pHashTable",
									"DataType": "Ptr",
									"Describe": "哈希表指针（使用 Hash_New 创建）",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Hash_Clear",
						"Remark": "清空表",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Hash_Clear(pHashTable)",
						"Templet": "command",
						"Help": {
							"Caption": "Hash_Clear",
							"Define": "Hash_Clear(pHashTable)",
							"Describe": "清空哈希表中的所有键值对。",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "pHashTable",
									"DataType": "Ptr",
									"Describe": "哈希表指针（使用 Hash_New 创建）",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Hash_Clone",
						"Remark": "复制表",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Hash_Clone(pHashTable)",
						"Templet": "command",
						"Help": {
							"Caption": "Hash_Clone",
							"Define": "pRet = Hash_Clone(pHashTable)",
							"Describe": "克隆指定哈希表中的所有键值对，返回新的哈希表。",
							"RetType": "Ptr",
							"Return": "返回新的哈希表指针",
							"Param": [
								{
									"Caption": "pHashTable",
									"DataType": "Ptr",
									"Describe": "哈希表指针（使用 Hash_New 创建）",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Hash_GetKeys",
						"Remark": "获取键列表",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Hash_GetKeys(pHashTable, \"\\r\\n\")",
						"Templet": "command",
						"Help": {
							"Caption": "Hash_GetKeys",
							"Define": "bRet = Hash_GetKeys(pHashTable, sSep)",
							"Describe": "获取一个哈希表中存储的所有键列表。",
							"RetType": "String",
							"Return": "返回键列表",
							"Param": [
								{
									"Caption": "pHashTable",
									"DataType": "Ptr",
									"Describe": "哈希表指针（使用 Hash_New 创建）",
									"Optional": false
								},
								{
									"Caption": "sSep",
									"DataType": "String",
									"Describe": "键列表使用的分隔符",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Hash_Validate",
						"Remark": "是否为哈希表",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Hash_Validate(pHashTable)",
						"Templet": "command",
						"Help": {
							"Caption": "Hash_Validate",
							"Define": "bRet = Hash_Validate(pHashTable)",
							"Describe": "判断一个指针是否为哈希表。",
							"RetType": "Boolean",
							"Return": "是哈希表对象返回 true，否则返回 false",
							"Param": [
								{
									"Caption": "pHashTable",
									"DataType": "Ptr",
									"Describe": "哈希表指针（使用 Hash_New 创建）",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Hash_CapGet",
						"Remark": "获取预申请键值数量",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Hash_CapGet(pHashTable)",
						"Templet": "command",
						"Help": {
							"Caption": "Hash_CapGet",
							"Define": "iRet = Hash_CapGet(pHashTable)",
							"Describe": "获取一个哈希表中，预申请的键值对数量（预申请的数量不等于已有的键值对数量）。",
							"RetType": "Integer",
							"Return": "返回已申请的哈希表键值对数量",
							"Param": [
								{
									"Caption": "pHashTable",
									"DataType": "Ptr",
									"Describe": "哈希表指针（使用 Hash_New 创建）",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Hash_CapSet",
						"Remark": "设置预申请键值数量",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Hash_CapSet(pHashTable, 200)",
						"Templet": "command",
						"Help": {
							"Caption": "Hash_CapSet",
							"Define": "iRet = Hash_CapSet(pHashTable, iNewCapacity)",
							"Describe": "设置一个哈希表的预申请键值对数量。",
							"RetType": "Integer",
							"Return": "返回之前哈希表预申请的键值对数量",
							"Param": [
								{
									"Caption": "pHashTable",
									"DataType": "Ptr",
									"Describe": "哈希表指针（使用 Hash_New 创建）",
									"Optional": false
								},
								{
									"Caption": "iNewCapacity",
									"DataType": "Integer",
									"Describe": "预申请的键值对数量",
									"Optional": false
								}
							]
						}
					}
				]
			},
			{
				"Caption": "Linked List",
				"Icon": "文件夹",
				"Visible": true,
				"Templet": "index",
				"Help": {
					"Caption": ""
				},
				"Child": [
					{
						"Caption": "LList_New",
						"Remark": "创建链表",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LList_New()",
						"Templet": "command",
						"Help": {
							"Caption": "LList_New",
							"Define": "pRet = LList_New()",
							"Describe": "创建一个新的链表；使用这条命令创建的链表，不再使用后必须使用 LList_Free 命令释放，否则会出现内存泄漏 。",
							"RetType": "Ptr",
							"Return": "返回链表指针",
							"Param": [
							]
						}
					},
					{
						"Caption": "LList_Free",
						"Remark": "释放链表",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LList_Free(pListTable)",
						"Templet": "command",
						"Help": {
							"Caption": "LList_Free",
							"Define": "LList_Free(pListTable)",
							"Describe": "释放之前创建的链表，并回收链表使用的内存。",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "pListTable",
									"DataType": "Ptr",
									"Describe": "链表指针（使用 LList_New 创建）",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "LList_First",
						"Remark": "选中第一个值",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LList_First(pListTable)",
						"Templet": "command",
						"Help": {
							"Caption": "LList_First",
							"Define": "pElement = LList_First(pListTable)",
							"Describe": "将链表游标放置到第一个元素上。",
							"RetType": "Ptr",
							"Return": "指向链表游标所在元素的指针（也就是第一个元素的指针）",
							"Param": [
								{
									"Caption": "pListTable",
									"DataType": "Ptr",
									"Describe": "链表指针（使用 LList_New 创建）",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "LList_Last",
						"Remark": "选中最后一个值",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LList_Last(pListTable)",
						"Templet": "command",
						"Help": {
							"Caption": "LList_Last",
							"Define": "pElement = LList_Last(pListTable)",
							"Describe": "将链表游标放置到最后一个元素上",
							"RetType": "Ptr",
							"Return": "指向链表游标所在元素的指针（也就是最后一个元素的指针）",
							"Param": [
								{
									"Caption": "pListTable",
									"DataType": "Ptr",
									"Describe": "链表指针（使用 LList_New 创建）",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "LList_Prev",
						"Remark": "选中上一个值",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LList_Prev(pListTable)",
						"Templet": "command",
						"Help": {
							"Caption": "LList_Prev",
							"Define": "pElement = LList_Prev(pListTable)",
							"Describe": "将链表游标放置到上一个元素上",
							"RetType": "Ptr",
							"Return": "指向链表游标所在元素的指针（也就是挡圈选中元素的上一个元素的指针）",
							"Param": [
								{
									"Caption": "pListTable",
									"DataType": "Ptr",
									"Describe": "链表指针（使用 LList_New 创建）",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "LList_Next",
						"Remark": "选中下一个值",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LList_Next(pListTable)",
						"Templet": "command",
						"Help": {
							"Caption": "LList_Next",
							"Define": "pElement = LList_Next(pListTable)",
							"Describe": "将链表游标放置到下一个元素上",
							"RetType": "Ptr",
							"Return": "指向链表游标所在元素的指针（也就是挡圈选中元素的下一个元素的指针）",
							"Param": [
								{
									"Caption": "pListTable",
									"DataType": "Ptr",
									"Describe": "链表指针（使用 LList_New 创建）",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "LList_Add",
						"Remark": "添加值到末尾",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LList_Add(pListTable, \"Value\")",
						"Templet": "command",
						"Help": {
							"Caption": "LList_Add",
							"Define": "LList_Add(pListTable, sData)",
							"Describe": "向链表末尾添加一个新的值。",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "pListTable",
									"DataType": "Ptr",
									"Describe": "链表指针（使用 LList_New 创建）",
									"Optional": false
								},
								{
									"Caption": "sData",
									"DataType": "String",
									"Describe": "新的值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "LList_Ins",
						"Remark": "添加值到开头",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LList_Ins(pListTable, \"Value\")",
						"Templet": "command",
						"Help": {
							"Caption": "LList_Ins",
							"Define": "LList_Ins(pListTable, sData)",
							"Describe": "向链表最开头的位置添加一个新的值。",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "pListTable",
									"DataType": "Ptr",
									"Describe": "链表指针（使用 LList_New 创建）",
									"Optional": false
								},
								{
									"Caption": "sData",
									"DataType": "String",
									"Describe": "新的值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "LList_InsPrev",
						"Remark": "向前插入值",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LList_InsPrev(pListTable, pElement, \"Value\")",
						"Templet": "command",
						"Help": {
							"Caption": "LList_InsPrev",
							"Define": "LList_InsPrev(pListTable, pElement, sData)",
							"Describe": "向链表中某一个元素位置的前面插入一个新的值。",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "pListTable",
									"DataType": "Ptr",
									"Describe": "链表指针（使用 LList_New 创建）",
									"Optional": false
								},
								{
									"Caption": "pElement",
									"DataType": "Ptr",
									"Describe": "链表元素指针，新插入的链表元素会放在这个元素之前",
									"Optional": false
								},
								{
									"Caption": "sData",
									"DataType": "String",
									"Describe": "新的值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "LList_InsNext",
						"Remark": "向后插入值",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LList_InsNext(pListTable, pElement, \"Value\")",
						"Templet": "command",
						"Help": {
							"Caption": "LList_InsNext",
							"Define": "LList_InsNext(pListTable, pElement, sData)",
							"Describe": "向链表中某一个元素位置的后面插入一个新的值。",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "pListTable",
									"DataType": "Ptr",
									"Describe": "链表指针（使用 LList_New 创建）",
									"Optional": false
								},
								{
									"Caption": "pElement",
									"DataType": "Ptr",
									"Describe": "链表元素指针，新插入的链表元素会放在这个元素之后",
									"Optional": false
								},
								{
									"Caption": "sData",
									"DataType": "String",
									"Describe": "新的值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "LList_Del",
						"Remark": "删除值",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LList_Del(pListTable, pElement)",
						"Templet": "command",
						"Help": {
							"Caption": "LList_Del",
							"Define": "LList_Del(pListTable, pElement)",
							"Describe": "删除链表中指定的元素。",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "pListTable",
									"DataType": "Ptr",
									"Describe": "链表指针（使用 LList_New 创建）",
									"Optional": false
								},
								{
									"Caption": "pElement",
									"DataType": "Ptr",
									"Describe": "链表元素指针",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "LList_DelPrev",
						"Remark": "删除前一个值",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LList_DelPrev(pListTable, pElement)",
						"Templet": "command",
						"Help": {
							"Caption": "LList_DelPrev",
							"Define": "LList_DelPrev(pListTable, pElement)",
							"Describe": "删除链表中指定的元素前一个的值。",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "pListTable",
									"DataType": "Ptr",
									"Describe": "链表指针（使用 LList_New 创建）",
									"Optional": false
								},
								{
									"Caption": "pElement",
									"DataType": "Ptr",
									"Describe": "链表元素指针",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "LList_DelNext",
						"Remark": "删除后一个值",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LList_DelNext(pListTable, pElement)",
						"Templet": "command",
						"Help": {
							"Caption": "LList_DelNext",
							"Define": "LList_DelNext(pListTable, pElement)",
							"Describe": "删除链表中指定的元素后一个的值。",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "pListTable",
									"DataType": "Ptr",
									"Describe": "链表指针（使用 LList_New 创建）",
									"Optional": false
								},
								{
									"Caption": "pElement",
									"DataType": "Ptr",
									"Describe": "链表元素指针",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "LList_Set",
						"Remark": "设置值",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LList_Set(pListTable, \"Value\")",
						"Templet": "command",
						"Help": {
							"Caption": "LList_Set",
							"Define": "LList_Set(pListTable, sData)",
							"Describe": "设置链表中当前游标所在位置的值。",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "pListTable",
									"DataType": "Ptr",
									"Describe": "链表指针（使用 LList_New 创建）",
									"Optional": false
								},
								{
									"Caption": "sData",
									"DataType": "String",
									"Describe": "新的值",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "LList_Get",
						"Remark": "获取值",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LList_Get(pListTable)",
						"Templet": "command",
						"Help": {
							"Caption": "LList_Get",
							"Define": "sRet = LList_Get(pListTable)",
							"Describe": "获取链表中当前游标所在位置的值。",
							"RetType": "String",
							"Return": "返回对应的值",
							"Param": [
								{
									"Caption": "pListTable",
									"DataType": "Ptr",
									"Describe": "链表指针（使用 LList_New 创建）",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "LList_Count",
						"Remark": "元素数量",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LList_Count(pListTable)",
						"Templet": "command",
						"Help": {
							"Caption": "LList_Count",
							"Define": "iRet = LList_Count(pListTable)",
							"Describe": "获取链表中元素的数量。",
							"RetType": "Integer",
							"Return": "返回链表中元素的数量",
							"Param": [
								{
									"Caption": "pListTable",
									"DataType": "Ptr",
									"Describe": "链表指针（使用 LList_New 创建）",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "LList_Clear",
						"Remark": "清空链表",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LList_Clear(pListTable)",
						"Templet": "command",
						"Help": {
							"Caption": "LList_Clear",
							"Define": "LList_Clear(pListTable)",
							"Describe": "清空链表中的所有元素。",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "pListTable",
									"DataType": "Ptr",
									"Describe": "链表指针（使用 LList_New 创建）",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "LList_Validate",
						"Remark": "是否为链表",
						"Visible": true,
						"Keyword": true,
						"InsCode": "LList_Validate(pListTable)",
						"Templet": "command",
						"Help": {
							"Caption": "LList_Validate",
							"Define": "bRet = LList_Validate(pListTable)",
							"Describe": "判断一个指针是否为链表。",
							"RetType": "Boolean",
							"Return": "是链表对象返回 true，否则返回 false",
							"Param": [
								{
									"Caption": "pListTable",
									"DataType": "Ptr",
									"Describe": "链表指针（使用 LList_New 创建）",
									"Optional": false
								}
							]
						}
					}
				]
			},
			{
				"Caption": "AVL Tree",
				"Icon": "文件夹",
				"Visible": false,
				"Templet": "index",
				"Help": {
					"Caption": ""
				},
				"Child": [
				]
			},
			{
				"Caption": "User Data Type",
				"Icon": "文件夹",
				"Visible": true,
				"Templet": "index",
				"Help": {
					"Caption": ""
				},
				"Child": [
					{
						"Caption": "UDT_ElementByte",
						"Remark": "获取成员位置",
						"Visible": true,
						"Keyword": true,
						"InsCode": "UDT_ElementByte(v.ele)",
						"Templet": "command",
						"Help": {
							"Caption": "UDT_ElementByte",
							"Define": "UDT_ElementByte(Element)",
							"Describe": "获取结构体中某个成员变量相对于结构体的内存位置。",
							"RetType": "Integer",
							"Return": "返回结构体成员变量相对于结构体的内存位置",
							"Param": [
								{
									"Caption": "Element",
									"DataType": "Var",
									"Describe": "结构体实例的成员",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "UDT_ElementExists",
						"Remark": "成员是否存在",
						"Visible": true,
						"Keyword": true,
						"InsCode": "UDT_ElementExists(v.ele)",
						"Templet": "command",
						"Help": {
							"Caption": "UDT_ElementExists",
							"Define": "UDT_ElementExists(Element)",
							"Describe": "判断结构体的某个成员变量是否存在。",
							"RetType": "Boolean",
							"Return": "结构体成员存在返回 true，否则返回 false",
							"Param": [
								{
									"Caption": "Element",
									"DataType": "Var",
									"Describe": "结构体实例的成员",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "UDT_ElementOffset",
						"Remark": "获取成员偏移",
						"Visible": true,
						"Keyword": true,
						"InsCode": "UDT_ElementOffset(v.ele)",
						"Templet": "command",
						"Help": {
							"Caption": "UDT_ElementOffset",
							"Define": "UDT_ElementOffset(Element)",
							"Describe": "获取结构体中某个成员变量相对于结构体的内存偏移。",
							"RetType": "Integer",
							"Return": "返回结构体成员变量相对于结构体的内存偏移",
							"Param": [
								{
									"Caption": "Element",
									"DataType": "Var",
									"Describe": "结构体实例的成员",
									"Optional": false
								}
							]
						}
					}
				]
			},
			{
				"Caption": "Application",
				"Icon": "文件夹",
				"Visible": true,
				"Templet": "index",
				"Help": {
					"Caption": ""
				},
				"Child": [
					{
						"Caption": "APP_ScriptName",
						"Remark": "文件名",
						"Visible": true,
						"Keyword": true,
						"InsCode": "APP_ScriptName",
						"Templet": "command",
						"Help": {
							"Caption": "APP_ScriptName",
							"Define": "APP_ScriptName",
							"Describe": "编译后会得到应用程序的文件名，未编译的脚本则会获得脚本文件名。",
							"RetType": "String",
							"Return": "返回文件名",
							"Param": [
							]
						}
					},
					{
						"Caption": "APP_ScriptPath",
						"Remark": "文件所在目录",
						"Visible": true,
						"Keyword": true,
						"InsCode": "APP_ScriptPath",
						"Templet": "command",
						"Help": {
							"Caption": "APP_ScriptPath",
							"Define": "APP_ScriptPath",
							"Describe": "编译后会得到应用程序所在的目录，未编译的脚本则会获得脚本所在的目录。",
							"RetType": "String",
							"Return": "返回文件所在目录",
							"Param": [
							]
						}
					},
					{
						"Caption": "APP_ScriptFile",
						"Remark": "完整文件路径",
						"Visible": true,
						"Keyword": true,
						"InsCode": "APP_ScriptFile",
						"Templet": "command",
						"Help": {
							"Caption": "APP_ScriptFile",
							"Define": "APP_ScriptFile",
							"Describe": "编译后会得到应用程序的完整路径，未编译的脚本则会获得脚本的完整路径。",
							"RetType": "String",
							"Return": "返回完整文件路径",
							"Param": [
							]
						}
					},
					{
						"Caption": "APP_Name",
						"Remark": "执行程序文件名",
						"Visible": true,
						"Keyword": true,
						"InsCode": "APP_Name",
						"Templet": "command",
						"Help": {
							"Caption": "APP_Name",
							"Define": "APP_Name",
							"Describe": "得到当前脚本运行的可执行文件名。",
							"RetType": "String",
							"Return": "返回文件名",
							"Param": [
							]
						}
					},
					{
						"Caption": "APP_Path",
						"Remark": "执行程序文件路径",
						"Visible": true,
						"Keyword": true,
						"InsCode": "APP_Path",
						"Templet": "command",
						"Help": {
							"Caption": "APP_Path",
							"Define": "APP_Path",
							"Describe": "得到当前脚本运行的可执行文件所在目录。",
							"RetType": "String",
							"Return": "返回文件所在目录",
							"Param": [
							]
						}
					},
					{
						"Caption": "APP_IsBundled",
						"Remark": "是否已编译",
						"Visible": true,
						"Keyword": true,
						"InsCode": "APP_IsBundled",
						"Templet": "command",
						"Help": {
							"Caption": "APP_IsBundled",
							"Define": "APP_IsBundled",
							"Describe": "脚本是否运行在已编译的环境下，已经编译返回 true，否则返回 false。",
							"RetType": "Boolean",
							"Return": "返回是否运行在编译环境下",
							"Param": [
							]
						}
					}
				]
			},
			{
				"Caption": "Memory and pointers",
				"Icon": "文件夹",
				"Visible": true,
				"Templet": "index",
				"Help": {
					"Caption": ""
				},
				"Child": [
					{
						"Caption": "VarPtr",
						"Remark": "获取变量指针",
						"Visible": true,
						"Keyword": true,
						"InsCode": "VarPtr(var)",
						"Templet": "command",
						"Help": {
							"Caption": "VarPtr",
							"Define": "VarPtr(Variant)",
							"Describe": "获取变量指针，这个命令无法获取字符串的数据指针，可使用 StrPtr 获取。",
							"RetType": "Ptr",
							"Return": "返回变量指针",
							"Param": [
								{
									"Caption": "Variant",
									"DataType": "Var",
									"Describe": "变量名",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "StrPtr",
						"Remark": "获取字符串指针",
						"Visible": true,
						"Keyword": true,
						"InsCode": "StrPtr(var)",
						"Templet": "command",
						"Help": {
							"Caption": "StrPtr",
							"Define": "StrPtr(Variant)",
							"Describe": "获取字符串数据指针。",
							"RetType": "Ptr",
							"Return": "返回变量指针",
							"Param": [
								{
									"Caption": "Variant",
									"DataType": "Var",
									"Describe": "变量名",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Peek",
						"Remark": "读取内存",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Peek(Long, Address)",
						"Templet": "command",
						"Help": {
							"Caption": "Peek",
							"Define": "Peek([DataType, ]Address)",
							"Describe": "读取内存中的数据，支持以下类型：Byte、Word、DWord、Integer、Long、Quad（64位整数）、Single、Ddouble、Ext（80位扩展浮点数）、Cur（货币类型）。",
							"RetType": "Any",
							"Return": "返回读取到的内存数据",
							"Param": [
								{
									"Caption": "DataType",
									"DataType": "Any",
									"Describe": "数据类型",
									"Optional": true
								},
								{
									"Caption": "Address",
									"DataType": "Long",
									"Describe": "数据在内存中的位置",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Peek$",
						"Remark": "读取内存字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Peek$(AsciiZ, Address)",
						"Templet": "command",
						"Help": {
							"Caption": "Peek$",
							"Define": "Peek$([DataType, ]Address[, iCount])",
							"Describe": "读取内存中的字符串。",
							"RetType": "String",
							"Return": "返回读取到的内存数据",
							"Param": [
								{
									"Caption": "DataType",
									"DataType": "Any",
									"Describe": "数据类型，支持 AsciiZ 和 String，AsciiZ 使用 \\0 作为字符串截断符号。",
									"Optional": true
								},
								{
									"Caption": "Address",
									"DataType": "Long",
									"Describe": "数据在内存中的位置",
									"Optional": false
								},
								{
									"Caption": "iCount",
									"DataType": "Long",
									"Describe": "要读取的字节数量",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "PeekZ",
						"Remark": "读取\\0结尾字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "PeekZ(Address)",
						"Templet": "command",
						"Help": {
							"Caption": "PeekZ",
							"Define": "PeekZ(Address[, iCount])",
							"Describe": "读取内存中的字符串，字符串应使用 \\0 作为结尾截断符号。",
							"RetType": "String",
							"Return": "返回读取到的内存数据",
							"Param": [
								{
									"Caption": "Address",
									"DataType": "Long",
									"Describe": "数据在内存中的位置",
									"Optional": false
								},
								{
									"Caption": "iCount",
									"DataType": "Long",
									"Describe": "要读取的字节数量",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "PeekHex",
						"Remark": "读取内存[十六进制]",
						"Visible": true,
						"Keyword": true,
						"InsCode": "PeekHex(Address, 8)",
						"Templet": "command",
						"Help": {
							"Caption": "PeekHex",
							"Define": "PeekHex(Address, iCount)",
							"Describe": "读取内存中的数据，返回十六进制编码格式。",
							"RetType": "String",
							"Return": "返回读取到的内存数据",
							"Param": [
								{
									"Caption": "Address",
									"DataType": "Long",
									"Describe": "数据在内存中的位置",
									"Optional": false
								},
								{
									"Caption": "iCount",
									"DataType": "Long",
									"Describe": "要读取的字节数量",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Poke",
						"Remark": "写入内存",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Poke(Long, Address, value)",
						"Templet": "command",
						"Help": {
							"Caption": "Poke",
							"Define": "varRet = Poke([DataType, ]Address, DataValue)",
							"Describe": "在内存中写入数据，支持以下类型：Byte、Word、DWord、Integer、Long、Quad（64位整数）、Single、Ddouble、Ext（80位扩展浮点数）、Cur（货币类型）。",
							"RetType": "Any",
							"Return": "DataValue 参数的值",
							"Param": [
								{
									"Caption": "DataType",
									"DataType": "Any",
									"Describe": "数据类型",
									"Optional": true
								},
								{
									"Caption": "Address",
									"DataType": "Long",
									"Describe": "数据在内存中的位置",
									"Optional": false
								},
								{
									"Caption": "DataValue",
									"DataType": "Any",
									"Describe": "要写入的数据",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Poke$",
						"Remark": "写入内存字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Poke$(AsciiZ, Address, \"写入内容\")",
						"Templet": "command",
						"Help": {
							"Caption": "Poke$",
							"Define": "sRet = Poke$([DataType, ]Address[, sValue])",
							"Describe": "在内存中写入字符串。",
							"RetType": "String",
							"Return": "sValue 参数的值",
							"Param": [
								{
									"Caption": "DataType",
									"DataType": "Any",
									"Describe": "数据类型，支持 AsciiZ 和 String，AsciiZ 使用 \\0 作为字符串截断符号。",
									"Optional": true
								},
								{
									"Caption": "Address",
									"DataType": "Long",
									"Describe": "数据在内存中的位置",
									"Optional": false
								},
								{
									"Caption": "sValue",
									"DataType": "String",
									"Describe": "要写入的数据",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "Memory_Compare",
						"Remark": "内存比较",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Memory_Compare(pMem1, pMem2, 12)",
						"Templet": "command",
						"Help": {
							"Caption": "Memory_Compare",
							"Define": "iRet = Memory_Compare(pMem1, pMem2, iSize)\\nbRet = Memory_Differs(pMem1, pMem2, iSize)\\nbRet = Memory_Compare(pMem1, pMem2, iSize)",
							"Describe": "比较两个内存，在一定长度内是否完全一致。",
							"RetType": "Integer",
							"Return": "第一种写法 0 表示完全相同，否则返回内存不同位置的第一个字节\\n第二种写法完全相同返回 true，否则返回 false\\n第三种写法完全相同返回 false，否则返回 true",
							"Param": [
								{
									"Caption": "pMem1",
									"DataType": "Ptr",
									"Describe": "第一块内存的地址",
									"Optional": false
								},
								{
									"Caption": "pMem2",
									"DataType": "Ptr",
									"Describe": "第二块内存的地址",
									"Optional": false
								},
								{
									"Caption": "iSize",
									"DataType": "Integer",
									"Describe": "要比较的数据长度",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Memory_Copy",
						"Remark": "内存复制",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Memory_Copy(pSource, pDest, 12)",
						"Templet": "command",
						"Help": {
							"Caption": "Memory_Copy",
							"Define": "sRet = Memory_Copy(pSource, pDest, iSize)",
							"Describe": "将一块内存复制到另一个地方。",
							"RetType": "String",
							"Return": "返回复制操作的内存副本",
							"Param": [
								{
									"Caption": "pSource",
									"DataType": "Ptr",
									"Describe": "源内存地址",
									"Optional": false
								},
								{
									"Caption": "pDest",
									"DataType": "Ptr",
									"Describe": "目标内存地址",
									"Optional": false
								},
								{
									"Caption": "iSize",
									"DataType": "Integer",
									"Describe": "要复制的数据长度",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Memory_Get",
						"Remark": "内存获取",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Memory_Get(pMem, 12)",
						"Templet": "command",
						"Help": {
							"Caption": "Memory_Get",
							"Define": "sRet = Memory_Get(pMem, iSize)",
							"Describe": "读取指定位置的内存序列。",
							"RetType": "String",
							"Return": "返回读取到的内存数据",
							"Param": [
								{
									"Caption": "pMem",
									"DataType": "Ptr",
									"Describe": "内存地址",
									"Optional": false
								},
								{
									"Caption": "iSize",
									"DataType": "Integer",
									"Describe": "要读取的数据长度",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Memory_Set",
						"Remark": "内存写入",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Memory_Set(pMem, \"要写入的内容\", 12)",
						"Templet": "command",
						"Help": {
							"Caption": "Memory_Set",
							"Define": "sRet = Memory_Set(pMem, sBuffer[, iSize])",
							"Describe": "在指定位置的内存中写入数据。",
							"RetType": "String",
							"Return": "返回写入的内容副本",
							"Param": [
								{
									"Caption": "pMem",
									"DataType": "Ptr",
									"Describe": "内存地址",
									"Optional": false
								},
								{
									"Caption": "sBuffer",
									"DataType": "String",
									"Describe": "要写入的内容",
									"Optional": false
								},
								{
									"Caption": "iSize",
									"DataType": "Integer",
									"Describe": "要写入的数据长度",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "Memory_Swap",
						"Remark": "内存交换数据",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Memory_Swap(pMem1, pMem2, 12)",
						"Templet": "command",
						"Help": {
							"Caption": "Memory_Swap",
							"Define": "iRet = Memory_Swap(pMem1, pMem2, iSize)",
							"Describe": "交换两个内存的数据。",
							"RetType": "Integer",
							"Return": "交换的内存数据长度",
							"Param": [
								{
									"Caption": "pMem1",
									"DataType": "Ptr",
									"Describe": "第一个内存地址",
									"Optional": false
								},
								{
									"Caption": "pMem2",
									"DataType": "Ptr",
									"Describe": "第二个内存地址",
									"Optional": false
								},
								{
									"Caption": "iSize",
									"DataType": "Integer",
									"Describe": "要交换的数据长度",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Heap_Alloc",
						"Remark": "申请内存",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Heap_Alloc(12)",
						"Templet": "command",
						"Help": {
							"Caption": "Heap_Alloc",
							"Define": "pRet = Heap_Alloc(iSize)",
							"Describe": "申请指定长度的堆内存；用这个函数申请的内存必须使用 Heap_Free 释放，否则会内存泄漏。",
							"RetType": "Ptr",
							"Return": "返回内存指针，返回 0 表示内存分配失败",
							"Param": [
								{
									"Caption": "iSize",
									"DataType": "Integer",
									"Describe": "要申请的内存长度",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Heap_AllocByStr",
						"Remark": "申请字符串内存",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Heap_AllocByStr(\"申请内存\")",
						"Templet": "command",
						"Help": {
							"Caption": "Heap_AllocByStr",
							"Define": "pRet = Heap_AllocByStr(sText[, AllowEmptyStringAllocation])",
							"Describe": "根据字符串的长度申请堆内存，申请成功后，字符串会被复制到内存中；用这个函数申请的内存必须使用 Heap_Free 释放，否则会内存泄漏。",
							"RetType": "Ptr",
							"Return": "返回内存指针，返回 0 表示内存分配失败",
							"Param": [
								{
									"Caption": "sText",
									"DataType": "Integer",
									"Describe": "放入内存中的字符串，申请内存的尺寸也会根据这个字符串限定",
									"Optional": false
								},
								{
									"Caption": "AllowEmptyStringAllocation",
									"DataType": "Boolean",
									"Describe": "如果申请的字符串传递为空字符串，是否继续申请内存，这个参数传递为 true 时，仍会分配内存",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "Heap_Copy",
						"Remark": "申请内存副本",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Heap_Copy(pMem)",
						"Templet": "command",
						"Help": {
							"Caption": "Heap_Copy",
							"Define": "pRet = Heap_Copy(pMem)",
							"Describe": "申请一块字符串内存的副本，字符串内容会被复制到新申请的内存中，pMem 参数必须是使用 Heap_* 函数申请的内存；用这个函数申请的内存必须使用 Heap_Free 释放，否则会内存泄漏。",
							"RetType": "Ptr",
							"Return": "返回内存指针，返回 0 表示内存分配失败",
							"Param": [
								{
									"Caption": "pMem",
									"DataType": "Ptr",
									"Describe": "内存地址，必须使用 Heap_* 函数申请的内存",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Heap_ReAlloc",
						"Remark": "重新申请内存",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Heap_ReAlloc(pOldMem, 12)",
						"Templet": "command",
						"Help": {
							"Caption": "Heap_ReAlloc",
							"Define": "pRet = Heap_ReAlloc(pOldMem, iSize)",
							"Describe": "重新申请指定长度的堆内存；用这个函数申请的内存必须使用 Heap_Free 释放，否则会内存泄漏。",
							"RetType": "Ptr",
							"Return": "返回新申请的内存指针，返回 0 表示内存分配失败",
							"Param": [
								{
									"Caption": "pOldMem",
									"DataType": "Ptr",
									"Describe": "旧的内存指针，必须使用 Heap_* 函数申请的内存",
									"Optional": false
								},
								{
									"Caption": "iSize",
									"DataType": "Integer",
									"Describe": "要申请的内存长度",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Heap_ReAllocByStr",
						"Remark": "重新申请字符串内存",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Heap_ReAllocByStr(pOldMem, \"申请内存\")",
						"Templet": "command",
						"Help": {
							"Caption": "Heap_ReAllocByStr",
							"Define": "pRet = Heap_ReAllocByStr(pOldMem, sText[, AllowEmptyStringAllocation])",
							"Describe": "根据字符串的长度重新申请堆内存，申请成功后，字符串会被复制到内存中；用这个函数申请的内存必须使用 Heap_Free 释放，否则会内存泄漏。",
							"RetType": "Ptr",
							"Return": "返回新申请的内存指针，返回 0 表示内存分配失败",
							"Param": [
								{
									"Caption": "pOldMem",
									"DataType": "Ptr",
									"Describe": "旧的内存指针，必须使用 Heap_* 函数申请的内存",
									"Optional": false
								},
								{
									"Caption": "sText",
									"DataType": "Integer",
									"Describe": "放入内存中的字符串，申请内存的尺寸也会根据这个字符串限定",
									"Optional": false
								},
								{
									"Caption": "AllowEmptyStringAllocation",
									"DataType": "Boolean",
									"Describe": "如果申请的字符串传递为空字符串，是否继续申请内存，这个参数传递为 true 时，仍会分配内存",
									"Optional": true
								}
							]
						}
					},
					{
						"Caption": "Heap_Free",
						"Remark": "释放内存",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Heap_Free(pMem)",
						"Templet": "command",
						"Help": {
							"Caption": "Heap_Free",
							"Define": "Heap_Free(...)",
							"Describe": "释放内存，使用 Heap_* 函数申请的内存必须使用这个函数释放，否则会出现内存泄漏。",
							"RetType": "Null",
							"Return": "无",
							"Param": [
								{
									"Caption": "...",
									"DataType": "Ptr",
									"Describe": "要释放的内存地址，可以传递多个内存地址一次性释放",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Heap_End",
						"Remark": "内存结束位置",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Heap_End(pMem)",
						"Templet": "command",
						"Help": {
							"Caption": "Heap_End",
							"Define": "pRet = Heap_End(pMem)",
							"Describe": "获取一块使用 Heap_* 函数申请内存的结束位置（最后一个字节的位置）。",
							"RetType": "Ptr",
							"Return": "返回内存结束位置指针",
							"Param": [
								{
									"Caption": "pMem",
									"DataType": "Ptr",
									"Describe": "内存地址，必须使用 Heap_* 函数申请的内存",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Heap_Size",
						"Remark": "获取内存大小",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Heap_Size(pMem)",
						"Templet": "command",
						"Help": {
							"Caption": "Heap_Size",
							"Define": "pRet = Heap_Size(pMem)",
							"Describe": "获取一块使用 Heap_* 函数申请内存的大小。",
							"RetType": "Integer",
							"Return": "返回内存申请的长度",
							"Param": [
								{
									"Caption": "pMem",
									"DataType": "Ptr",
									"Describe": "内存地址，必须使用 Heap_* 函数申请的内存",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Heap_Get",
						"Remark": "读取内存字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Heap_Get(pMem)",
						"Templet": "command",
						"Help": {
							"Caption": "Heap_Get",
							"Define": "sRet = Heap_Get(pMem)",
							"Describe": "读取使用 Heap_* 函数申请内存中存储的字符串。",
							"RetType": "String",
							"Return": "返回读取到的字符串",
							"Param": [
								{
									"Caption": "pMem",
									"DataType": "Ptr",
									"Describe": "要读取的内存地址，必须使用 Heap_* 函数申请的内存",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Heap_Set",
						"Remark": "写入内存字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Heap_Set(pMem)",
						"Templet": "command",
						"Help": {
							"Caption": "Heap_Set",
							"Define": "sRet = Heap_Set(pMem, sText)",
							"Describe": "向使用 Heap_* 函数申请内存中写入字符串。",
							"RetType": "Integer",
							"Return": "返回写入的数据长度",
							"Param": [
								{
									"Caption": "pMem",
									"DataType": "Ptr",
									"Describe": "要写入的内存地址，必须使用 Heap_* 函数申请的内存",
									"Optional": false
								},
								{
									"Caption": "sText",
									"DataType": "String",
									"Describe": "要写入内存的数据内容",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Heap_Mid",
						"Remark": "读取内存中间字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Heap_Mid(pMem, 3, 5)",
						"Templet": "command",
						"Help": {
							"Caption": "Heap_Mid",
							"Define": "sRet = Heap_Mid(pMem, iStartByte, iSize)",
							"Describe": "读取使用 Heap_* 函数申请内存中指定位置存储的指定长度的字符串。",
							"RetType": "String",
							"Return": "返回读取到的字符串",
							"Param": [
								{
									"Caption": "pMem",
									"DataType": "Ptr",
									"Describe": "要读取的内存地址，必须使用 Heap_* 函数申请的内存",
									"Optional": false
								},
								{
									"Caption": "iStartByte",
									"DataType": "Integer",
									"Describe": "要读取内存中的位置偏移",
									"Optional": false
								},
								{
									"Caption": "iSize",
									"DataType": "Integer",
									"Describe": "要读取的数据长度",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Heap_Left",
						"Remark": "读取内存左侧字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Heap_Left(pMem, 5)",
						"Templet": "command",
						"Help": {
							"Caption": "Heap_Left",
							"Define": "sRet = Heap_Left(pMem, iSize)",
							"Describe": "读取使用 Heap_* 函数申请内存中左侧存储的指定长度的字符串。",
							"RetType": "String",
							"Return": "返回读取到的字符串",
							"Param": [
								{
									"Caption": "pMem",
									"DataType": "Ptr",
									"Describe": "要读取的内存地址，必须使用 Heap_* 函数申请的内存",
									"Optional": false
								},
								{
									"Caption": "iSize",
									"DataType": "Integer",
									"Describe": "要读取的数据长度",
									"Optional": false
								}
							]
						}
					},
					{
						"Caption": "Heap_Right",
						"Remark": "读取内存右侧字符串",
						"Visible": true,
						"Keyword": true,
						"InsCode": "Heap_Right(pMem, 5)",
						"Templet": "command",
						"Help": {
							"Caption": "Heap_Right",
							"Define": "sRet = Heap_Right(pMem, iSize)",
							"Describe": "读取使用 Heap_* 函数申请内存中右侧存储的指定长度的字符串。",
							"RetType": "String",
							"Return": "返回读取到的字符串",
							"Param": [
								{
									"Caption": "pMem",
									"DataType": "Ptr",
									"Describe": "要读取的内存地址，必须使用 Heap_* 函数申请的内存",
									"Optional": false
								},
								{
									"Caption": "iSize",
									"DataType": "Integer",
									"Describe": "要读取的数据长度",
									"Optional": false
								}
							]
						}
					},
				]
			}
		]
	},
	{
		"Caption": "Mouse",
		"Icon": "文件夹",
		"Visible": true,
		"Templet": "index",
		"Help": {
			"Caption": ""
		},
		"Child": [
			{
				"Caption": "MouseMove",
				"Remark": "模拟移动鼠标",
				"Visible": true,
				"Keyword": true,
				"InsCode": "MouseMove(0, 0)",
				"Templet": "command",
				"Help": {
					"Caption": "MouseMove",
					"Define": "MouseMove(x, y[, hWnd])",
					"Describe": "模拟移动鼠标指针到指定位置",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "x",
							"DataType": "Integer",
							"Describe": "移动到横坐标",
							"Optional": false
						},
						{
							"Caption": "y",
							"DataType": "Integer",
							"Describe": "移动到纵坐标",
							"Optional": false
						},
						{
							"Caption": "hWnd",
							"DataType": "Integer",
							"Describe": "窗口句柄，默认为前台模拟按键，传递这个参数可以指定窗口模拟按键",
							"Optional": true
						}
					]
				}
			},
			{
				"Caption": "MouseClick",
				"Remark": "模拟点击鼠标按键",
				"Visible": true,
				"Keyword": true,
				"InsCode": "MouseClick(0, 0, %Mouse_Right)",
				"Templet": "command",
				"Help": {
					"Caption": "MouseClick",
					"Define": "MouseClick(x, y[, iBtn[, hWnd]])",
					"Describe": "模拟移动鼠标指针到指定位置，并点击鼠标按键",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "x",
							"DataType": "Integer",
							"Describe": "移动到横坐标",
							"Optional": false
						},
						{
							"Caption": "y",
							"DataType": "Integer",
							"Describe": "移动到纵坐标",
							"Optional": false
						},
						{
							"Caption": "iBtn",
							"DataType": "Integer",
							"Describe": "模拟点击的鼠标按键，可以为下列值<br>%Mouse_Left (左键)<br>%Mouse_Right (右键)<br>%Mouse_Middle (中键)",
							"Optional": false
						},
						{
							"Caption": "hWnd",
							"DataType": "Integer",
							"Describe": "窗口句柄，默认为前台模拟按键，传递这个参数可以指定窗口模拟按键",
							"Optional": true
						}
					]
				}
			},
			{
				"Caption": "MouseDClick",
				"Remark": "模拟双击鼠标按键",
				"Visible": true,
				"Keyword": true,
				"InsCode": "MouseDClick(0, 0, %Mouse_Right)",
				"Templet": "command",
				"Help": {
					"Caption": "MouseDClick",
					"Define": "MouseDClick(x, y[, iBtn[, hWnd]])",
					"Describe": "模拟移动鼠标指针到指定位置，并双击鼠标按键",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "x",
							"DataType": "Integer",
							"Describe": "移动到横坐标",
							"Optional": false
						},
						{
							"Caption": "y",
							"DataType": "Integer",
							"Describe": "移动到纵坐标",
							"Optional": false
						},
						{
							"Caption": "iBtn",
							"DataType": "Integer",
							"Describe": "模拟双击的鼠标按键，可以为下列值<br>%Mouse_Left (左键)<br>%Mouse_Right (右键)<br>%Mouse_Middle (中键)",
							"Optional": false
						},
						{
							"Caption": "hWnd",
							"DataType": "Integer",
							"Describe": "窗口句柄，默认为前台模拟按键，传递这个参数可以指定窗口模拟按键",
							"Optional": true
						}
					]
				}
			},
			{
				"Caption": "MouseDown",
				"Remark": "模拟按下鼠标按键",
				"Visible": true,
				"Keyword": true,
				"InsCode": "MouseDown(0, 0, %Mouse_Right)",
				"Templet": "command",
				"Help": {
					"Caption": "MouseDown",
					"Define": "MouseDown(x, y[, iBtn[, hWnd]])",
					"Describe": "模拟移动鼠标指针到指定位置，并按下鼠标按键",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "x",
							"DataType": "Integer",
							"Describe": "移动到横坐标",
							"Optional": false
						},
						{
							"Caption": "y",
							"DataType": "Integer",
							"Describe": "移动到纵坐标",
							"Optional": false
						},
						{
							"Caption": "iBtn",
							"DataType": "Integer",
							"Describe": "模拟按下的鼠标按键，可以为下列值<br>%Mouse_Left (左键)<br>%Mouse_Right (右键)<br>%Mouse_Middle (中键)",
							"Optional": false
						},
						{
							"Caption": "hWnd",
							"DataType": "Integer",
							"Describe": "窗口句柄，默认为前台模拟按键，传递这个参数可以指定窗口模拟按键",
							"Optional": true
						}
					]
				}
			},
			{
				"Caption": "MouseUp",
				"Remark": "模拟弹起鼠标按键",
				"Visible": true,
				"Keyword": true,
				"InsCode": "MouseUp(0, 0, %Mouse_Right)",
				"Templet": "command",
				"Help": {
					"Caption": "MouseUp",
					"Define": "MouseUp(x, y[, iBtn[, hWnd]])",
					"Describe": "模拟移动鼠标指针到指定位置，并弹起鼠标按键",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "x",
							"DataType": "Integer",
							"Describe": "移动到横坐标",
							"Optional": false
						},
						{
							"Caption": "y",
							"DataType": "Integer",
							"Describe": "移动到纵坐标",
							"Optional": false
						},
						{
							"Caption": "iBtn",
							"DataType": "Integer",
							"Describe": "模拟弹起的鼠标按键，可以为下列值<br>%Mouse_Left (左键)<br>%Mouse_Right (右键)<br>%Mouse_Middle (中键)",
							"Optional": false
						},
						{
							"Caption": "hWnd",
							"DataType": "Integer",
							"Describe": "窗口句柄，默认为前台模拟按键，传递这个参数可以指定窗口模拟按键",
							"Optional": true
						}
					]
				}
			},
			{
				"Caption": "MouseWhell",
				"Remark": "模拟滚动鼠标滚轮",
				"Visible": true,
				"Keyword": true,
				"InsCode": "MouseWhell(1)",
				"Templet": "command",
				"Help": {
					"Caption": "MouseWhell",
					"Define": "MouseWhell(iVal[, hWnd])",
					"Describe": "模拟滚动鼠标滚轮",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "iVal",
							"DataType": "Integer",
							"Describe": "拨动值，正数向上滚动，负数向下滚动",
							"Optional": false
						},
						{
							"Caption": "hWnd",
							"DataType": "Integer",
							"Describe": "窗口句柄，默认为前台模拟按键，传递这个参数可以指定窗口模拟按键",
							"Optional": true
						}
					]
				}
			}
		]
	},
	{
		"Caption": "Keyboard",
		"Icon": "文件夹",
		"Visible": true,
		"Templet": "index",
		"Help": {
			"Caption": ""
		},
		"Child": [
			{
				"Caption": "KeyPress",
				"Remark": "模拟点击键盘按键",
				"Visible": true,
				"Keyword": true,
				"InsCode": "KeyPress(%VK_A)",
				"Templet": "command",
				"Help": {
					"Caption": "KeyPress",
					"Define": "KeyPress(vKey[, hWnd])",
					"Describe": "模拟点击一次键盘按键（按下 + 弹起）",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "vKey",
							"DataType": "Integer",
							"Describe": "虚拟按键码",
							"Optional": false
						},
						{
							"Caption": "hWnd",
							"DataType": "Integer",
							"Describe": "窗口句柄，默认为前台模拟按键，传递这个参数可以指定窗口模拟按键",
							"Optional": true
						}
					]
				}
			},
			{
				"Caption": "KeyDown",
				"Remark": "模拟按下键盘按键",
				"Visible": true,
				"Keyword": true,
				"InsCode": "KeyDown(%VK_A)",
				"Templet": "command",
				"Help": {
					"Caption": "KeyDown",
					"Define": "KeyDown(vKey[, hWnd])",
					"Describe": "模拟按下一次键盘按键",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "vKey",
							"DataType": "Integer",
							"Describe": "虚拟按键码",
							"Optional": false
						},
						{
							"Caption": "hWnd",
							"DataType": "Integer",
							"Describe": "窗口句柄，默认为前台模拟按键，传递这个参数可以指定窗口模拟按键",
							"Optional": true
						}
					]
				}
			},
			{
				"Caption": "KeyUp",
				"Remark": "模拟弹起键盘按键",
				"Visible": true,
				"Keyword": true,
				"InsCode": "KeyUp(%VK_A)",
				"Templet": "command",
				"Help": {
					"Caption": "KeyUp",
					"Define": "KeyUp(vKey[, hWnd])",
					"Describe": "模拟弹起一次键盘按键",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "vKey",
							"DataType": "Integer",
							"Describe": "虚拟按键码",
							"Optional": false
						},
						{
							"Caption": "hWnd",
							"DataType": "Integer",
							"Describe": "窗口句柄，默认为前台模拟按键，传递这个参数可以指定窗口模拟按键",
							"Optional": true
						}
					]
				}
			}
		]
	},
	{
		"Caption": "Work (Multi-Thread)",
		"Icon": "文件夹",
		"Visible": true,
		"Templet": "index",
		"Help": {
			"Caption": ""
		},
		"Child": [
			{
				"Caption": "！！！Warning！！！",
				"Icon": "警告",
				"Visible": true,
				"Templet": "document",
				"Help": {
					"Caption": "Work function usage warning",
					"Document": "In the source code structure of the smart robot, the code that does not belong to any function (Global Block) will be executed in all tasks, the Main function will only be executed in the main process, so when creating the task, do not write the code in the Main function. In addition, otherwise it will cause the task to create an infinite loop, which may cause the user or the developer's machine to be stuck, resulting in loss of document data."
				}
			},
			{
				"Caption": "Work_Create",
				"Remark": "创建即时任务",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Work_Create(\"WorkName\", \"参数\")",
				"InsCodeEnd": "\n' Thread callback function\nFunction Work_WorkName(ByVal sParam As String) As Long\n	\nEnd Function",
				"Templet": "command",
				"Help": {
					"Caption": "Work_Create",
					"Define": "Object = Work_Create(sWorkName, sParam)",
					"Describe": "创建一个新任务，新任务会立刻开始运行，任务以独立的进程运行，与主进程环境分开，类似按键精灵的多线程功能。",
					"RetType": "Integer",
					"Return": "返回任务句柄（进程PID），可以使用其他语句对这个任务进行操作",
					"Param": [
						{
							"Caption": "sWorkName",
							"DataType": "String",
							"Describe": "要创建的任务名称，会调用 Work_任务名 函数",
							"Optional": false
						},
						{
							"Caption": "sParam",
							"DataType": "String",
							"Describe": "传递给任务的参数",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "Work_Stop",
				"Remark": "停止任务",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Work_Stop(Work)",
				"Templet": "command",
				"Help": {
					"Caption": "Work_Stop",
					"Define": "Work_Stop(iWork)",
					"Describe": "强行终止一项任务的执行，系统会回收这项任务使用的所有资源。",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "iWork",
							"DataType": "Integer",
							"Describe": "任务句柄（任务的进程PID）",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "Work_Pause",
				"Remark": "暂停任务",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Work_Pause(Work)",
				"Templet": "command",
				"Help": {
					"Caption": "Work_Pause",
					"Define": "Work_Pause(iWork)",
					"Describe": "暂停任务，使任务代码不会继续执行。",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "iWork",
							"DataType": "Integer",
							"Describe": "任务句柄（任务的进程PID）",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "Work_Resume",
				"Remark": "恢复任务",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Work_Resume(Work)",
				"Templet": "command",
				"Help": {
					"Caption": "Work_Resume",
					"Define": "Work_Resume(iWork)",
					"Describe": "恢复任务的暂停状态，任务会从暂停的地方继续执行。",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "iWork",
							"DataType": "Integer",
							"Describe": "任务句柄（任务的进程PID）",
							"Optional": false
						}
					]
				}
			}
		]
	},
	{
		"Caption": "COM",
		"Icon": "文件夹",
		"Visible": true,
		"Templet": "index",
		"Help": {
			"Caption": ""
		},
		"Child": [
			{
				"Caption": "CreateObject",
				"Remark": "创建COM对象",
				"Visible": true,
				"Keyword": true,
				"InsCode": "CreateObject(\"ProgID\")",
				"Templet": "command",
				"Help": {
					"Caption": "CreateObject",
					"Define": "Object = CreateObject(sProgID)",
					"Describe": "根据 ProgID 创建一个 COM 对象实例",
					"RetType": "Object",
					"Return": "返回创建好的COM对象，失败返回 Nothing",
					"Param": [
						{
							"Caption": "sProgID",
							"DataType": "String",
							"Describe": "创建 COM 对象的 ProgID",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "GetObject",
				"Remark": "获取COM对象",
				"Visible": true,
				"Keyword": true,
				"InsCode": "GetObject(\"ProgID\")",
				"Templet": "command",
				"Help": {
					"Caption": "GetObject",
					"Define": "GetObject(sProgID)",
					"Describe": "根据 ProgID 返回一个正在运行的远程 COM 对象实例",
					"RetType": "Object",
					"Return": "返回创建好的COM对象，失败返回 Nothing",
					"Param": [
						{
							"Caption": "sProgID",
							"DataType": "String",
							"Describe": "创建 COM 对象的 ProgID",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "ReleaseObject",
				"Remark": "释放COM对象",
				"Visible": true,
				"Keyword": true,
				"InsCode": "ReleaseObject(objCOM)",
				"Templet": "command",
				"Help": {
					"Caption": "ReleaseObject",
					"Define": "ReleaseObject(objCOM)",
					"Describe": "释放 COM 对象",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "objCOM",
							"DataType": "Object",
							"Describe": "要操作的 COM 对象",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "IsNothing",
				"Remark": "判断COM对象是否释放",
				"Visible": true,
				"Keyword": true,
				"InsCode": "IsNothing(objCOM)",
				"Templet": "command",
				"Help": {
					"Caption": "IsNothing",
					"Define": "bRet = IsNothing(objCOM)",
					"Describe": "判断一个 COM 对象是否为 Nothing",
					"RetType": "Boolean",
					"Return": "COM 对象已释放 true，否则返回 false",
					"Param": [
						{
							"Caption": "objCOM",
							"DataType": "Object",
							"Describe": "要操作的 COM 对象",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "IsObject",
				"Remark": "判断是否为COM对象",
				"Visible": true,
				"Keyword": true,
				"InsCode": "IsObject(VarData)",
				"Templet": "command",
				"Help": {
					"Caption": "IsObject",
					"Define": "bRet = IsObject(VarData)",
					"Describe": "判断一个数据是否为 COM 对象",
					"RetType": "Boolean",
					"Return": "是 COM 对象返回 true，否则返回 false",
					"Param": [
						{
							"Caption": "VarData",
							"DataType": "Any",
							"Describe": "要判断的数据",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "GetObjPtr",
				"Remark": "获取COM对象指针",
				"Visible": true,
				"Keyword": true,
				"InsCode": "GetObjPtr(objCOM)",
				"Templet": "command",
				"Help": {
					"Caption": "GetObjPtr",
					"Define": "GetObjPtr(objCOM)",
					"Describe": "获取一个 COM 对象的 iDispatch 数据指针",
					"RetType": "Ptr",
					"Return": "返回 iDispatch 指针",
					"Param": [
						{
							"Caption": "objCOM",
							"DataType": "Object",
							"Describe": "要操作的 COM 对象",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "RegCom",
				"Remark": "注册COM组件",
				"Visible": true,
				"Keyword": true,
				"InsCode": "RegCom(\"文件路径\")",
				"Templet": "command",
				"Help": {
					"Caption": "RegCom",
					"Define": "RegCom(sPath)",
					"Describe": "注册一个COM组件，使COM组件可以正常被创建。",
					"RetType": "Boolean",
					"Return": "返回注册是否成功",
					"Param": [
						{
							"Caption": "sPath",
							"DataType": "String",
							"Describe": "COM组件的文件路径",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "UnRegCom",
				"Remark": "取消注册COM组件",
				"Visible": true,
				"Keyword": true,
				"InsCode": "UnRegCom(\"文件路径\")",
				"Templet": "command",
				"Help": {
					"Caption": "UnRegCom",
					"Define": "UnRegCom(sPath)",
					"Describe": "取消注册一个COM组件。",
					"RetType": "Boolean",
					"Return": "返回反注册是否成功",
					"Param": [
						{
							"Caption": "sPath",
							"DataType": "String",
							"Describe": "COM组件的文件路径",
							"Optional": false
						}
					]
				}
			}
		]
	},
	{
		"Caption": "Date and time",
		"Icon": "文件夹",
		"Visible": true,
		"Templet": "index",
		"Help": {
			"Caption": ""
		},
		"Child": [
			{
				"Caption": "Now",
				"Remark": "获取系统日期和时间",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Now()",
				"Templet": "command",
				"Help": {
					"Caption": "Now",
					"Define": "Now()",
					"Describe": "获取当前系统设置的日期和时间",
					"RetType": "Double",
					"Return": "返回包含系统日期和时间的数字，想要转换为字符串显示，可使用 Format 函数",
					"Param": [
					]
				}
			},
			{
				"Caption": "Date",
				"Remark": "获取系统日期",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Date()",
				"Templet": "command",
				"Help": {
					"Caption": "Date",
					"Define": "Date()",
					"Describe": "获取当前系统设置的日期",
					"RetType": "Double",
					"Return": "返回包含系统日期的数字，想要转换为字符串显示，可使用 Format 函数",
					"Param": [
					]
				}
			},
			{
				"Caption": "Time",
				"Remark": "获取系统时间",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Time()",
				"Templet": "command",
				"Help": {
					"Caption": "Time",
					"Define": "Time()",
					"Describe": "获取当前系统设置的时间",
					"RetType": "Double",
					"Return": "返回包含系统时间的数字，想要转换为字符串显示，可使用 Format 函数",
					"Param": [
					]
				}
			},
			{
				"Caption": "Timer",
				"Remark": "获取系统时间戳",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Timer()",
				"Templet": "command",
				"Help": {
					"Caption": "Timer",
					"Define": "Timer()",
					"Describe": "获取当前系统自启动后经过的秒数，这是高精度时间戳函数，可以获取微秒级的时间戳",
					"RetType": "Double",
					"Return": "返回时间戳",
					"Param": [
					]
				}
			},
			{
				"Caption": "Year",
				"Remark": "获取时间中的年份",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Year()",
				"Templet": "command",
				"Help": {
					"Caption": "Year",
					"Define": "Year(dTime)",
					"Describe": "获取指定时间数据中包含的年份数据",
					"RetType": "Integer",
					"Return": "返回时间中的年份",
					"Param": [
						{
							"Caption": "dTime",
							"DataType": "Double",
							"Describe": "时间数据，缺省为 Now()，也就是当前系统日期和时间",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "Month",
				"Remark": "获取时间中的月份",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Month()",
				"Templet": "command",
				"Help": {
					"Caption": "Month",
					"Define": "Month(dTime)",
					"Describe": "获取指定时间数据中包含的月份数据",
					"RetType": "Integer",
					"Return": "返回时间中的月份",
					"Param": [
						{
							"Caption": "dTime",
							"DataType": "Double",
							"Describe": "时间数据，缺省为 Now()，也就是当前系统日期和时间",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "Day",
				"Remark": "获取时间中的日期",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Day()",
				"Templet": "command",
				"Help": {
					"Caption": "Day",
					"Define": "Day(dTime)",
					"Describe": "获取指定时间数据中包含的日期数据",
					"RetType": "Integer",
					"Return": "返回时间中的日期",
					"Param": [
						{
							"Caption": "dTime",
							"DataType": "Double",
							"Describe": "时间数据，缺省为 Now()，也就是当前系统日期和时间",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "Weekday",
				"Remark": "获取时间中的星期",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Weekday()",
				"Templet": "command",
				"Help": {
					"Caption": "Weekday",
					"Define": "Weekday(dTime, firstdayofweek)",
					"Describe": "获取指定时间数据中包含的星期数据",
					"RetType": "Integer",
					"Return": "返回时间中的星期",
					"Param": [
						{
							"Caption": "dTime",
							"DataType": "Double",
							"Describe": "时间数据，缺省为 Now()，也就是当前系统日期和时间",
							"Optional": false
						},
						{
							"Caption": "firstdayofweek",
							"DataType": "Integer",
							"Describe": "第几天算作星期一，默认使用本地计算机设置",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "Hour",
				"Remark": "获取时间中的小时",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Hour()",
				"Templet": "command",
				"Help": {
					"Caption": "Hour",
					"Define": "Hour(dTime)",
					"Describe": "获取指定时间数据中包含的小时数据",
					"RetType": "Integer",
					"Return": "返回时间中的小时",
					"Param": [
						{
							"Caption": "dTime",
							"DataType": "Double",
							"Describe": "时间数据，缺省为 Now()，也就是当前系统日期和时间",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "Minute",
				"Remark": "获取时间中的分钟",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Minute()",
				"Templet": "command",
				"Help": {
					"Caption": "Minute",
					"Define": "Minute(dTime)",
					"Describe": "获取指定时间数据中包含的分钟数据",
					"RetType": "Integer",
					"Return": "返回时间中的分钟",
					"Param": [
						{
							"Caption": "dTime",
							"DataType": "Double",
							"Describe": "时间数据，缺省为 Now()，也就是当前系统日期和时间",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "Second",
				"Remark": "获取时间中的秒钟",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Second()",
				"Templet": "command",
				"Help": {
					"Caption": "Second",
					"Define": "Second(dTime)",
					"Describe": "获取指定时间数据中包含的秒钟数据",
					"RetType": "Integer",
					"Return": "返回时间中的秒钟",
					"Param": [
						{
							"Caption": "dTime",
							"DataType": "Double",
							"Describe": "时间数据，缺省为 Now()，也就是当前系统日期和时间",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "DateSerial",
				"Remark": "构建日期",
				"Visible": true,
				"Keyword": true,
				"InsCode": "DateSerial(2019, 12, 1)",
				"Templet": "command",
				"Help": {
					"Caption": "DateSerial",
					"Define": "DateSerial(y, m, d)",
					"Describe": "根据参数提供的年、月、日数据构建一个日期数据",
					"RetType": "Double",
					"Return": "返回构建好的日期数据",
					"Param": [
						{
							"Caption": "y",
							"DataType": "Integer",
							"Describe": "年份",
							"Optional": false
						},
						{
							"Caption": "m",
							"DataType": "Integer",
							"Describe": "月份",
							"Optional": false
						},
						{
							"Caption": "d",
							"DataType": "Integer",
							"Describe": "日期",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "TimeSerial",
				"Remark": "构建时间",
				"Visible": true,
				"Keyword": true,
				"InsCode": "TimeSerial(12, 0, 0)",
				"Templet": "command",
				"Help": {
					"Caption": "TimeSerial",
					"Define": "TimeSerial([y, m, d, ]h, n, s)",
					"Describe": "根据参数提供的年、月、日、时、分、秒数据构建一个日期数据",
					"RetType": "Double",
					"Return": "返回构建好的时间数据",
					"Param": [
						{
							"Caption": "y",
							"DataType": "Integer",
							"Describe": "年份（省略前三个参数则只构建时间数据）",
							"Optional": true
						},
						{
							"Caption": "m",
							"DataType": "Integer",
							"Describe": "月份（省略前三个参数则只构建时间数据）",
							"Optional": true
						},
						{
							"Caption": "d",
							"DataType": "Integer",
							"Describe": "日期（省略前三个参数则只构建时间数据）",
							"Optional": true
						},
						{
							"Caption": "h",
							"DataType": "Integer",
							"Describe": "小时",
							"Optional": false
						},
						{
							"Caption": "n",
							"DataType": "Integer",
							"Describe": "分钟",
							"Optional": false
						},
						{
							"Caption": "s",
							"DataType": "Integer",
							"Describe": "秒钟",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "DateAdd",
				"Remark": "时间加减计算",
				"Visible": true,
				"Keyword": true,
				"InsCode": "DateAdd(\"d\", 10, Now())",
				"Templet": "command",
				"Help": {
					"Caption": "DateAdd",
					"Define": "DateAdd(interval, number, date_serial)",
					"Describe": "对一个时间的指定单位进行加法计算（可以传递负数实现减法计算）",
					"RetType": "Double",
					"Return": "返回计算好的日期数据",
					"Param": [
						{
							"Caption": "interval",
							"DataType": "String",
							"Describe": "间隔单位，可以是以下值：<br>yyyy 年<br>q 季度（三个月）<br>m 月<br>ww 星期（7天）<br>d 天<br>h 小时<br>m 分钟<br>s 秒",
							"Optional": false
						},
						{
							"Caption": "number",
							"DataType": "Double",
							"Describe": "要加减的时间单位数量",
							"Optional": false
						},
						{
							"Caption": "date_serial",
							"DataType": "Double",
							"Describe": "要操作的时间数据",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "DateDiff",
				"Remark": "计算时间差",
				"Visible": true,
				"Keyword": true,
				"InsCode": "DateDiff(\"d\", Now() + 10, Now())",
				"Templet": "command",
				"Help": {
					"Caption": "DateDiff",
					"Define": "DateDiff(interval, date_serial1, date_serial2[, firstdayofWeek[, firstweekofyear]])",
					"Describe": "计算两个时间的时间差，并已指定的时间单位返回",
					"RetType": "Integer",
					"Return": "返回两个时间的时间差",
					"Param": [
						{
							"Caption": "interval",
							"DataType": "String",
							"Describe": "间隔单位，可以是以下值：<br>yyyy 年<br>q 季度（三个月）<br>m 月<br>w 星期（7天）<br>ww 星期（日历星期）<br>d 天<br>h 小时<br>m 分钟<br>s 秒",
							"Optional": false
						},
						{
							"Caption": "date_serial1",
							"DataType": "Double",
							"Describe": "第一个时间数据",
							"Optional": false
						},
						{
							"Caption": "date_serial2",
							"DataType": "Double",
							"Describe": "第二个时间数据",
							"Optional": false
						},
						{
							"Caption": "firstdayofWeek",
							"DataType": "Integer",
							"Describe": "第几天算作星期一，默认使用本地计算机设置",
							"Optional": false
						},
						{
							"Caption": "firstweekofyear",
							"DataType": "Double",
							"Describe": "第几天算作当年的第一个星期，可以使用以下值：<br>0 使用本地设置<br>1 使用第一个星期<br>2 第一个星期必须有4天在当年才算<br>3 第一个星期必须完整在当年才算",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "DatePart",
				"Remark": "获取时间中指定单位的值",
				"Visible": true,
				"Keyword": true,
				"InsCode": "DatePart(\"d\", Now())",
				"Templet": "command",
				"Help": {
					"Caption": "DatePart",
					"Define": "DatePart(interval, date_serial[, firstdayofWeek[, firstweekofyear]])",
					"Describe": "获取时间数据中指定单位部分的值",
					"RetType": "Integer",
					"Return": "返回时间单位的值",
					"Param": [
						{
							"Caption": "interval",
							"DataType": "String",
							"Describe": "间隔单位，可以是以下值：<br>yyyy 年<br>q 季度（三个月）<br>m 月<br>w 星期几<br>ww 年份的第几个星期<br>y 年份的天数<br>d 天<br>h 小时<br>m 分钟<br>s 秒",
							"Optional": false
						},
						{
							"Caption": "date_serial",
							"DataType": "Double",
							"Describe": "时间数据",
							"Optional": false
						},
						{
							"Caption": "firstdayofWeek",
							"DataType": "Integer",
							"Describe": "第几天算作星期一，默认使用本地计算机设置",
							"Optional": false
						},
						{
							"Caption": "firstweekofyear",
							"DataType": "Double",
							"Describe": "第几天算作当年的第一个星期，可以使用以下值：<br>0 使用本地设置<br>1 使用第一个星期<br>2 第一个星期必须有4天在当年才算<br>3 第一个星期必须完整在当年才算",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "Format",
				"Remark": "格式化时间数据",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Format(Now(), \"yyyy-mm-dd hh:mm:ss\")",
				"Templet": "command",
				"Help": {
					"Caption": "Format",
					"Define": "Format(dTime, sFormat)",
					"Describe": "将时间数据转换为指定格式的字符串",
					"RetType": "String",
					"Return": "返回时间字符串",
					"Param": [
						{
							"Caption": "dTime",
							"DataType": "Double",
							"Describe": "时间数据",
							"Optional": false
						},
						{
							"Caption": "sFormat",
							"DataType": "String",
							"Describe": "格式化字符串，可以使用以下值表示指定的时间部分：<br>d 显示没有前导零的日数 (1-31)<br>dd 显示有前导零的日数 (01-31)<br>ddd 显示星期缩写 (Sun-Sat)<br>dddd 显示星期几全名 (Sunday-Saturday)<br>ddddd 显示一个序列日期值为整数个日期 (包括 日, 月份, 和 年份)<br>m 显示月份没有前导零 (1-12) 如果用于直接跟随在 h 或 hh, 分钟优先于作为月份显示<br>mm 显示月份有前导零 (01-12) 如果用于直接跟随在  h 或 hh, 分钟优先于作为月份显示<br>mmm 显示月份名的缩写 (Jan-Dec)<br>mmmm 显示月份名的全称 (January-December)<br>y 显示年份为两位数值 (00-99)<br>yyyy 显示年份为四位数值 (1900-2040)<br>h 显示小时没有前导零 (0-23)<br>hh 显示小时有前导零 (00-23)<br>m 显示分钟没有前导零 (0-59) 如果不用于直接跟随在 h 或 hh, 月份优先于作为分钟显示<br>mm 显示分钟有前导零 (00-59) 如果不用于直接跟随在 h 或 hh, 月份优先于作为分钟显示<br>s 显示秒数没有前导零 (0-59)<br>ss 显示秒数有前导零 (00-59)<br>ttttt 显示一个时间序列数值为一个完整的时间, 包括小时, 分钟, 秒<br>AM/PM (默认) am/pm 使用 12-小时 制显示 AM 或 am 为 am/pm 所有小时在中午前，PM 或 pm 为 所有小时在中午和 11:59之间<br>A/P a/p 使用 12-小时 制显示 A 或 a 为所有小时在中午前， P 或 p 为所有小时在中午和 11:59之间",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "ToUnixTime",
				"Remark": "时间数据转换为Unix时间戳",
				"Visible": true,
				"Keyword": true,
				"InsCode": "ToUnixTime(Now())",
				"Templet": "command",
				"Help": {
					"Caption": "ToUnixTime",
					"Define": "ToUnixTime(dTime)",
					"Describe": "将时间数据转换为Unix时间戳",
					"RetType": "Integer",
					"Return": "返回Unix时间戳",
					"Param": [
						{
							"Caption": "dTime",
							"DataType": "Double",
							"Describe": "时间数据",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "FromUnixTime",
				"Remark": "Unix时间戳转换为时间数据",
				"Visible": true,
				"Keyword": true,
				"InsCode": "FromUnixTime(Now())",
				"Templet": "command",
				"Help": {
					"Caption": "FromUnixTime",
					"Define": "FromUnixTime(iTime)",
					"Describe": "将Unix时间戳转换为时间数据",
					"RetType": "Double",
					"Return": "返回时间数据",
					"Param": [
						{
							"Caption": "iTime",
							"DataType": "Integer",
							"Describe": "Unix时间戳",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "IsDate",
				"Remark": "字符串是否可以转为时间",
				"Visible": true,
				"Keyword": true,
				"InsCode": "IsDate(\"2019年1月1日 12:00:00\")",
				"Templet": "command",
				"Help": {
					"Caption": "IsDate",
					"Define": "IsDate(sTime[, sRule])",
					"Describe": "判断字符串是否可以转换为时间数据",
					"RetType": "Boolean",
					"Return": "可以转换为时间数据返回 true，否则返回 false",
					"Param": [
						{
							"Caption": "sTime",
							"DataType": "String",
							"Describe": "包含时间数据的字符串",
							"Optional": false
						},
						{
							"Caption": "sRule",
							"DataType": "String",
							"Describe": "转换规则，默认为 yyyy.mm.dd.hh.mm.ss，解析规则如下：<br>y 解析年份，必须 4 位数字<br>m 解析月份，1 - 2 位数字，当 m 紧跟在 h 后面时，按照分钟解析<br>d 解析日期，1 - 2 位数字<br>h 解析小时，1 - 2 位数字<br>n 解析分钟，1 - 2 位数字<br>s 解析秒，1 - 2 位数字<br>* 解析任意字符 0 次至无限次，直到遇到数字<br>. 解析任意字符 1 次至无限次，直到遇到数字<br>? 解析任意字符 1 次，中文字符也按照一个字符计算<br>Space 解析空白字符(Space、Tab) 0 次至无限次<br>解析字符一个和多个没有影响，其他字符将按照完全匹配解析<br>备注 : 解析格式化字符串时，会自动在最前面生成一个 *",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "CDate",
				"Remark": "字符串转换为时间",
				"Visible": true,
				"Keyword": true,
				"InsCode": "CDate(\"2019年1月1日 12:00:00\")",
				"Templet": "command",
				"Help": {
					"Caption": "CDate",
					"Define": "CDate(sTime[, sRule])",
					"Describe": "将字符串转换为时间数据",
					"RetType": "Double",
					"Return": "返回转换后的时间数据，转换失败返回 0",
					"Param": [
						{
							"Caption": "sTime",
							"DataType": "String",
							"Describe": "包含时间数据的字符串",
							"Optional": false
						},
						{
							"Caption": "sRule",
							"DataType": "String",
							"Describe": "转换规则，默认为 yyyy.mm.dd.hh.mm.ss，解析规则如下：<br>y 解析年份，必须 4 位数字<br>m 解析月份，1 - 2 位数字，当 m 紧跟在 h 后面时，按照分钟解析<br>d 解析日期，1 - 2 位数字<br>h 解析小时，1 - 2 位数字<br>n 解析分钟，1 - 2 位数字<br>s 解析秒，1 - 2 位数字<br>* 解析任意字符 0 次至无限次，直到遇到数字<br>. 解析任意字符 1 次至无限次，直到遇到数字<br>? 解析任意字符 1 次，中文字符也按照一个字符计算<br>Space 解析空白字符(Space、Tab) 0 次至无限次<br>解析字符一个和多个没有影响，其他字符将按照完全匹配解析<br>备注 : 解析格式化字符串时，会自动在最前面生成一个 *",
							"Optional": false
						}
					]
				}
			}
		]
	},
	{
		"Caption": "System",
		"Icon": "文件夹",
		"Visible": true,
		"Templet": "index",
		"Help": {
			"Caption": ""
		},
		"Child": [
			{
				"Caption": "OS_Environ",
				"Remark": "读取环境变量",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_Environ(\"PATH\")",
				"Templet": "command",
				"Help": {
					"Caption": "OS_Environ",
					"Define": "OS_Environ(sName)",
					"Describe": "读取系统级环境变量的值",
					"RetType": "String",
					"Return": "返回环境变量的值",
					"Param": [
						{
							"Caption": "sName",
							"DataType": "String",
							"Describe": "环境变量的名字（也可以传递一个数据，返回指定顺位的环境变量值）",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "OS_GetComputerName",
				"Remark": "获取计算机名",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_GetComputerName",
				"Templet": "command",
				"Help": {
					"Caption": "OS_GetComputerName",
					"Define": "sRet = OS_GetComputerName",
					"Describe": "获取计算机名",
					"RetType": "String",
					"Return": "返回计算机名",
					"Param": [
					]
				}
			},
			{
				"Caption": "OS_GetCurrentProcessId",
				"Remark": "获取当前进程PID",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_GetCurrentProcessId",
				"Templet": "command",
				"Help": {
					"Caption": "OS_GetCurrentProcessId",
					"Define": "iRet = OS_GetCurrentProcessId",
					"Describe": "获取当前进程PID",
					"RetType": "Integer",
					"Return": "返回当前进程PID",
					"Param": [
					]
				}
			},
			{
				"Caption": "OS_GetCurrentThreadId",
				"Remark": "获取当前线程TID",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_GetCurrentThreadId",
				"Templet": "command",
				"Help": {
					"Caption": "OS_GetCurrentThreadId",
					"Define": "iRet = OS_GetCurrentThreadId",
					"Describe": "获取当前线程TID",
					"RetType": "Integer",
					"Return": "返回当前线程TID",
					"Param": [
					]
				}
			},
			{
				"Caption": "OS_GetSystemDir",
				"Remark": "获取系统目录",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_GetSystemDir",
				"Templet": "command",
				"Help": {
					"Caption": "OS_GetSystemDir",
					"Define": "sRet = OS_GetSystemDir",
					"Describe": "获取系统目录",
					"RetType": "String",
					"Return": "返回系统目录",
					"Param": [
					]
				}
			},
			{
				"Caption": "OS_GetWindowsDir",
				"Remark": "获取Windows目录",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_GetWindowsDir",
				"Templet": "command",
				"Help": {
					"Caption": "OS_GetWindowsDir",
					"Define": "sRet = OS_GetWindowsDir",
					"Describe": "获取Windows目录",
					"RetType": "String",
					"Return": "返回Windows目录",
					"Param": [
					]
				}
			},
			{
				"Caption": "OS_GetTempDir",
				"Remark": "获取临时目录",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_GetTempDir",
				"Templet": "command",
				"Help": {
					"Caption": "OS_GetTempDir",
					"Define": "sRet = OS_GetTempDir",
					"Describe": "获取临时目录",
					"RetType": "String",
					"Return": "返回临时目录",
					"Param": [
					]
				}
			},
			{
				"Caption": "OS_GetSpecialFolder",
				"Remark": "获取系统特殊路径",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_GetSpecialFolder",
				"Templet": "command",
				"Help": {
					"Caption": "OS_GetSpecialFolder",
					"Define": "sRet = OS_GetSpecialFolder(CLSID)",
					"Describe": "获取系统特殊路径",
					"RetType": "String",
					"Return": "返回获取到的路径",
					"Param": [
						{
							"Caption": "CLSID",
							"DataType": "Integer",
							"Describe": "特殊路径的CLSID，支持：<br>%CSIDL_ADMINTOOLS<br>%CSIDL_ALTSTARTUP<br>%CSIDL_APPDATA<br>%CSIDL_BITBUCKET<br>%CSIDL_CDBURN_AREA<br>%CSIDL_COMMON_ADMINTOOLS<br>%CSIDL_COMMON_ALTSTARTUP<br>%CSIDL_COMMON_APPDATA<br>%CSIDL_COMMON_DESKTOPDIRECTORY<br>%CSIDL_COMMON_DOCUMENTS<br>%CSIDL_COMMON_FAVORITES<br>%CSIDL_COMMON_MUSIC<br>%CSIDL_COMMON_PICTURES<br>%CSIDL_COMMON_PROGRAMS<br>%CSIDL_COMMON_STARTMENU<br>%CSIDL_COMMON_STARTUP<br>%CSIDL_COMMON_TEMPLATES<br>%CSIDL_COMMON_VIDEO<br>%CSIDL_CONTROLS<br>%CSIDL_COOKIES<br>%CSIDL_DESKTOP<br>%CSIDL_DESKTOPDIRECTORY<br>%CSIDL_DRIVES<br>%CSIDL_FAVORITES<br>%CSIDL_FLAG_CREATE<br>%CSIDL_FONTS<br>%CSIDL_HISTORY<br>%CSIDL_INTERNET<br>%CSIDL_INTERNET_CACHE<br>%CSIDL_LOCAL_APPDATA<br>%CSIDL_MYDOCUMENTS<br>%CSIDL_MYMUSIC<br>%CSIDL_MYPICTURES<br>%CSIDL_MYVIDEO<br>%CSIDL_NETHOOD<br>%CSIDL_NETWORK<br>%CSIDL_PERSONAL<br>%CSIDL_PRINTERS<br>%CSIDL_PRINTHOOD<br>%CSIDL_PROFILE<br>%CSIDL_PROGRAM_FILES<br>%CSIDL_PROGRAM_FILES_COMMON<br>%CSIDL_PROGRAMS<br>%CSIDL_RECENT<br>%CSIDL_SENDTO<br>%CSIDL_STARTMENU<br>%CSIDL_STARTUP<br>%CSIDL_SYSTEM<br>%CSIDL_TEMPLATES<br>%CSIDL_WINDOWS",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "OS_GetUserName",
				"Remark": "获取用户名",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_GetUserName",
				"Templet": "command",
				"Help": {
					"Caption": "OS_GetUserName",
					"Define": "sRet = OS_GetUserName",
					"Describe": "获取登录到当前系统的用户名",
					"RetType": "String",
					"Return": "返回用户名",
					"Param": [
					]
				}
			},
			{
				"Caption": "OS_WinVersionText",
				"Remark": "获取Windows版本",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_WinVersionText",
				"Templet": "command",
				"Help": {
					"Caption": "OS_WinVersionText",
					"Define": "sRet = OS_WinVersionText",
					"Describe": "获取Windows版本",
					"RetType": "String",
					"Return": "返回Windows版本",
					"Param": [
					]
				}
			},
			{
				"Caption": "OS_WinGetVersionTimeline",
				"Remark": "获取Windows版本",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_WinGetVersionTimeline",
				"Templet": "command",
				"Help": {
					"Caption": "OS_WinGetVersionTimeline",
					"Define": "iRet = OS_WinGetVersionTimeline",
					"Describe": "获取Windows版本（以数字代号形式返回）",
					"RetType": "Integer",
					"Return": "返回Windows版本",
					"Param": [
					]
				}
			},
			{
				"Caption": "OS_IEVersion",
				"Remark": "获取IE版本",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_IEVersion",
				"Templet": "command",
				"Help": {
					"Caption": "OS_IEVersion",
					"Define": "sRet = OS_IEVersion",
					"Describe": "获取IE版本",
					"RetType": "String",
					"Return": "返回IE版本",
					"Param": [
					]
				}
			},
			{
				"Caption": "OS_IsWow64",
				"Remark": "是否64位系统",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_IsWow64",
				"Templet": "command",
				"Help": {
					"Caption": "OS_IsWow64",
					"Define": "bRet = OS_IsWow64",
					"Describe": "获取当前操作系统是否为64位版本的",
					"RetType": "Boolean",
					"Return": "是64位系统返回 true，否则返回 false",
					"Param": [
					]
				}
			},
			{
				"Caption": "OS_MessageBeep",
				"Remark": "播放系统提示音",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_MessageBeep(%MB_SIMPLE)",
				"Templet": "command",
				"Help": {
					"Caption": "OS_MessageBeep",
					"Define": "OS_MessageBeep(iType)",
					"Describe": "播放系统提示音",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "iType",
							"DataType": "Integer",
							"Describe": "系统提示音类型，支持：<br>%MB_SIMPLE<br>%MB_ICONASTERISK<br>%MB_ICONEXCLAMATION<br>%MB_ICONHAND<br>%MB_ICONQUESTION<br>%MB_OK",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "OS_ShellAbout",
				"Remark": "弹出关于对话框",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_ShellAbout(0, \"灵智机器人\", \"灵智机器人 v0.72\", \"Power By xLeaves QQ：605072846\")",
				"Templet": "command",
				"Help": {
					"Caption": "OS_ShellAbout",
					"Define": "OS_ShellAbout(hWnd, sTitle, sText, sNote, hIcon)",
					"Describe": "弹出系统自带的关于对话框",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "hWnd",
							"DataType": "Integer",
							"Describe": "父窗口句柄，传递为 0 则不锁定父窗口",
							"Optional": false
						},
						{
							"Caption": "sTitle",
							"DataType": "String",
							"Describe": "窗口标题",
							"Optional": false
						},
						{
							"Caption": "sText",
							"DataType": "String",
							"Describe": "版本描述信息",
							"Optional": false
						},
						{
							"Caption": "sNote",
							"DataType": "String",
							"Describe": "软件介绍",
							"Optional": false
						},
						{
							"Caption": "hIcon",
							"DataType": "Integer",
							"Describe": "图标句柄",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "OS_IsFeaturePresent",
				"Remark": "确认CPU特性",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_IsFeaturePresent(%PF_SSE3_INSTRUCTIONS_AVAILABLE)",
				"Templet": "command",
				"Help": {
					"Caption": "OS_IsFeaturePresent",
					"Define": "bRet = OS_IsFeaturePresent(iType)",
					"Describe": "确定当前电脑上安装的CPU是否支持某种特性",
					"RetType": "Boolean",
					"Return": "支持特性返回 true，否则返回 false",
					"Param": [
						{
							"Caption": "iType",
							"DataType": "Integer",
							"Describe": "特性类型，支持：<br>%PF_FLOATING_POINT_PRECISION_ERRATA<br>%PF_FLOATING_POINT_EMULATED<br>%PF_COMPARE_EXCHANGE_DOUBLE<br>%PF_MMX_INSTRUCTIONS_AVAILABLE<br>%PF_XMMI_INSTRUCTIONS_AVAILABLE<br>%PF_RDTSC_INSTRUCTION_AVAILABLE<br>%PF_3DNOW_INSTRUCTIONS_AVAILABLE<br>%PF_PAE_ENABLED<br>%PF_XMMI64_INSTRUCTIONS_AVAILABLE<br>%PF_NX_ENABLED<br>%PF_SSE3_INSTRUCTIONS_AVAILABLE<br>%PF_COMPARE_EXCHANGE128<br>%PF_COMPARE64_EXCHANGE128<br>%PF_CHANNELS_ENABLED",
							"Optional": false
						}
					]
				}
			}
		]
	},
	{
		"Caption": "Process",
		"Icon": "文件夹",
		"Visible": true,
		"Templet": "index",
		"Help": {
			"Caption": ""
		},
		"Child": [
			{
				"Caption": "OS_ProcessGetList",
				"Remark": "获取进程列表",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_ProcessGetList($CRLF)",
				"Templet": "command",
				"Help": {
					"Caption": "OS_ProcessGetList",
					"Define": "sRet = OS_ProcessGetList(sSep)",
					"Describe": "获取进程列表",
					"RetType": "String",
					"Return": "返回进程列表",
					"Param": [
						{
							"Caption": "sSep",
							"DataType": "String",
							"Describe": "每个进程之间的分隔符",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "OS_ProcessIsRunning",
				"Remark": "进程是否正在运行",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_ProcessIsRunning(\"notepad.exe\")",
				"Templet": "command",
				"Help": {
					"Caption": "OS_ProcessIsRunning",
					"Define": "bRet = OS_ProcessIsRunning(sProcess)",
					"Describe": "判断进程进程是否正在运行",
					"RetType": "Boolean",
					"Return": "在运行返回 true，否则返回 false",
					"Param": [
						{
							"Caption": "sProcess",
							"DataType": "String",
							"Describe": "进程的映像名称",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "OS_ProcessIsRunningById",
				"Remark": "进程PID是否正在运行",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_ProcessIsRunningById(PID)",
				"Templet": "command",
				"Help": {
					"Caption": "OS_ProcessIsRunningById",
					"Define": "bRet = OS_ProcessIsRunningById(PID)",
					"Describe": "判断进程进程是否正在运行（使用进程PID）",
					"RetType": "Boolean",
					"Return": "在运行返回 true，否则返回 false",
					"Param": [
						{
							"Caption": "PID",
							"DataType": "Integer",
							"Describe": "进程的PID",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "OS_ProcessKillByName",
				"Remark": "结束进程名",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_ProcessKillByName(\"notepad.exe\")",
				"Templet": "command",
				"Help": {
					"Caption": "OS_ProcessKillByName",
					"Define": "OS_ProcessKillByName(sProcess)",
					"Describe": "结束指定进程名的进程",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "sProcess",
							"DataType": "String",
							"Describe": "进程的映像名称",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "OS_ProcessKillById",
				"Remark": "结束进程PID",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_ProcessKillById(0)",
				"Templet": "command",
				"Help": {
					"Caption": "OS_ProcessKillById",
					"Define": "OS_ProcessKillById(iProcessID)",
					"Describe": "根据进程PID结束指定的进程",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "iProcessID",
							"DataType": "Integer",
							"Describe": "进程PID",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "OS_ProcessPauseById",
				"Remark": "挂起进程",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_ProcessPauseById(0)",
				"Templet": "command",
				"Help": {
					"Caption": "OS_ProcessPauseById",
					"Define": "OS_ProcessPauseById(iProcessID)",
					"Describe": "根据进程PID挂起指定的进程（暂停进程运行）",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "iProcessID",
							"DataType": "Integer",
							"Describe": "进程PID",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "OS_ProcessResumeById",
				"Remark": "恢复挂起进程",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_ProcessResumeById(0)",
				"Templet": "command",
				"Help": {
					"Caption": "OS_ProcessResumeById",
					"Define": "OS_ProcessResumeById(iProcessID)",
					"Describe": "根据进程PID恢复挂起的进程",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "iProcessID",
							"DataType": "Integer",
							"Describe": "进程PID",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "OS_ProcessGetID",
				"Remark": "获取进程PID",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_ProcessGetID(\"notepad.exe\")",
				"Templet": "command",
				"Help": {
					"Caption": "OS_ProcessGetID",
					"Define": "iRet = OS_ProcessGetID(sProcess)",
					"Describe": "根据进程映像名获取进程PID",
					"RetType": "Integer",
					"Return": "返回获取到的进程PID",
					"Param": [
						{
							"Caption": "sProcess",
							"DataType": "String",
							"Describe": "进程的映像名称",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "OS_ProcessGetFullPath",
				"Remark": "获取进程文件路径",
				"Visible": true,
				"Keyword": true,
				"InsCode": "OS_ProcessGetFullPath(0)",
				"Templet": "command",
				"Help": {
					"Caption": "OS_ProcessGetFullPath",
					"Define": "sRet = OS_ProcessGetFullPath(iProcessID)",
					"Describe": "获取指定进程PID的可执行文件路径",
					"RetType": "String",
					"Return": "返回获取到的文件路径",
					"Param": [
						{
							"Caption": "iProcessID",
							"DataType": "Integer",
							"Describe": "进程PID",
							"Optional": false
						}
					]
				}
			}
		]
	},
	{
		"Caption": "File",
		"Icon": "文件夹",
		"Visible": true,
		"Templet": "index",
		"Help": {
			"Caption": ""
		},
		"Child": [
			{
				"Caption": "Load_File",
				"Remark": "读取文件",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Load_File(\"文件路径\")",
				"Templet": "command",
				"Help": {
					"Caption": "Load_File",
					"Define": "Load_File(sFile)",
					"Describe": "一次性读取文件的全部内容",
					"RetType": "String",
					"Return": "返回文件的内容",
					"Param": [
						{
							"Caption": "sFile",
							"DataType": "String",
							"Describe": "文件路径",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "Save_File",
				"Remark": "写入文件",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Save_File(\"文件路径\", \"写入内容\")",
				"Templet": "command",
				"Help": {
					"Caption": "Save_File",
					"Define": "Result = Save_File(sFile, sBuffer, iAttr)",
					"Describe": "将数据写入到文件，会覆盖文件原有的内容",
					"RetType": "Integer",
					"Return": "写入的字节数量",
					"Param": [
						{
							"Caption": "sFile",
							"DataType": "String",
							"Describe": "文件路径",
							"Optional": false
						},
						{
							"Caption": "sBuffer",
							"DataType": "String",
							"Describe": "要写入的文件内容",
							"Optional": false
						},
						{
							"Caption": "iAttr",
							"DataType": "Integer",
							"Describe": "文件属性",
							"Optional": true
						}
					]
				}
			}
		]
	},
	{
		"Caption": "ClipBoard",
		"Icon": "文件夹",
		"Visible": true,
		"Templet": "index",
		"Help": {
			"Caption": ""
		},
		"Child": [
			{
				"Caption": "ClipBoard_SetText",
				"Remark": "设置剪贴板文本",
				"Visible": true,
				"Keyword": true,
				"InsCode": "ClipBoard_SetText(\"\")",
				"Templet": "command",
				"Help": {
					"Caption": "ClipBoard_SetText",
					"Define": "ClipBoard_SetText(sText)",
					"Describe": "设置剪贴板中存放的文字内容",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "sText",
							"DataType": "String",
							"Describe": "剪贴板的内容",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "ClipBoard_GetText",
				"Remark": "读取剪贴板文本",
				"Visible": true,
				"Keyword": true,
				"InsCode": "ClipBoard_GetText",
				"Templet": "command",
				"Help": {
					"Caption": "ClipBoard_GetText",
					"Define": "Result = ClipBoard_GetText",
					"Describe": "获取剪贴板中存放的文字内容",
					"RetType": "String",
					"Return": "返回剪贴板文本数据",
					"Param": [
					]
				}
			}
		]
	},
	{
		"Caption": "Charset",
		"Icon": "文件夹",
		"Visible": true,
		"Templet": "index",
		"Help": {
			"Caption": ""
		},
		"Child": [
			{
				"Caption": "A2U",
				"Remark": "ANSI转Utf-8",
				"Visible": true,
				"Keyword": true,
				"InsCode": "A2U(\"要转换的内容\")",
				"Templet": "command",
				"Help": {
					"Caption": "A2U",
					"Define": "Result = A2U(sText)",
					"Describe": "将 ANSI 字符集编码的文字转换为 utf-8 字符集编码的文字",
					"RetType": "String",
					"Return": "返回转换编码后的字符串",
					"Param": [
						{
							"Caption": "sText",
							"DataType": "String",
							"Describe": "要转换编码的字符串",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "U2A",
				"Remark": "Utf-8转ANSI",
				"Visible": true,
				"Keyword": true,
				"InsCode": "U2A(\"要转换的内容\")",
				"Templet": "command",
				"Help": {
					"Caption": "U2A",
					"Define": "Result = U2A(sText)",
					"Describe": "将 utf-8 字符集编码的文字转换为 ANSI 字符集编码的文字",
					"RetType": "String",
					"Return": "返回转换编码后的字符串",
					"Param": [
						{
							"Caption": "sText",
							"DataType": "String",
							"Describe": "要转换编码的字符串",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "A2W",
				"Remark": "ANSI转Unicode",
				"Visible": true,
				"Keyword": true,
				"InsCode": "A2W(\"要转换的内容\")",
				"Templet": "command",
				"Help": {
					"Caption": "A2W",
					"Define": "Result = A2W(sText)",
					"Describe": "将 ANSI 字符集编码的文字转换为 Unicode 字符集编码的文字",
					"RetType": "String",
					"Return": "返回转换编码后的字符串",
					"Param": [
						{
							"Caption": "sText",
							"DataType": "String",
							"Describe": "要转换编码的字符串",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "W2A",
				"Remark": "Unicode转ANSI",
				"Visible": true,
				"Keyword": true,
				"InsCode": "W2A(\"要转换的内容\")",
				"Templet": "command",
				"Help": {
					"Caption": "W2A",
					"Define": "Result = W2A(sText)",
					"Describe": "将 Unicode 字符集编码的文字转换为 ANSI 字符集编码的文字",
					"RetType": "String",
					"Return": "返回转换编码后的字符串",
					"Param": [
						{
							"Caption": "sText",
							"DataType": "String",
							"Describe": "要转换编码的字符串",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "W2U",
				"Remark": "Unicode转Utf-8",
				"Visible": true,
				"Keyword": true,
				"InsCode": "W2U(\"要转换的内容\")",
				"Templet": "command",
				"Help": {
					"Caption": "W2U",
					"Define": "Result = W2U(sText)",
					"Describe": "将 Unicode 字符集编码的文字转换为 utf-8 字符集编码的文字",
					"RetType": "String",
					"Return": "返回转换编码后的字符串",
					"Param": [
						{
							"Caption": "sText",
							"DataType": "String",
							"Describe": "要转换编码的字符串",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "U2W",
				"Remark": "Utf-8转Unicode",
				"Visible": true,
				"Keyword": true,
				"InsCode": "U2W(\"要转换的内容\")",
				"Templet": "command",
				"Help": {
					"Caption": "U2W",
					"Define": "Result = U2W(sText)",
					"Describe": "将 utf-8 字符集编码的文字转换为 Unicode 字符集编码的文字",
					"RetType": "String",
					"Return": "返回转换编码后的字符串",
					"Param": [
						{
							"Caption": "sText",
							"DataType": "String",
							"Describe": "要转换编码的字符串",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "IsUnicode",
				"Remark": "判断是否为Unicode编码",
				"Visible": true,
				"Keyword": true,
				"InsCode": "IsUnicode(\"要判断的字符串\")",
				"Templet": "command",
				"Help": {
					"Caption": "IsUnicode",
					"Define": "Result = IsUnicode(sText)",
					"Describe": "判断一个字符串是否使用 Unicode 编码",
					"RetType": "Boolean",
					"Return": "是 Unicode 编码的字符串则返回 true",
					"Param": [
						{
							"Caption": "sText",
							"DataType": "String",
							"Describe": "要判断编码的字符串",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "IsUtf8",
				"Remark": "判断是否为Utf-8编码",
				"Visible": true,
				"Keyword": true,
				"InsCode": "IsUtf8(\"要判断的字符串\")",
				"Templet": "command",
				"Help": {
					"Caption": "IsUtf8",
					"Define": "Result = IsUtf8(sText)",
					"Describe": "判断一个字符串是否使用 utf-8 编码",
					"RetType": "Boolean",
					"Return": "是 utf-8 编码的字符串则返回 true",
					"Param": [
						{
							"Caption": "sText",
							"DataType": "String",
							"Describe": "要判断编码的字符串",
							"Optional": false
						}
					]
				}
			}
		]
	},
	{
		"Caption": "System service",
		"Icon": "文件夹",
		"Visible": false,
		"Templet": "index",
		"Help": {
			"Caption": ""
		},
		"Child": [
		]
	},
	{
		"Caption": "Command line",
		"Icon": "文件夹",
		"Visible": true,
		"Templet": "index",
		"Help": {
			"Caption": ""
		},
		"Child": [
			{
				"Caption": "GetCommand",
				"Remark": "获取命令行",
				"Visible": true,
				"Keyword": true,
				"InsCode": "GetCommand(1)",
				"Templet": "command",
				"Help": {
					"Caption": "GetCommand",
					"Define": "sRet = GetCommand(Index)",
					"Describe": "获取命令行，命令行从 1 开始，存储着当前执行文件的完整路径，第 2 个命令行开始为真正的命令行序列",
					"RetType": "String",
					"Return": "返回命令行字符串",
					"Param": [
						{
							"Caption": "Index",
							"DataType": "Integer",
							"Describe": "要获取第几个命令行",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "CommandCount",
				"Remark": "命令行数量",
				"Visible": true,
				"Keyword": true,
				"InsCode": "CommandCount",
				"Templet": "command",
				"Help": {
					"Caption": "CommandCount",
					"Define": "iRet = CommandCount",
					"Describe": "获取命令行的数量",
					"RetType": "Integer",
					"Return": "返回命令行的数量",
					"Param": [
					]
				}
			},
			{
				"Caption": "GetCommandSep",
				"Remark": "获取命令行分隔符",
				"Visible": true,
				"Keyword": true,
				"InsCode": "GetCommandSep",
				"Templet": "command",
				"Help": {
					"Caption": "GetCommandSep",
					"Define": "sRet = GetCommandSep",
					"Describe": "获取命令行分隔符，默认分隔符使用：双引号、等号、空格、减法号。",
					"RetType": "String",
					"Return": "返回命令行分隔符",
					"Param": [
					]
				}
			},
			{
				"Caption": "SetCommandSep",
				"Remark": "设置命令行分隔符",
				"Visible": true,
				"Keyword": true,
				"InsCode": "SetCommandSep(\"_\")",
				"Templet": "command",
				"Help": {
					"Caption": "SetCommandSep",
					"Define": "sRet = SetCommandSep(sSep)",
					"Describe": "设置命令行分隔符，可以设置多个分隔符，设置后将会获取命令行时的命令行序列。",
					"RetType": "String",
					"Return": "返回之前的命令行分隔符",
					"Param": [
						{
							"Caption": "sSep",
							"DataType": "String",
							"Describe": "新的命令行分隔符",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "CommandPresent",
				"Remark": "查找命令行",
				"Visible": true,
				"Keyword": true,
				"InsCode": "CommandPresent(\"-t\")",
				"Templet": "command",
				"Help": {
					"Caption": "CommandPresent",
					"Define": "sRet = CommandPresent(sCommand)",
					"Describe": "查找命令行列表中是否出现指定的文本，找到则返回这个命令所在的位置索引（从 1 开始）。",
					"RetType": "Integer",
					"Return": "返回找到的命令行位置，如果没有找到，则返回 0",
					"Param": [
						{
							"Caption": "sCommand",
							"DataType": "String",
							"Describe": "要查找的命令行",
							"Optional": false
						}
					]
				}
			}
		]
	},
	{
		"Caption": "Other",
		"Icon": "文件夹",
		"Visible": true,
		"Templet": "index",
		"Help": {
			"Caption": ""
		},
		"Child": [
			{
				"Caption": "RGB",
				"Remark": "合并颜色分量为RGB值",
				"Visible": true,
				"Keyword": true,
				"InsCode": "RGB(255, 128, 0)",
				"Templet": "command",
				"Help": {
					"Caption": "RGB",
					"Define": "iRet = RGB(bRed, bGreen, bBlue)",
					"Describe": "根据 RGB 颜色分量获取颜色值",
					"RetType": "Integer",
					"Return": "返回得到的颜色值",
					"Param": [
						{
							"Caption": "bRed",
							"DataType": "Integer",
							"Describe": "红色分量",
							"Optional": false
						},
						{
							"Caption": "bGreen",
							"DataType": "Integer",
							"Describe": "绿色分量",
							"Optional": false
						},
						{
							"Caption": "bBlue",
							"DataType": "Integer",
							"Describe": "蓝色分量",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "BGR",
				"Remark": "合并颜色分量为BGR值",
				"Visible": true,
				"Keyword": true,
				"InsCode": "BGR(255, 128, 0)",
				"Templet": "command",
				"Help": {
					"Caption": "BGR",
					"Define": "iRet = BGR(bBlue, bGreen, bRed)",
					"Describe": "根据 BGR 颜色分量获取颜色值",
					"RetType": "Integer",
					"Return": "返回得到的颜色值",
					"Param": [
						{
							"Caption": "bBlue",
							"DataType": "Integer",
							"Describe": "蓝色分量",
							"Optional": false
						},
						{
							"Caption": "bGreen",
							"DataType": "Integer",
							"Describe": "绿色分量",
							"Optional": false
						},
						{
							"Caption": "bRed",
							"DataType": "Integer",
							"Describe": "红色分量",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "Sound_Play",
				"Remark": "播放声音",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Sound_Play(\"\")",
				"Templet": "command",
				"Help": {
					"Caption": "Sound_Play",
					"Define": "Sound_Play(sPath)",
					"Describe": "播放一个音频文件",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "sPath",
							"DataType": "String",
							"Describe": "音频文件路径",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "Beep",
				"Remark": "鸣笛",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Beep()",
				"Templet": "command",
				"Help": {
					"Caption": "Beep",
					"Define": "Beep([nTimes[, WaitMilliSecs]])",
					"Describe": "播放一阵短促的鸣笛声音",
					"RetType": "Null",
					"Return": "无",
					"Param": [
						{
							"Caption": "nTimes",
							"DataType": "Integer",
							"Describe": "鸣笛次数，默认为 1",
							"Optional": true
						},
						{
							"Caption": "WaitMilliSecs",
							"DataType": "Integer",
							"Describe": "鸣笛等待时间（毫秒），默认为 100",
							"Optional": true
						}
					]
				}
			},
			{
				"Caption": "MD5",
				"Remark": "MD5计算",
				"Visible": true,
				"Keyword": true,
				"InsCode": "MD5(\"要计算的字符串\")",
				"Templet": "command",
				"Help": {
					"Caption": "MD5",
					"Define": "sRet = MD5(sText)",
					"Describe": "计算一段字符串的MD5值（常用于非明文的正确性验证）",
					"RetType": "String",
					"Return": "返回字符串的 MD5 码",
					"Param": [
						{
							"Caption": "sText",
							"DataType": "String",
							"Describe": "要计算的字符串",
							"Optional": false
						}
					]
				}
			},
			{
				"Caption": "Hash",
				"Remark": "Hash计算",
				"Visible": true,
				"Keyword": true,
				"InsCode": "Hash(1, \"要计算的字符串\")",
				"Templet": "command",
				"Help": {
					"Caption": "Hash",
					"Define": "sRet = Hash(iType, sText[, iMaxValue])",
					"Describe": "计算一段字符串的 Hash 值（常用于索引）",
					"RetType": "Integer",
					"Return": "返回 Hash 值",
					"Param": [
						{
							"Caption": "iType",
							"DataType": "Integer",
							"Describe": "Hash 算法类型，支持 1 或 2 两种算法",
							"Optional": false
						},
						{
							"Caption": "sText",
							"DataType": "String",
							"Describe": "要计算的字符串",
							"Optional": false
						},
						{
							"Caption": "iMaxValue",
							"DataType": "Integer",
							"Describe": "Hash 值的最大范围，如果指定了这个参数，函数会将 Hash 值与这个参数进行 mod 运算后再返回",
							"Optional": true
						}
					]
				}
			}
		]
	}
]
