Uses "CONSOLE"

%Menu_Color_Normal     =  7
%Menu_Color_Highlight  = 46

%Menu_xStart      = 29
%Menu_yStart      =  5
%Menu_LineLen     = 30

'---Define an array to store manu items
dim MyMenu(10) as string

'---Set menu items. You can separate menu string and menu function calling using |
MyMenu( 1)  = "Getting Started|TestMyMenuFunction1"
MyMenu( 2)  = "Process 1"
MyMenu( 3)  = "Process 2"
MyMenu( 4)  = "Process 3"
MyMenu(10)  = "Quit"

'---Some screen preparation
console_printat("MAIN MENU"       , 71, 3, %Menu_Color_Normal)
console_printat("Help Main Menu"  , 29, 5, %Menu_Color_Normal)
console_printat(REPEAT$(14, "Í")  , 29, 6, %Menu_Color_Normal)

'---Print main menu
dim Count as long
for Count = 1 to ubound(MyMenu)
  Menu_Print(MyMenu(Count), Count, %Menu_Color_Normal)
next

'---Handle menu
Menu_Handle

'---Operation finished
console_cls
console_printat("Thank you very much. Press a key to end" , 1, 1, 14)
Console_WaitKey(0)

'-----------------------------------------------------------------------------
'---This is the main function that handle the menu
'---Add here what you need
'-----------------------------------------------------------------------------
function Menu_Handle()
  local sKey          as string
  local CurrentItem   as long
  local Finish        as long
  local FunctionName  as string

  '---First menu item highlighed
  CurrentItem = 1
  Menu_Print(MyMenu(CurrentItem), CurrentItem, %Menu_Color_HighLight)

  '---Loop until exit condition is verified
  WHILE Finish = %FALSE

    '---Read keyboard input
    sKey = Console_WaitKey(0)

    '---Write returned key just to see it
    console_printat(lset$(sKey, 20) , 1, 1, 7)

    '---Handle returned string
    select case sKey

      
      case "[UP]"
        '---Print current menu as normal
        Menu_Print(MyMenu(CurrentItem), CurrentItem, %Menu_Color_Normal)
        '---Decrement cursor
        decr CurrentItem
        if CurrentItem <= 0 then CurrentItem = ubound(MyMenu)
        '----Print current menu as highlighted
        Menu_Print(MyMenu(CurrentItem), CurrentItem, %Menu_Color_Highlight)
      case "[DOWN]"
        '---Print current menu as normal
        Menu_Print(MyMenu(CurrentItem), CurrentItem, %Menu_Color_Normal)
        '---Increment cursor
        incr CurrentItem
        if CurrentItem > ubound(MyMenu) then CurrentItem = 1
        '----Print current menu as highlighted
        Menu_Print(MyMenu(CurrentItem), CurrentItem, %Menu_Color_Highlight)
      case "[RETURN]"
        '---Here it is. User choose some action. By default latest items is exit
        '---But you can change this behave
        if CurrentItem = ubound(MyMenu) then Finish = %TRUE

        '---Action can be stored in menu text as second items separated by |
        FunctionName = trim$(parse$(MyMenu(CurrentItem), "|", 2))
        '---If not null then try to call dynamically the relevant function
        if function_exists(FunctionName) then
          call FunctionName
        end if
      case "[ESC]"
        Finish = %TRUE
    end select

  wend
end function

'-----------------------------------------------------------------------------
'---Used to print menu
'-----------------------------------------------------------------------------
function Menu_Print(sText as string, MenuItem as long, MenuColor as long) as long
  console_printat( _
                    format$(MenuItem, "00") & " - " & lset$(parse$(sText,"|",1), %Menu_LineLen), _
                    %Menu_xStart, _
                    %Menu_yStart + MenuItem, _
                    MenuColor)
end function

function TestMyMenuFunction1()
  msgbox 0, "Here I am!"
end function
 