'---
'---Loads needed modules
'---
uses "File"
uses "Console"
uses "Tokenizer"

'---
'---Declare needed variables
'---
dim MyBuffer        as string     '---Will contains string buffer to be parsed
dim CurrentPosition as long       '---Current buffer pointer position
dim TokenType       as long       '---Will contains current token type
dim Token           as string     '---Will contains current string token

dim T0, T1          as quad       '---Performance timing
dim nTokens         as quad       '---In order to count number of tokens found

'---
'---Script start
'---
printl "This script will load itself as a string buffer."
printl "Than will parse token by token giving back token type info"
printl "Press a key to start"
printl repeat$(70, "-")
waitkey

'---Start timer
T0 = gettickcount

'---Load this script into a string buffer
MyBuffer = file_load(app_sourcename)

'---Init current buffer position. THIS IS IMPORTANT
CurrentPosition = 1

'---Loops until token is end of buffer
while TokenType <> %TOKENIZER_FINISHED

  '---Here we are. Most important point here is that all passed parameters
  '   must be a single variable and not an expression. This is necessary because
  '   parameters are passed by reference in order to return information about token
  '---
  '   MyBuffer        must contains the string you want to parse
  '   CurrentPosition must be initialized to 1. After execution this parameter will contains
  '                   current position just after current token
  '   TokenType       on exit, it will contain the type of token found
  '   Token           on exit, it will contain the string representation of the token found
  Tokenizer_GetNextToken(MyBuffer, CurrentPosition, TokenType, Token)

  '---Write some info
  printl "Token found: " & Token & " (type: " & TokenType & ")"

  if TokenType = %TOKENIZER_DELIMITER and Token = "'" then
    Tokenizer_MoveToEol(MyBuffer, CurrentPosition)
  end if
  
  '---In order to count number of tokens found
  incr nTokens
wend
  
'---ENd timer
T1 = gettickcount

'---Give results
printl repeat$(70, "-")
printl "Operation performed in " & format$(T1 - T0) & " mSec"
printl "Number of Tokens found: " & nTokens

waitkey
