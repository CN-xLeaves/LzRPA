uses "EVAL"
uses "CONSOLE"

'---Some timing variable
dim t0, t1 as double = timer

'---This string will contain math function to eval
dim MyFunction as string

dim Result    as ext
dim EvalError as long

'---Define some function that have an error inside 
MyFunction = "cos(x) * 10 + 20 + NotDefinedVar"

'---Define a looper and its max
dim Count     as long
dim MaxCount  as long value 500


console_writeline("This example will evaluate the following formula:")
console_writeline("   " & MyFunction)
console_writeline("We added an error to the formula.")
console_writeline("This example shows how to trap an error and report error information.")
console_writeline(string$(79, "-"))
console_writeline("Press any key to continue")
console_writeline("")

console_waitkey

for Count = 1 to MaxCount

  '---Set X value
  Eval_SetNumber("x", Count)

  '---Eval_Math directly will evaluate MyFunction and will return result
  Result = Eval_math(MyFunction)

  '---Now check if an error is occurred
  EvalError = eval_errorclear

  '---Write some info output
  console_writeline(format$(Count, "0000") & " " & Result)

  '---If there was error ...
  if EvalError <> 0 then
    console_writeline("An error has occurred.")
    console_writeline("Error code       : " & EvalError)
    console_writeline("Error description: " & Eval_ErrorDescription(EvalError) )
    console_writeline("Error token      : " & Eval_ErrorGetToken )
    exit for
  end if
  
next 

'---Measure the ending time
t1 = timer

'---Final results    
Console_writeline("------------------------------------------------------")
Console_writeline("Total execution time for " & MaxCount & " loops: " & format$(t1-t0, "#0.00000"))

'---Stop execution
console_waitkey
