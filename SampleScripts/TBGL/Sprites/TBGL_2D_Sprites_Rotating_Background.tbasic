  '=============================================================================
  '=                                2D Sprites                                 =
  '=                        Rotating background example                        =
  '=                                                                           =
  '=                          Michael Hartlef, 2009                            =
  '=============================================================================


Uses "TBGL"
dim hWnd AS DWORD
dim FrameRate AS DOUBLE

FUNCTION TBMAIN()
  local sprBackGround, width, height as long
  local dirTextures       as string = "Textures\"
  %texBackground = 1
  
  ' -- Create and show window
  hWnd = TBGL_CreateWindowEx("TBGL 2D Sprite sample (rotating backgound) - press ESC to quit", 320, 240, 32, %TBGL_WS_WINDOWED or %TBGL_WS_CLOSEBOX)
  TBGL_ShowWindow 

  TBGL_GetWindowClient( hWnd, width, height )

  ' -- Load the background texture separately as we wan tto filter it. Looks better when we rotate a sprite  
  tbgl_LoadTexture (APP_SOURCEPATH + dirTextures + "background2.bmp"    , %texBackground , %TBGL_Tex_ANISO,16)
  ' -- Now create a sprite from the texture
  sprBackGround  = tbgl_SpriteCreate(%texBackground)

  ' -- Set a sprite event before each drawing. There we will automatically rotate the sprite
  TBGL_SpriteSetEvent(sprBackGround, %TBGL_OnBeforeDraw,"evOnDraw")
  
  ' -- Set some render states
  tbgl_uselighting %FALSE
  tbgl_useblend %FALSE

  TBGL_UseDepth %FALSE
  tbgl_UseTexture %TRUE
  TBGL_USEVSYNC %TRUE

  tbgl_UseAlphaTest %TRUE
  tbgl_AlphaFunc %tbGL_GREATER, 0.1

  ' -- Resets status of all keys 
  TBGL_ResetKeyState()
  ' -- Set the TBGL color to pure white, so colors of sprites are the same like in the texture
  tbgl_color 255,255,255
  tbgl_backColor 0, 0 ,0
      
  ' -- Now set the sprites position in the middle of the screen
  TBGL_SpriteSetPos(sprBackGround,width/2,height/2)
  
  ' -- And scale it to twice it's original size
  TBGL_SpriteSetScale(sprbackground,2.0)
      ' -- Main loop

  While TBGL_IsWindow(hWnd) 
    FrameRate = TBGL_GetFrameRate

    ' -- Set the render matrix to the window clients resolution
    TBGL_Rendermatrix2D (0,height,width,0)
    
    ' -- Not really important to clear a frame here as we draw a background anyway
    TBGL_ClearFrame
    
    ' -- With one command you draw all active sprites, even if it is just one :-)
    TBGL_SpritesDrawAll
    
    ' -- Flip the buffer so you see something on the screen
    TBGL_DrawFrame 

    ' -- ESCAPE key to exit application
    If TBGL_GetWindowKeyState(hWnd, %VK_ESCAPE) Then Exit While 
  Wend 

  ' -- Now let's clean up the memory
  TBGL_SpritesDeleteAll
  
  TBGL_DestroyWindow
END FUNCTION 


'==================================================================================
sub evOnDraw()
' -- This event function is called each time before a sprite is drawn
'==================================================================================
  local s as long
  ' -- Retrieve a handle to the sprite that has this event attached to
  s = TBGL_MeSprite
  ' -- Set the sprites angle relative from it's current angle
  TBGL_SpriteSetAngle(s,6.0/framerate,%TRUE)
end sub

