'
' Sphere physics demo
' Original PB code by Jordi Valles
' ThinBasic version by Petr Schreiber, started on 07-08-2008
' +Oxygenated version Charles Pegge 14 July 2008
' Elastic collisions 18 July 2008 (Glancing collisions)

#MINVERSION 1.6.0.10

randomize (1)

Uses "TBGL" 
Uses "MATH"
Uses "FILE"
Uses "OXYGEN"

dim vv,ww        as double
dim zones(256)   as long

dim gravity      as double  = 0.0
dim morphogen    as double  = 0.1    ' try 0.01 .. .25  :D
dim morphogen1   as double  = 0.0002 ' balloon expansion on collision
dim swidth       as double  = 60
dim sheight      as double  = 60
dim Energy       as double


dim ShpereDetail as long    = 24


Dim hWnd As Dword  = TBGL_CreateWindowEx("TBGL script - press ESC to quit",_
    640, 480, 32, %TBGL_WS_WINDOWED or %TBGL_WS_CLOSEBOX) 
TBGL_ShowWindow 



'===============
'TBGL initialise
'===============


TBGL_UseLighting %TRUE
TBGL_UseLightSource %GL_LIGHT0, %TRUE

tbgl_SetLightParameter %GL_LIGHT0, %TBGL_LIGHT_POSITION, 5, 10, 15, 1



'=========
'ball_init
'=========

   TYPE tBall
      x     AS DOUBLE     'X position
      y     AS DOUBLE     'Y position
      
      r     AS DOUBLE     'Radius
      
      vx    AS DOUBLE     ' x velocity
      vy    AS DOUBLE     ' y velocity
      
      ma    AS DOUBLE     ' mass
      zone  AS LONG       ' grid location
      id    AS LONG       ' identity number (=index)
      imp   AS byte       ' impact flag     
      red   AS byte       ' Color
      green AS byte
      blue  AS byte
   END TYPE
   
   global nBalls    as long = 1
   global Ball(1024) as tBall '1024 balloons max
'msgbox 0,sizeof tball '60
   
   
   nBalls = 1                  
   with Ball(1)            'first balloon   
     .r     = 2                         
     .x     = swidth/2                    
     .y     = Ball(1).r
     .ma    = 8 * 3.14159 * 4 / 3           
     .red   = rnd(128, 255)
     .green = rnd(128, 255)
     .blue  = rnd(128, 255)
   end with
   %Sphere = 1
   TBGL_SetPrimitiveQuality ShpereDetail           
   tbgl_NewList %Sphere
    tbgl_sphere 1
   tbgl_EndList
   
   global amotion as double = 2


'============
'Cage_Init
'============

  %Cage = 2
  tbgl_NewList %Cage
    TBGL_Color 192, 192, 192
    TBGL_BeginPoly %GL_QUADS
      tbgl_Normal      0,       0,  1
      tbgl_Vertex      0,       0, -2
      tbgl_Vertex swidth,       0, -2
      tbgl_Vertex swidth, sHeight, -2
      tbgl_Vertex      0, sHeight, -2
      
      tbgl_Normal 0, 1, 0
      tbgl_Vertex swidth,       0, -2
      tbgl_Vertex      0,       0, -2
      tbgl_Vertex      0,       0,  2
      tbgl_Vertex swidth,       0,  2
      
      tbgl_Normal      1,       0,  0
      tbgl_Vertex      0,       0, -2
      tbgl_Vertex      0, sHeight, -2
      tbgl_Vertex      0, sHeight,  2
      tbgl_Vertex      0,       0,  2

      tbgl_Normal      1,       0,  0
      tbgl_Vertex swidth,       0, -2
      tbgl_Vertex swidth, sHeight, -2
      tbgl_Vertex swidth, sHeight,  2
      tbgl_Vertex swidth,       0,  2      
      
    tbgl_EndPoly
  tbgl_EndList


'===========
'COMPILE O2H
'===========

  dim p0,p1 as long
  dim src as string
  Collider_Assemble()
  if o2_errno then
    msgbox 0,o2_error+$cr
    'file_save ("t.txt",o2_view(src))
    stop
  else
    o2_exec ' initialise
  end if
  '
  declare sub Collider_finish() at p0
  declare sub Collider_action() at p1
  


'======================
'Create and show window
'======================



DIM FrameRate AS DOUBLE

' -- Resets status of all keys 
dim t0, t1, t2 as long
dim Sheeps as long

HiResTimer_init


TBGL_ResetKeyState() 


'=========
'Main loop
'=========

While TBGL_IsWindow(hWnd) 
  doevents

  FrameRate = TBGL_GetFrameRate
  
  incr Sheeps
  
  if Sheeps > FrameRate then
    Sheeps = 0
    TBGL_SetWindowTitle(hWnd, _
    "Click to add spheres ( now"+STR$(nBalls)+")"+ _
     "   Energy, "+format$(Energy,"######.##"))
  end if  

  TBGL_ClearFrame 
  tbgl_Camera swidth/4,70,70,swidth/2,sheight/2,0
  '
  t0 = HiResTimer_Get / 1000
  '
  Collider_Action()
  '
  t1 = HiResTimer_Get / 1000    
  Ball_Render()
  t2 = HiResTimer_Get / 1000   
  '
  tbgl_CallList %Cage
  '
  tbgl_DrawFrame 
  
   'ESCAPE key to exit application
  
  If TBGL_GetWindowKeyState(hWnd, %VK_ESCAPE) Then Exit While 

  if TBGL_GetWindowKeystate(hWnd, %VK_space) Then Clicked()
  
  if TBGL_GetWindowKeyonce(hWnd, %VK_LBUTTON) Then 
    Clicked()
  elseif TBGL_GetWindowKeyonce(hWnd, %VK_RBUTTON) Then  
    if nBalls > 1 then decr nBalls
  end if  
  '
Wend
'
collider_finish()
TBGL_DestroyWindow
'
'File_Save ("t.txt",str$(vv)+"   "+str$(ww))



'¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
'¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤


FUNCTION BalloonsOverlap(BYVAL bX1 AS LONG, BYVAL bY1 AS LONG) AS LONG
   'Calculate if two balloons overlap when is inserted on pool.
   'Returns true (no overlap) or false (balloons overlap)
   LOCAL j, distance  AS LONG
   FUNCTION = %TRUE
   FOR j = 1 TO nBalls       'loop over existing balls
      IF NOT (ball(j).x = 0 AND ball(j).y = 0) THEN
         distance = SQR(((bX1-ball(j).x) ^2) + ((bY1-ball(j).y) ^2))
         IF distance >= ball(j).r*2 THEN
            iterate for
         ELSE
            FUNCTION = %FALSE
            EXIT FOR
         END IF
      END IF
   NEXT 
END FUNCTION

'¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤

Sub Ball_Render()
  local j as long
  FOR j = 1 TO nBalls
     tbgl_PushMatrix
       tbgl_Translate Ball(j).x, Ball(j).y, 0
       tbgl_Color Ball(j).red, Ball(j).green, Ball(j).blue
       TBGL_Scale Ball(j).r, Ball(j).r, Ball(j).r
       tbgl_CallList %Sphere 
     tbgl_PopMatrix
  NEXT 

end sub
 
'¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤

SUB Clicked()
  local x, y, z as double
  TBGL_GetPixelInfo tbgl_MouseGetPosX, tbgl_MouseGetPosY, %TBGL_PINFO_XYZ, x, y, z
  IF BalloonsOverlap(x, y) THEN
     if nballs< ubound(Ball) then INCR nBalls
     'IF nBalls > UBOUND(Ball) THEN REDIM PRESERVE Ball(nBalls+8) '+8 means some extra buffer to not redim for each ballon then
       
     with Ball(nBalls)            'first balloon   
       .r     = rndf(1.5,5)                        
       .x     = x               
       .y     = y
       .vx    = rndf(-0.2, 0.2)
       .vy    = rndf(-0.2, 0.2)
       .ma    = .r^3 * 3.14159 * 4/3
       .zone  = 0
       .id    = nBalls-1
       .imp   = 0
       .red   = rnd(128, 255)
       .green = rnd(128, 255)
       .blue  = rnd(128, 255)
     end with
   
  END IF

END SUB


'¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
'¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤



SUB Collider_Assemble()
global gi,gj as long
global sss as string

src="

  packed
  type Ball
  =========
  double  x,y
  double  r
  double  vx,vy
  double  ma
  long    zone
  long    id
  byte    imp
  byte    red,green,blue
  end type

 
  sub collider_action() link #p1
  ==============================

  static ball*  iball
  static ball*  jball
  static double gravity at #gravity
  static double energy  at #energy
  static long   nballs  at #nballs
  static double gmom,gmass
  static long   fac
  static long   i,j,k
 
  'population limits
  ==================

  def qty 35 
  if nballs>qty then nballs=qty
  if nballs<=1  then exit sub
  '
  'per frame
  '
  'clear the entropy regs
  '
  fac    = 10 ' slowdown factor
  gmass  = 0
  gmom   = 0
  'energy = 0
  @jball = #ball 'base of ball array
  for i=1 to nballs
    jball.x+=jball.vx
    jball.y+=jball.vy-gravity
    @iball=@jball
    call main_collider
    gmass+=jball.ma ' TOTAL MASS
    gmom=hypot(jball.vx, jball.vy)*jball.ma+gmom
    @jball+=sizeof ball 'next ball
  next
  'energy=gmom
  '
  exit sub
  '


  main_collider:
  ;=============

  k=i 'inner iterator 
  do
    '
    'TRAVERSE LIST OF BALLS
    -----------------------
    '
    k++
    if k>nballs
      call ball_container 'container boundary impacts
      jball.imp=0        'no  collisions
      ret                'finished collision tests for this jball
    end if               '
    @iball+=sizeof Ball  'next iball
    if call nocollision
      continue do
    end if
    if iball.imp
      'no interaction
    else
      call glancing_collision
      jball.imp=1
      iball.imp=1
    end if
    exit do
  end do
  ret

  nocollision:
  ============
  static double radsq,xdfsq,ydfsq
  radsq=jball.r+iball.r : radsq*=radsq
  xdfsq=jball.x-iball.x : xdfsq*=xdfsq
  ydfsq=jball.y-iball.y : ydfsq*=ydfsq
  =(xdfsq+ydfsq>radsq)
  ret


  def closingvelocity
  =================
  hypot(%1.vx-%2.vx, %1.vy-%2.vy)
  end def


  def ContactAngle
  =================
  atan(%1.x-%2.x, %1.y-%2.y)
  end def


  def MovementAngle
  ==================
  atan(%1.vx-%2.vx, %1.vy-%2.vy)
  end def


  def apportion_by_mass
  =====================
  'f=i/(j+i) apportion by mass
  fld qword %2.ma    : fld qword %1.ma
  fadd st(0),st(1) : fdivp st(1),st(0)
  end def

  def change_vel
  ==============
  ' Ball_v+=v*f
  fld st(0),st(0)
  fmul qword vx : fadd qword %1ball.vx : fstp qword %1ball.vx
  fmul qword vy : fadd qword %1ball.vy : fstp qword %1ball.vy
  end def

  glancing_collision:
  ===================
  '
  static double cVeloc, mAngle, cAngle, impact
  static double vx, vy, ppi, ppj
  '
  cveloc=ClosingVelocity iball jball
  cAngle=ContactAngle    jball iball
  vAngle=MovementAngle   iball jball
  impact=abs(cos(cAngle-mAngle))*cVeloc
  '
  fld qword cangle
  fsincos
  fmul qword impact
  fstp qword vx
  fmul qword impact
  fstp qword vy
energy=jball.imp
vx=iball.vx-jball.vx
vy=iball.vy-jball.vy
  'APPORTION MOVEMENT BY MASS
  ppm      =  jball.ma + iball.ma
  ppj      =  iball.ma / ppm
  ppi      =  1.0-ppj
  '
  jball.vx += ppj*vx*2.0
  jball.vy += ppj*vy*2.0
  iball.vx -= ppi*vx*2.0
  iball.vy -= ppi*vy*2.0
  '
  'limit_velocity ?
  ret  


  ball_container:
  ===============
  '
  'Collision against the walls                                                         '
  '
  static double size at #sheight
  static double px,py,mx,my,ps,ms
  ps =  size
  ms =  0.0
  px = jball.x+jball.r
  py = jball.y+jball.r
  mx = jball.x-jball.r
  my = jball.y-jball.r
  def r jball.r
  if  px > ps then jball.x = ps-r : jball.vx = -jball.vx
  if  py > ps then jball.y = ps-r : jball.vy = -jball.vy
  if  mx < ms then jball.x = ms+r : jball.vx = -jball.vx
  if  my < ms then jball.y = ms+r : jball.vy = -jball.vy
  ret

  
  end sub ; collider_action




  sub finish()  link #p0
  ======================
    terminate
  end sub

"

  'COMPILE
  '=======

  o2_basic src
  '
end sub 'collider

