'
' Sphere physics demo
' Original PB code by Jordi Valles
' ThinBasic version by Petr Schreiber, started on 07-08-2008
' +Oxygenated version Charles Pegge 14 July 2008
' Elastic collisions 18 July 2008 (Glancing collisions)

#MINVERSION 1.6.0.10

randomize (1)

Uses "TBGL" 
Uses "MATH"
Uses "FILE"
Uses "OXYGEN"

dim vv,ww        as double
dim zones(256)   as long

dim gravity      as double  = 0.0
dim morphogen    as double  = 0.1    ' try 0.01 .. .25  :D
dim morphogen1   as double  = 0.0002 ' balloon expansion on collision
dim swidth       as double  = 60
dim sheight      as double  = 60
dim Energy       as double


dim ShpereDetail as long    = 24


Dim hWnd As Dword  = TBGL_CreateWindowEx("TBGL script - press ESC to quit",_
    640, 480, 32, %TBGL_WS_WINDOWED or %TBGL_WS_CLOSEBOX) 
TBGL_ShowWindow 



'===============
'TBGL initialise
'===============


TBGL_UseLighting %TRUE
TBGL_UseLightSource %GL_LIGHT0, %TRUE

tbgl_SetLightParameter %GL_LIGHT0, %TBGL_LIGHT_POSITION, 5, 10, 15, 1



'=========
'ball_init
'=========

   TYPE tBall
      x     AS DOUBLE     'X position
      y     AS DOUBLE     'Y position
      
      r     AS DOUBLE     'Radius
      
      vx    AS DOUBLE     ' x velocity
      vy    AS DOUBLE     ' y velocity
      
      ma    AS DOUBLE     ' mass
      zone  AS LONG       ' grid location
      id    AS LONG       ' identity number (=index)
      imp   AS byte       ' impact flag     
      red   AS byte       ' Color
      green AS byte
      blue  AS byte
   END TYPE
   
   global nBalls    as long = 1
   global Ball(1024) as tBall '1024 balloons max
   
   
   nBalls = 1                  
   with Ball(1)            'first balloon   
     .r     = 2                         
     .x     = swidth/2                    
     .y     = Ball(1).r
     .ma    = 8 * 3.14159 * 4 / 3           
     .red   = rnd(128, 255)
     .green = rnd(128, 255)
     .blue  = rnd(128, 255)
   end with
   %Sphere = 1
   TBGL_SetPrimitiveQuality ShpereDetail           
   tbgl_NewList %Sphere
    tbgl_sphere 1
   tbgl_EndList
   
   global amotion as double = 2


'============
'Cage_Init
'============

  %Cage = 2
  tbgl_NewList %Cage
    TBGL_Color 192, 192, 192
    TBGL_BeginPoly %GL_QUADS
      tbgl_Normal      0,       0,  1
      tbgl_Vertex      0,       0, -2
      tbgl_Vertex swidth,       0, -2
      tbgl_Vertex swidth, sHeight, -2
      tbgl_Vertex      0, sHeight, -2
      
      tbgl_Normal 0, 1, 0
      tbgl_Vertex swidth,       0, -2
      tbgl_Vertex      0,       0, -2
      tbgl_Vertex      0,       0,  2
      tbgl_Vertex swidth,       0,  2
      
      tbgl_Normal      1,       0,  0
      tbgl_Vertex      0,       0, -2
      tbgl_Vertex      0, sHeight, -2
      tbgl_Vertex      0, sHeight,  2
      tbgl_Vertex      0,       0,  2

      tbgl_Normal      1,       0,  0
      tbgl_Vertex swidth,       0, -2
      tbgl_Vertex swidth, sHeight, -2
      tbgl_Vertex swidth, sHeight,  2
      tbgl_Vertex swidth,       0,  2      
      
    tbgl_EndPoly
  tbgl_EndList


'===========
'COMPILE O2H
'===========

  dim p0,p1 as long
  dim src as string
  Collider_Assemble()
  if len(o2_error) then
    msgbox 0,o2_error+$cr
    'file_save ("t.txt",o2_view(src))
    stop
  else
    o2_exec ' initialise
  end if
  '
  declare sub Collider_finish() at p0
  declare sub Collider_action() at p1
  


'======================
'Create and show window
'======================



DIM FrameRate AS DOUBLE

' -- Resets status of all keys 
dim t0, t1, t2 as long
dim Sheeps as long

HiResTimer_init


TBGL_ResetKeyState() 


'=========
'Main loop
'=========

While TBGL_IsWindow(hWnd) 
  doevents

  FrameRate = TBGL_GetFrameRate
  
  incr Sheeps
  
  if Sheeps > FrameRate then
    Sheeps = 0
    TBGL_SetWindowTitle(hWnd, _
    "Click to add spheres ( now"+STR$(nBalls)+")"+ _
     "   Energy, "+format$(Energy,"######.##"))
  end if  

  TBGL_ClearFrame 
  tbgl_Camera swidth/4,70,70,swidth/2,sheight/2,0
  '
  t0 = HiResTimer_Get / 1000
  '
  '----------------
  Collider_Action()
  '----------------
  '
  t1 = HiResTimer_Get / 1000    
  Ball_Render()
  t2 = HiResTimer_Get / 1000   
  '
  tbgl_CallList %Cage
  '
  tbgl_DrawFrame 
  
  '------------------------------
  'ESCAPE key to exit application
  '------------------------------
  
  If TBGL_GetWindowKeyState(hWnd, %VK_ESCAPE) Then Exit While 

  if TBGL_GetWindowKeystate(hWnd, %VK_space) Then Clicked()
  
  if TBGL_GetWindowKeyonce(hWnd, %VK_LBUTTON) Then 
    Clicked()
  elseif TBGL_GetWindowKeyonce(hWnd, %VK_RBUTTON) Then  
    if nBalls > 1 then decr nBalls
  end if  
  '
Wend
'
collider_finish()
TBGL_DestroyWindow
'
'File_Save ("t.txt",str$(vv)+"   "+str$(ww))



'¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
'¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤


FUNCTION BalloonsOverlap(BYVAL bX1 AS LONG, BYVAL bY1 AS LONG) AS LONG
   'Calculate if two balloons overlap when is inserted on pool.
   'Returns true (no overlap) or false (balloons overlap)
   LOCAL j, distance  AS LONG
   FUNCTION = %TRUE
   FOR j = 1 TO nBalls       'loop over existing balls
      IF NOT (ball(j).x = 0 AND ball(j).y = 0) THEN
         distance = SQR(((bX1-ball(j).x) ^2) + ((bY1-ball(j).y) ^2))
         IF distance >= ball(j).r*2 THEN
            iterate for
         ELSE
            FUNCTION = %FALSE
            EXIT FOR
         END IF
      END IF
   NEXT 
END FUNCTION

'¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤

Sub Ball_Render()
  local j as long
  FOR j = 1 TO nBalls
     tbgl_PushMatrix
       tbgl_Translate Ball(j).x, Ball(j).y, 0
       tbgl_Color Ball(j).red, Ball(j).green, Ball(j).blue
       TBGL_Scale Ball(j).r, Ball(j).r, Ball(j).r
       tbgl_CallList %Sphere 
     tbgl_PopMatrix
  NEXT 

end sub
 
'¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤

SUB Clicked()
  local x, y, z as double
  TBGL_GetPixelInfo tbgl_MouseGetPosX, tbgl_MouseGetPosY, %TBGL_PINFO_XYZ, x, y, z
  IF BalloonsOverlap(x, y) THEN
     if nballs< ubound(Ball) then INCR nBalls
     'IF nBalls > UBOUND(Ball) THEN REDIM PRESERVE Ball(nBalls+8) '+8 means some extra buffer to not redim for each ballon then
       
     with Ball(nBalls)            'first balloon   
       .r     = rndf(1.5,5)                        
       .x     = x               
       .y     = y
       .vx    = rndf(-0.2, 0.2)
       .vy    = rndf(-0.2, 0.2)
       .ma    = .r^3 * 3.14159 * 4/3
       .zone  = 0
       .id    = nBalls-1
       .imp   = 0
       .red   = rnd(128, 255)
       .green = rnd(128, 255)
       .blue  = rnd(128, 255)
     end with
   
  END IF

END SUB


'¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤
'¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤¤



SUB Collider_Assemble()
global gi,gj as long
global sss as string

src="

packed
type Ball
    x       as double
    y       as double
    r       as double
    vx      as double
    vy      as double
    ma      as double
    zone    as long
    id      as long
    imp     as byte
    red     as byte
    green   as byte
    blue    as byte
end type

 
sub collider_action() link #p1

  push ebx
  call fwd main
  pop ebx
  exit sub
  
  '====
  main:
  '====

  def jball_x   qword [eax]
  def iball_x   qword [edx]
  def jball_y   qword [eax+8]
  def iball_y   qword [edx+8]
  def jball_r   qword [eax+16] 
  def iball_r   qword [edx+16]
  def jball_vx  qword [eax+24]
  def iball_vx  qword [edx+24]
  def jball_vy  qword [eax+32]
  def iball_vy  qword [edx+32]
  def jball_ma  qword [eax+40]
  def iball_ma  qword [edx+40]

 
  static jball   at [eax]      as ball
  static iball   at [edx]      as ball
  static gravity at [#gravity] as double

  
  def jball_zone  [eax+48] ; dword
  def iball_zone  [edx+48] ; dword
  def jball_id  [eax+52]   ; dword
  def iball_id  [edx+52]   ; dword

  def jball_imp  byte  [eax+56]
  def iball_imp  byte  [edx+56]


 
 
  ;-----------------
  ; limit population
  ;-----------------
  static nballs as long
  '%qty = 35
  def qty 35 
  cmp [#nballs],qty
  (
   jle exit
   mov [#nballs],qty
  )

  mov eax,[#nballs]
  mov nballs,eax
  (
    cmp nballs,1
    jg exit
    ret
  )

  ;------------------
  collider_all_items:
  ;------------------

  ; per frame

  mov eax,#ball ' offset Ball
  mov ecx,0  
  ; clear the entropy regs
  ;
  static gmom,gmass as double
  static fac as long
  ;
  mov fac,10 ' slowdown factor
  gmass=0
  gmom=0
  fldz
  fstp qword [#energy]
  ;
  (
    ;UPDATE POSITION
    ;
    jball.x+=jball.vx
    jball.y+=jball.vy-gravity
    ;
    push eax
    push ecx
    mov edx,eax ; pointers to i & j balls
    call main_collider
    pop ecx
    pop eax
    call tally_state
    add eax,sizeof Ball
    inc ecx
    cmp ecx,nballs
    jl repeat
  )
  'call tally_state
  'call momentum_governor

  ret


  
  ;=============
  main_collider:
  ;=============

  (
    ;
    ;TRAVERSE LIST OF BALLS
    ;----------------------
    ;
    inc ecx : cmp ecx,nballs : jg exit
    mov jball_imp,0 ; clear the impact flag when none encountered
    add edx,sizeof Ball      ; next ball(i)
    ;
    ;IF NO COLLISION THEN TRY NEXT
    ;-----------------------------
    ;
    call check_for_collision : jae repeat 'CONTINUE IF NO IMPACT
    ;
    ;IF ALREADY IMPACTED THEN EXIT
    ;-----------------------------
    ;
    'cmp jball_imp,0 : jnz exit
    ;
    ;IF ALREADY IMPACTED THEN EXIT
    ;-----------------------------
    ;
    'cmp iball_imp,0 : jnz repeat
    ;
    ;SET IMPACT FLAG
    ;---------------
    ;
    'mov jball_imp,1
    ;
    ;PREVENT OBJECTS FROM FUSING TOGETHER
    ;------------------------------------
    ; 
    ;position immediately prior to impact
    ;
    jball.x-=jball.vx : jball.y-=jball.vy
    iball.x-=iball.vx : iball.y-=iball.vy
    ;
    ;WORK OUT COLLISION DYNAMICS
    ;---------------------------
    ;
    call glancing_collision
  )
  ;
  ;CHECK CONTAINER BOUNDARIES
  ;--------------------------
  ;
  gosub ball_container
  
  (
   cmp ecx,nballs : jle exit
   mov jball_imp,0 ; clear the impact flag when none encountered
  )
  ret ; end main collider

 
  ;-----------------
  macro pythag2(x,y)
  ;=================
    'hypot(x,y)
    fld qword x : fmul st(0),st(0)
    fld qword y : fmul st(0),st(0)
    faddp st(1),st(0) : fsqrt
  end macro

  ;-------------
  macro scale(a)
  ;=============
    fld  qword a : fmul st(0),st(1) : fstp qword a
  end macro


  ;-----------
  tally_state:
  ;===========
  '
  'system momentum: sum of each m*v
  '
  gmass+=jball.ma ' TOTAL MASS
  '
  fld  qword jball.vx : fmul st(0),st(0)
  fld  qword jball.vy : fmul  st(0),st(0)
  faddp st(1),st(0) : fmul  qword jball.ma
  fadd  qword [#energy] : fstp  qword [#energy]
  '
  pythag2 (jball.vx, jball.vy) : fmul jball_ma 
  fadd qword gmom : fstp qword gmom
  ret

  ;-----------------
  momentum_governor:
  ;=================

  (
    ; LIMIT OVERALL SYSTEM MOMENTUM
    ;
    fld qword  gmass : fidiv dword fac : fdiv qword gmom
    mov ecx,0
    mov eax,#Ball
    (
      inc ecx : cmp ecx,nballs : jg exit
      scale (jball.vx) : scale (jball.vy)
      add eax, sizeof ball : repeat
    )
    fcomp st(0),st(0) ; flush
  )
  ;
  ret


  ;-------------------
  check_for_collision:
  ;===================
  ;
  fld jball_r : fadd iball_r : fmul st(0),st(0)     ' SUM RADII THEN SQUARE
  fld   jball_x : fsub  iball_x : fmul  st(0),st(0) ' SQUARE X DIFF
  fld   jball_y : fsub  iball_y : fmul  st(0),st(0) ' SQUARE Y DIFF
  faddp st(1),st(0)                                 ' SUM SQUARES
  fcomip st(0),st(1) : fcomp st(0),st(0)            ' 
  ' IF ((Ball(j).x-Ball(i).x)^2 + (Ball(j).y-Ball(i).y)^2) < (Ball(j).r+Ball(i).r)^2 THEN
  ;
  ;
  ;prevent fusion
  ;--------------
  (
  jae exit 'NO COLLISION
  '...
  )
  ret


  def closing_veloc
    fld  %1ball_vy : fsub %2ball_vy : fst qword vy : fmul st(0),st(0) ; vy*vy
    fld  %1ball_vx : fsub %2ball_vx : fst qword vx : fmul st(0),st(0) ; vx*vx
    faddp st(1),st(0) : fsqrt
  end def


  def contact_angle
    fld  %1ball_y : fsub %2ball_y : fld  %1ball_x : fsub %2ball_x : fpatan
  end def


  def movement_angle
    fld  %1ball_vy : fsub %2ball_vy : fld  %1ball_vx : fsub %2ball_vx : fpatan
  end def


  def apportion_by_mass
    fld %2ball_ma : fld %1ball_ma : fadd st(0),st(1) : fdivp st(1),st(0) ; f=i/(j+i) apportion by mass
  end def

  def change_vel
    ; Ball_v+=v*f
    fld st(0),st(0)
    fmul qword vx : fadd %1ball_vx : fstp %1ball_vx
    fmul qword vy : fadd %1ball_vy : fstp %1ball_vy
  end def

  ;--------------
  limit_velocity:
  ;==============
  
  static as double limit=1
  '
  def limit_vel
  fld %2ball_v%1
  fld qword limit : fcomi st(0),st(1) 'UPPER LIMIT - V
  (
    jae exit ' WITHIN LIMIT
    fst %2ball_v%1  ' IMPOSE UPPER LIMIT
  )
  fchs : fcomi st(0),st(1) ' LOWER LIMIT - V
  (
    jbe exit ' WITHIN LIMIT
    fst %2ball_v%1 ' IMPOSE LOWER LIMIT
  )
  fcomp st(0),st(0) : fcomp st(0),st(0) ' flush
  end def 
  '
  limit_vel x i
  limit_vel y i
  limit_vel x j
  limit_vel y j
  ret


  ;==================
  glancing_collision:
  ;==================
  ;
  static vangle cangle impact vx vy vr as double
  ;
  closing_veloc i j : fstp qword vr     ;
  
  contact_angle   j i : fst qword  cangle ' contact angle
  movement_angle  i j : fst qword  vangle ' movement angle
  fsubp st(1),st(0)                       ' difference in angles
  fcos : fabs : fmul qword vr             ' radius of velocity vector
  fstp qword impact                       ' reducing factor due to off centre impact
                                          '
  fld qword cangle  : fsincos             ' split impact into x & y components

  fmul qword impact : fstp qword vx       ' x
  fmul qword impact : fstp qword vy       ' y
  ;
  ;APPORTION DEFLECTIONS TO EACH BODY
  ;---------------------------------
  ;
  apportion_by_mass j i : fadd st(0),st(0)        : change_vel j
  apportion_by_mass i j : fadd st(0),st(0) : fchs : change_vel i

  call limit_velocity
  
  ret  


  def container_size qword [#sheight] 
  def flush fcomp st(0),st(0)
  def boundary_limit
    fld jball_%1
    (
      fld jball_r : fcomip st(0),st(1) : jb exit
      jball.%1=jball.r
      jball.v%1=-jball.v%1
    )
    (
      fld %2 : fsub jball_r : fcomi st(0),st(1)
      ja exit
      fst qword jball.%1 : jball.v%1=-jball.v%1
    )
    flush : flush
  end def
  
  ;--------------
  ball_container:
  ;==============
  ;
  ;Collision against the walls                                                         '
  ;
###
  boundary_limit y container_size
###
  boundary_limit x container_size 
  ret
  
  
  end sub ; collider_action




  '---------------------
  sub finish()  link #p0
  '=====================
    terminate
  end sub




"

  '============
  'ASSEMBLE O2H
  '============

  'o2_buf 1
  'msgbox 0,o2_prep src
  o2_basic src
  '
end sub ' collider

 