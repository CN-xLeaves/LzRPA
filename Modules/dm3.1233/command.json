{
    "Caption": "dm3.1233",
    "Remark": "大漠插件",
    "ModuleName": "dm3.1233",
    "Icon": "公文包",
    "Visible": true,
    "Templet": "index",
    "Help": {
        "Caption": ""
    },
    "Child": [
        {
            "Caption": "单文件使用扩展库",
            "Icon": "信息",
            "Visible": true,
            "Templet": "document",
            "Help": {
                "Caption": "扩展库使用帮助",
                "Document": "在项目中使用扩展库功能会自动将扩展库引入项目，项目编译或运行时，自动加入扩展库依赖代码和文件。<br><br>如果您在单文件中希望使用本扩展库，则必须编写扩展库依赖代码才能调用扩展库中的函数，否则会报错，LzRPA 建议使用工程方式编写程序，但仍保留单文件使用扩展库的方法。<br><br>扩展库依赖代码：<br>&nbsp;&nbsp;#Include &quot;%APP_PATH%\\\\..\\\\Modules\\\\dm3.1233\\\\boot.tbs&quot;<br><br>建议将引用扩展库代码统一添加到全局代码块，也就是代码的最上面。<br><br>单文件使用 大漠插件 除了要引用扩展库文件外，还需要将 dm.dll 文件复制到生成的 exe 或脚本文件同一目录下，dm.dll 文件保存在软件安装目录下的 Modules\\\\dm3.1233 子目录内。"
            }
        },
        {
            "Caption": "创建大漠对象",
            "Icon": "文件",
            "Visible": true,
            "InsCode": "Dim dm As Object = CreateObject(\"dm.dmsoft\")",
            "Templet": "document",
            "Help": {
                "Caption": "创建大漠对象",
                "Document": "要使用大漠插件，必选先创建一个大漠插件对象，双击这条命令将创建大漠对象的代码添加到编辑器。<br><br>Dim dm As Object = CreateObject(\\\"dm.dmsoft\\\")"
            }
        },
        {
            "Caption": "释放大漠对象",
            "Icon": "文件",
            "Visible": true,
            "InsCode": "ReleaseObject(dm)",
            "Templet": "document",
            "Help": {
                "Caption": "释放大漠对象",
                "Document": "大漠插件不再使用后，应释放插件占用的资源，双击这条命令将释放大漠对象的代码添加到编辑器。<br><br>ReleaseObject(dm)"
            }
        },
        {
            "Caption": "绑定窗口",
            "Icon": "文件",
            "Visible": true,
            "InsCode": "dm.BindWindowEx(hWin, \"windows\", \"windows\", \"windows\", \"\", 0)",
            "Templet": "document",
            "Help": {
                "Caption": "绑定窗口",
                "Document": "大漠插件的很多功能必须先绑定窗口才能使用，这些操作将对绑定的窗口进行，双击这条命令将大漠对象绑定窗口的代码添加到编辑器。<br><br>dm.BindWindowEx(hWin, \\\"windows\\\", \\\"windows\\\", \\\"windows\\\", \\\"\\\", 0)"
            }
        },
        {
            "Caption": "BindWindow 参数说明",
            "Icon": "文件",
            "Visible": true,
            "Templet": "document",
            "Help": {
                "Caption": "BindWindow 参数说明",
                "Document": "display 字符串: 屏幕颜色获取方式 取值有以下几种<br><br>\\\"normal\\\" : 正常模式,平常我们用的前台截屏模式<br>\\\"gdi\\\" : gdi模式,用于窗口采用GDI方式刷新时. 此模式占用CPU较大.<br>\\\"gdi2\\\" : gdi2模式,此模式兼容性较强,但是速度比gdi模式要慢许多,如果gdi模式发现后台不刷新时,可以考虑用gdi2模式.<br>\\\"dx2\\\" : dx2模式,用于窗口采用dx模式刷新,如果dx方式会出现窗口所在进程崩溃的状况,可以考虑采用这种.采用这种方式要保证窗口有一部分在屏幕外.win7或者vista不需要移动也可后台.此模式占用CPU较大.<br>\\\"dx3\\\" : dx3模式,同dx2模式,但是如果发现有些窗口后台不刷新时,可以考虑用dx3模式,此模式比dx2模式慢许多. 此模式占用CPU较大.<br>\\\"dx\\\" : dx模式,等同于BindWindowEx中，display设置的\\\"dx.graphic.2d|dx.graphic.3d\\\",具体参考BindWindowEx<br>注意此模式需要管理员权限<br><br><br>mouse 字符串: 鼠标仿真模式 取值有以下几种<br><br>\\\"normal\\\" : 正常模式,平常我们用的前台鼠标模式<br>\\\"windows\\\": Windows模式,采取模拟windows消息方式 同按键自带后台插件.<br>\\\"windows2\\\": Windows2 模式,采取模拟windows消息方式(锁定鼠标位置) 此模式等同于BindWindowEx中的mouse为以下组合<br>\\\"dx.mouse.position.lock.api|dx.mouse.position.lock.message|dx.mouse.state.message\\\"<br>注意此模式需要管理员权限<br>\\\"windows3\\\": Windows3模式，采取模拟windows消息方式,可以支持有多个子窗口的窗口后台.<br>\\\"dx\\\": dx模式,采用模拟dx后台鼠标模式,这种方式会锁定鼠标输入.有些窗口在此模式下绑定时，需要先激活窗口再绑定(或者绑定以后激活)，否则可能会出现绑定后鼠标无效的情况.此模式等同于BindWindowEx中的mouse为以下组合<br>\\\"dx.public.active.api|dx.public.active.message|dx.mouse.position.lock.api|dx.mouse.position.lock.message|dx.mouse.state.api|dx.mouse.state.message|dx.mouse.api|dx.mouse.focus.input.api|dx.mouse.focus.input.message|dx.mouse.clip.lock.api|dx.mouse.input.lock.api|dx.mouse.cursor\\\"<br>注意此模式需要管理员权限<br>\\\"dx2\\\"：dx2模式,这种方式类似于dx模式,但是不会锁定外部鼠标输入.<br>有些窗口在此模式下绑定时，需要先激活窗口再绑定(或者绑定以后手动激活)，否则可能会出现绑定后鼠标无效的情况. 此模式等同于BindWindowEx中的mouse为以下组合<br>\\\"dx.public.active.api|dx.public.active.message|dx.mouse.position.lock.api|dx.mouse.state.api|dx.mouse.api|dx.mouse.focus.input.api|dx.mouse.focus.input.message|dx.mouse.clip.lock.api|dx.mouse.input.lock.api| dx.mouse.cursor\\\"<br>注意此模式需要管理员权限<br><br><br>keypad 字符串: 键盘仿真模式 取值有以下几种<br><br>\\\"normal\\\" : 正常模式,平常我们用的前台键盘模式<br>\\\"windows\\\": Windows模式,采取模拟windows消息方式 同按键的后台插件.<br>\\\"dx\\\": dx模式,采用模拟dx后台键盘模式。有些窗口在此模式下绑定时，需要先激活窗口再绑定(或者绑定以后激活)，否则可能会出现绑定后键盘无效的情况. 此模式等同于BindWindowEx中的keypad为以下组合<br>\\\"dx.public.active.api|dx.public.active.message| dx.keypad.state.api|dx.keypad.api|dx.keypad.input.lock.api\\\"<br>注意此模式需要管理员权限<br><br><br>mode 整形数: 模式。 取值有以下两种<br><br>0 : 推荐模式此模式比较通用，而且后台效果是最好的.<br>1 : 和模式0效果一样，如果模式0会失败时，可以尝试此模式. <收费功能，具体详情点击查看><br>2 : 同模式0,此模式为老的模式0,尽量不要用此模式，除非有兼容性问题.<br>3 : 同模式1,此模式为老的模式1,尽量不要用此模式，除非有兼容性问题. <收费功能，具体详情点击查看><br>4 : 同模式0,如果模式0有崩溃问题，可以尝试此模式.<br>5 : 同模式1, 如果模式0有崩溃问题，可以尝试此模式. <收费功能，具体详情点击查看><br>6 : 同模式0，如果模式0有崩溃问题，可以尝试此模式. <收费功能，具体详情点击查看><br>7 : 同模式1，如果模式1有崩溃问题，可以尝试此模式. <收费功能，具体详情点击查看><br>101 : 超级绑定模式. 可隐藏目标进程中的dm.dll.避免被恶意检测.效果要比dx.public.hide.dll好. 推荐使用. <收费功能，具体详情点击查看><br>103 : 同模式101，如果模式101有崩溃问题，可以尝试此模式. <收费功能，具体详情点击查看><br>需要注意的是: 模式1 3 5 7 101 103在大部分窗口下绑定都没问题。但也有少数特殊的窗口，比如有很多子窗口的窗口，对于这种窗口，在绑定时，一定要把<br>鼠标指向一个可以输入文字的窗口，比如一个文本框，最好能激活这个文本框，这样可以保证绑定的成功.<br><br><br>注意:<br><br>绑定之后,所有的坐标都相对于窗口的客户区坐标(不包含窗口边框)<br>另外,绑定窗口后,必须加以下代码,以保证所有资源正常释放<br>另外 绑定dx会比较耗时间,请不要频繁调用此函数.<br>另外如果绑定的是dx,要注意不可连续操作dx,中间至少加个10MS的延时,否则可能会导致操作失败.比如绑定图色DX,那么不要连续取色等,键鼠也是一样.<br>注意,图色dx,鼠标windows2 dx dx2以及键盘dx都需要管理员权限才能运行,所以对于WIN7和VISTA用户,在启动目标窗口时,必须用管理员方式启动,否则无法绑定成功！<br>还有一点特别要注意的是,有些窗口绑定之后必须加一定的延时,否则后台也无效.一般1秒到2秒的延时就足够.<br>发现绑定失败的几种可能(一般是需要管理员权限的模式才有可能会失败)<br><br>1.     系统登录的帐号必须有Administrators权限<br><br>2.     如果是vista和win7系统，启动窗口进程必须用管理员模式启动，脚本也必须用管理员模式启动.<br><br>3.     一些防火墙会防止插件注入窗口所在进程，比如360防火墙等，必须把dm.dll设置为信任.<br><br>4.     还有一个比较弱智的可能性，那就是插件没有注册到系统中，这时CreateObject压根就是失败的. 检测对象是否创建成功很简单，如下代码：<br>Dim dm As Object = CreateObject(\\\"dm.dmsoft\\\")<br>Dim ver As String = dm.Ver()<br>If ver = \\\"\\\" Then<br>    MsgBox \\\"创建对象失败,检查大漠插件是否已注册\\\"<br>End If<br><br>5.     在沙盘中开的窗口进程，绑定一些需要管理员权限的模式，会失败。<br>解决方法是要配置沙盘参数，具体如何配置参考沙盘绑定方法.<br><br>6.     窗口所在进程有保护，这个我也无能为力."
            }
        },
        {
            "Caption": "BindWindowEx 参数说明",
            "Icon": "文件",
            "Visible": true,
            "Templet": "document",
            "Help": {
                "Caption": "BindWindowEx 参数说明",
                "Document": "display 字符串: 屏幕颜色获取方式 取值有以下几种<br><br>\\\"normal\\\" : 正常模式,平常我们用的前台截屏模式<br>\\\"gdi\\\" : gdi模式,用于窗口采用GDI方式刷新时. 此模式占用CPU较大.<br>\\\"gdi2\\\" : gdi2模式,此模式兼容性较强,但是速度比gdi模式要慢许多,如果gdi模式发现后台不刷新时,可以考虑用gdi2模式.<br>\\\"dx2\\\" : dx2模式,用于窗口采用dx模式刷新,如果dx方式会出现窗口进程崩溃的状况,可以考虑采用这种.采用这种方式要保证窗口有一部分在屏幕外.win7或者vista不需要移动也可后台. 此模式占用CPU较大.<br>\\\"dx3\\\" : dx3模式,同dx2模式,但是如果发现有些窗口后台不刷新时,可以考虑用dx3模式,此模式比dx2模式慢许多. 此模式占用CPU较大.<br>dx模式,用于窗口采用dx模式刷新,取值可以是以下任意组合，组合采用\\\"|\\\"符号进行连接  注意此模式需要管理员权限. 支持BindWindow中的缩写模式. 比如dx代表\\\" dx.graphic.2d| dx.graphic.3d\\\"<br>1. \\\"dx.graphic.2d\\\"  2d窗口的dx图色模式  <br>2. \\\"dx.graphic.2d.2\\\"  2d窗口的dx图色模式  是dx.graphic.2d的增强模式.兼容性更好. <收费功能，具体详情点击查看><br>3. \\\"dx.graphic.3d\\\"  3d窗口的dx图色模式,注意采用这个模式，必须关闭窗口3D视频设置的全屏抗锯齿选项.<br>4. \\\"dx.graphic.3d.8\\\"  3d窗口的dx8图色模式,注意采用这个模式，必须关闭窗口3D视频设置的全屏抗锯齿选项. 这个模式支持某些老的引擎. <收费功能，具体详情点击查看><br><br><br>mouse 字符串: 鼠标仿真模式 取值有以下几种<br><br>\\\"normal\\\" : 正常模式,平常我们用的前台鼠标模式<br>\\\"windows\\\": Windows模式,采取模拟windows消息方式 同按键的后台插件.<br>\\\"windows3\\\": Windows3模式，采取模拟windows消息方式,可以支持有多个子窗口的窗口后台<br>dx模式,取值可以是以下任意组合. 组合采用\\\"|\\\"符号进行连接 注意此模式需要管理员权限.支持BindWindow中的缩写模式,比如windows2代表\\\"dx.mouse.position.lock.api|dx.mouse.position.lock.message|dx.mouse.state.message\\\"<br>1. \\\"dx.mouse.position.lock.api\\\"  此模式表示通过封锁系统API，来锁定鼠标位置.<br>2. \\\"dx.mouse.position.lock.message\\\" 此模式表示通过封锁系统消息，来锁定鼠标位置.<br>3. \\\"dx.mouse.focus.input.api\\\" 此模式表示通过封锁系统API来锁定鼠标输入焦点.<br>4. \\\"dx.mouse.focus.input.message\\\"此模式表示通过封锁系统消息来锁定鼠标输入焦点.<br>5. \\\"dx.mouse.clip.lock.api\\\" 此模式表示通过封锁系统API来锁定刷新区域。注意，使用这个模式，在绑定前，必须要让窗口完全显示出来.<br>6. \\\"dx.mouse.input.lock.api\\\" 此模式表示通过封锁系统API来锁定鼠标输入接口.<br>7. \\\"dx.mouse.state.api\\\" 此模式表示通过封锁系统API来锁定鼠标输入状态.<br>8. \\\"dx.mouse.state.message\\\" 此模式表示通过封锁系统消息来锁定鼠标输入状态.<br>9. \\\"dx.mouse.api\\\"  此模式表示通过封锁系统API来模拟dx鼠标输入.<br>10. \\\"dx.mouse.cursor\\\"  开启此模式，可以后台获取鼠标特征码. <收费功能，具体详情点击查看><br>11. \\\"dx.mouse.raw.input\\\"  有些窗口需要这个才可以正常操作鼠标. <收费功能，具体详情点击查看><br>12. \\\"dx.mouse.input.lock.api2\\\"  部分窗口在后台操作时，前台鼠标会移动,需要这个属性. <收费功能，具体详情点击查看><br>13. \\\"dx.mouse.input.lock.api3\\\"  部分窗口在后台操作时，前台鼠标会移动,需要这个属性. <收费功能，具体详情点击查看><br><br><br>keypad 字符串: 键盘仿真模式 取值有以下几种<br><br>\\\"normal\\\" : 正常模式,平常我们用的前台键盘模式<br>\\\"windows\\\": Windows模式,采取模拟windows消息方式 同按键的后台插件.<br>dx模式,取值可以是以下任意组合. 组合采用\\\"|\\\"符号进行连接 注意此模式需要管理员权限.支持BindWindow中的缩写模式.比如dx代表\\\" dx.public.active.api|dx.public.active.message| dx.keypad.state.api|dx.keypad.api|dx.keypad.input.lock.api\\\"<br>1. \\\"dx.keypad.input.lock.api\\\" 此模式表示通过封锁系统API来锁定键盘输入接口.<br>2. \\\"dx.keypad.state.api\\\" 此模式表示通过封锁系统API来锁定键盘输入状态.<br>3. \\\"dx.keypad.api\\\" 此模式表示通过封锁系统API来模拟dx键盘输入. <br>4. \\\"dx.keypad.raw.input\\\"  有些窗口需要这个才可以正常操作键盘. <收费功能，具体详情点击查看><br><br><br>public 字符串: 公共属性 dx模式共有  注意以下列表中,前面打五角星的表示需要管理员权限<br><br>取值可以是以下任意组合. 组合采用\\\"|\\\"符号进行连接 这个值可以为空<br>1. ★ \\\"dx.public.active.api\\\" 此模式表示通过封锁系统API来锁定窗口激活状态.  注意，部分窗口在此模式下会耗费大量资源慎用. <br>2. ★ \\\"dx.public.active.message\\\" 此模式表示通过封锁系统消息来锁定窗口激活状态.  注意，部分窗口在此模式下会耗费大量资源 慎用. 另外如果要让此模式生效，必须在绑定前，让绑定窗口处于激活状态,否则此模式将失效. 比如dm.SetWindowState hwnd,1 然后再绑定.<br>3.    \\\"dx.public.disable.window.position\\\" 此模式将锁定绑定窗口位置.不可与\\\"dx.public.fake.window.min\\\"共用.<br>4.    \\\"dx.public.disable.window.size\\\" 此模式将锁定绑定窗口,禁止改变大小. 不可与\\\"dx.public.fake.window.min\\\"共用.<br>5.    \\\"dx.public.disable.window.minmax\\\" 此模式将禁止窗口最大化和最小化,但是付出的代价是窗口同时也会被置顶. 不可与\\\"dx.public.fake.window.min\\\"共用.<br>6.    \\\"dx.public.fake.window.min\\\" 此模式将允许目标窗口在最小化状态时，仍然能够像非最小化一样操作.. 另注意，此模式会导致任务栏顺序重排，所以如果是多开模式下，会看起来比较混乱，建议单开使用，多开不建议使用. <收费功能，具体详情点击查看><br>7.    \\\"dx.public.hide.dll\\\" 此模式将会隐藏目标进程的大漠插件，避免被检测..另外使用此模式前，请仔细做过测试，此模式可能会造成目标进程不稳定，出现崩溃。<收费功能，具体详情点击查看><br>8. ★ \\\"dx.public.active.api2\\\" 此模式表示通过封锁系统API来锁定窗口激活状态. 部分窗口遮挡无法后台,需要这个属性. <收费功能，具体详情点击查看><br>9. ★ \\\"dx.public.input.ime\\\" 此模式是配合SendStringIme使用. 具体可以查看SendStringIme接口. <收费功能，具体详情点击查看><br>10 ★ \\\"dx.public.graphic.protect\\\" 此模式可以保护dx图色不被恶意检测.同时对dx.keypad.api和dx.mouse.api也有保护效果. <收费功能，具体详情点击查看><br>11 ★ \\\"dx.public.disable.window.show\\\" 禁止目标窗口显示,这个一般用来配合dx.public.fake.window.min来使用. <收费功能，具体详情点击查看><br>12 ★ \\\"dx.public.anti.api\\\" 此模式可以突破部分窗口对后台的保护. <收费功能，具体详情点击查看><br>13 ★ \\\"dx.public.memory\\\" 此模式可以让内存读写函数突破保护.只要绑定成功即可操作内存函数. <收费功能，具体详情点击查看><br>14 ★ \\\"dx.public.km.protect\\\" 此模式可以保护dx键鼠不被恶意检测.最好配合dx.public.anti.api一起使用. 此属性可能会导致部分后台功能失效. <收费功能，具体详情点击查看><br>15    \\\"dx.public.prevent.block\\\"  绑定模式1 3 5 7 101 103下，可能会导致部分窗口卡死. 这个属性可以避免卡死. <收费功能，具体详情点击查看><br>16    \\\"dx.public.ori.proc\\\"  此属性只能用在模式0 1 2 3和101下. 有些窗口在不同的界面下(比如登录界面和登录进以后的界面)，键鼠的控制效果不相同. 那可以用这个属性来尝试让保持一致. 注意的是，这个属性不可以滥用，确保测试无问题才可以使用. 否则可能会导致后台失效. <收费功能，具体详情点击查看><br><br><br>mode 整形数: 模式。 取值有以下两种<br><br>0 : 推荐模式,此模式比较通用，而且后台效果是最好的.<br>1 : 和模式0效果一样，如果模式0会失败时，可以尝试此模式, <收费功能，具体详情点击查看>. <br>2 : 同模式0,此模式为老的模式0,尽量不要用此模式，除非有兼容性问题.<br>3 : 同模式1,此模式为老的模式1,尽量不要用此模式，除非有兼容性问题. <收费功能，具体详情点击查看><br>4 : 同模式0,如果模式0有崩溃问题，可以尝试此模式.<br>5 : 同模式1, 如果模式0有崩溃问题，可以尝试此模式. <收费功能，具体详情点击查看><br>6 : 同模式0，如果模式0有崩溃问题，可以尝试此模式. <收费功能，具体详情点击查看>.<br>7 : 模式1，如果模式1有崩溃问题，可以尝试此模式. <收费功能，具体详情点击查看>.<br>101 : 超级绑定模式. 可隐藏目标进程中的dm.dll.避免被恶意检测.效果要比dx.public.hide.dll好. 推荐使用. <收费功能，具体详情点击查看><br>103 : 同模式101，如果模式101有崩溃问题，可以尝试此模式. <收费功能，具体详情点击查看><br>需要注意的是: 模式1 3 5 7 101 103在大部分窗口下绑定都没问题。但也有少数特殊的窗口，比如有很多子窗口的窗口，对于这种窗口，在绑定时，一定要把鼠标指向一个可以输入文字的窗口，比如一个文本框，最好能激活这个文本框，这样可以保证绑定的成功.<br><br><br>注意:<br><br>绑定之后,所有的坐标都相对于窗口的客户区坐标(不包含窗口边框)<br>另外,绑定窗口后,必须加以下代码,以保证所有资源正常释放<br>另外 绑定dx会比较耗时间,请不要频繁调用此函数.<br>另外如果绑定的是dx,要注意不可连续操作dx,中间至少加个10MS的延时,否则可能会导致操作失败.比如绑定图色DX,那么不要连续取色等,键鼠也是一样.<br>注意,需要组合的模式,都需要管理员权限才能运行,所以对于WIN7和VISTA用户,在启动窗口进程时,必须用管理员方式启动,否则无法绑定成功！<br>还有一点特别要注意的是,有些窗口绑定之后必须加一定的延时,否则后台也无效.一般1秒到2秒的延时就足够.<br>发现绑定失败的几种可能(一般是需要管理员权限的模式才有可能会失败)<br><br>1.     系统登录的帐号必须有Administrators权限<br><br>2.     如果是vista和win7系统，启动窗口进程必须用管理员模式启动，脚本也必须用管理员模式启动.<br><br>3.     一些防火墙会防止插件注入窗口所在进程，比如360防火墙等，必须把dm.dll设置为信任.<br><br>4.     还有一个比较弱智的可能性，那就是插件没有注册到系统中，这时CreateObject压根就是失败的. 检测对象是否创建成功很简单，如下代码<br>Dim dm As Object = CreateObject(\\\"dm.dmsoft\\\")<br>Dim ver As String = dm.Ver()<br>If ver = \\\"\\\" Then<br>MsgBox \\\"创建对象失败,检查大漠插件是否已注册\\\"<br>End If<br><br>5.     在沙盘中开的窗口，绑定一些需要管理员权限的模式，会失败。<br>解决方法是要配置沙盘参数，参考如何配置沙盘参数.<br><br>6.     窗口所在进程有保护，这个我也无能为力."
            }
        },
        {
            "Caption": "键码对应表",
            "Icon": "文件",
            "Visible": true,
            "Templet": "document",
            "Help": {
                "Caption": "键码对应表",
                "Document": "1 对应 49<br>2 对应 50<br> 3 对应 51<br>4 对应 52<br>5 对应 53<br>6 对应 54<br>7 对应 55<br>8 对应 56<br>9 对应 57<br>0 对应 48<br>- 对应 189<br>= 对应 187<br>back 对应 8<br><br>a 对应 65<br>b 对应 66<br>c 对应 67<br>d 对应 68<br>e 对应 69<br>f 对应 70<br>g 对应 71<br>h 对应 72<br>i 对应 73<br>j 对应 74<br>k 对应 75<br>l 对应 76<br>m 对应 77<br>n 对应 78<br>o 对应 79<br>p 对应 80<br>q 对应 81<br>r 对应 82<br>s 对应 83<br>t 对应 84<br>u 对应 85<br>v 对应 86<br>w 对应 87<br>x 对应 88<br>y 对应 89<br>z 对应 90<br><br>ctrl 对应 17<br>alt 对应 18<br>shift 对应 19<br>win 对应 91<br>space 对应 32<br>cap 对应 20<br>tab 对应 9<br>~ 对应 192<br>esc 对应 27<br>enter 对应 13<br><br>up 对应 38<br>down 对应 40<br>left 对应 37<br>right 对应 39<br><br>option 对应 93<br><br>print 对应 44<br>delete 对应 46<br>home 对应 36<br>end 对应 35<br>pgup 对应 33<br>pgdn 对应 34<br><br>f1 对应 112<br>f2 对应 113<br>f3 对应 114<br>f4 对应 115<br>f5 对应 116<br>f6 对应 117<br>f7 对应 118<br>f8 对应 119<br>f9 对应 120<br>f10 对应 121<br>f11 对应 122<br>f12 对应 123<br><br>[ 对应 219<br>] 对应 221<br>\\\\ 对应 220<br>; 对应 186<br>\\&apos; 对应 222<br>, 对应 188<br>. 对应 190<br>/ 对应 191"
            }
        },
        {
            "Caption": "键盘鼠标模拟",
            "Icon": "文件夹",
            "Visible": true,
            "Templet": "index",
            "Help": {
                "Caption": ""
            },
            "Child": [
                {
                    "Caption": "MoveTo",
                    "Remark": "移动鼠标",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.MoveTo(0, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "MoveTo",
                        "Define": "iRet = MoveTo(x, y)",
                        "Describe": "把鼠标移动到目的点 (x, y)",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "x",
                                "DataType": "Integer",
                                "Describe": "X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y",
                                "DataType": "Integer",
                                "Describe": "Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "MoveR",
                    "Remark": "相对位置移动鼠标",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.MoveR(0, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "MoveR",
                        "Define": "iRet = MoveR(rx, ry)",
                        "Describe": "鼠标相对于上次的位置移动 rx, ry",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "rx",
                                "DataType": "Integer",
                                "Describe": "相对于上次的X偏移",
                                "Optional": false
                            },
                            {
                                "Caption": "ry",
                                "DataType": "Integer",
                                "Describe": "相对于上次的Y偏移",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "MoveToEx",
                    "Remark": "移动鼠标到随机坐标",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.MoveToEx(100, 100, 10, 10)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "MoveToEx",
                        "Define": "sRet = MoveToEx(x, y, w, h)",
                        "Describe": "把鼠标移动到目的范围内的任意一点",
                        "RetType": "String",
                        "Return": "字符串 : 返回要移动到的目标点. 格式为x,y.  比如 MoveToEx 100, 100, 10, 10 返回值可能是 101, 102",
                        "Param": [
                            {
                                "Caption": "x",
                                "DataType": "Integer",
                                "Describe": "X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y",
                                "DataType": "Integer",
                                "Describe": "Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "w",
                                "DataType": "Integer",
                                "Describe": "宽度(从x计算起)",
                                "Optional": false
                            },
                            {
                                "Caption": "h",
                                "DataType": "Integer",
                                "Describe": "高度(从y计算起)",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "LeftClick",
                    "Remark": "点击鼠标左键",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.LeftClick()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "LeftClick",
                        "Define": "iRet = LeftClick()",
                        "Describe": "点击鼠标左键",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "LeftDoubleClick",
                    "Remark": "双击鼠标左键",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.LeftDoubleClick()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "LeftDoubleClick",
                        "Define": "iRet = LeftDoubleClick()",
                        "Describe": "双击鼠标左键",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "LeftDown",
                    "Remark": "按下鼠标左键",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.LeftDown()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "LeftDown",
                        "Define": "iRet = LeftDown()",
                        "Describe": "按下鼠标左键",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "LeftUp",
                    "Remark": "弹起鼠标左键",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.LeftUp()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "LeftUp",
                        "Define": "iRet = LeftUp()",
                        "Describe": "弹起鼠标左键",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "RightClick",
                    "Remark": "点击鼠标右键",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.RightClick()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "RightClick",
                        "Define": "iRet = RightClick()",
                        "Describe": "点击鼠标右键",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "RightDown",
                    "Remark": "按下鼠标右键",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.RightDown()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "RightDown",
                        "Define": "iRet = RightDown()",
                        "Describe": "按下鼠标右键",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "RightUp",
                    "Remark": "弹起鼠标右键",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.RightUp()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "RightUp",
                        "Define": "iRet = RightUp()",
                        "Describe": "弹起鼠标右键",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "MiddleClick",
                    "Remark": "点击鼠标中键",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.MiddleClick()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "MiddleClick",
                        "Define": "iRet = MiddleClick()",
                        "Describe": "点击鼠标中键",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "WheelDown",
                    "Remark": "鼠标滚轮向下滚",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.WheelDown()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "WheelDown",
                        "Define": "iRet = WheelDown()",
                        "Describe": "鼠标滚轮向下滚",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "WheelUp",
                    "Remark": "鼠标滚轮向上滚",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.WheelUp()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "WheelUp",
                        "Define": "iRet = WheelUp()",
                        "Describe": "鼠标滚轮向上滚",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "GetCursorPos",
                    "Remark": "获取鼠标位置 [无法使用，LzRPA获取不到形参]",
                    "Visible": false,
                    "Keyword": true,
                    "InsCode": "Dim As Long x, y\ndm.GetCursorPos(x, y)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetCursorPos",
                        "Define": "iRet = GetCursorPos(x, y)",
                        "Describe": "获取鼠标位置",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "x",
                                "DataType": "Integer",
                                "Describe": "返回X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y",
                                "DataType": "Integer",
                                "Describe": "返回Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetCursorShape",
                    "Remark": "获取鼠标特征码",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetCursorShape()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetCursorShape",
                        "Define": "iRet = GetCursorShape()",
                        "Describe": "获取鼠标特征码. 当BindWindow或者BindWindowEx中的mouse参数含有dx.mouse.cursor时，获取到的是后台鼠标特征，否则是前台鼠标特征。   后台特征码是收费功能<br>注:此接口和GetCursorShapeEx(0)等效. 相当于工具里的方式1获取的特征码. 当此特征码在某些情况下无法区分鼠标形状时，可以考虑使用GetCursorShapeEx(1).<br>另要特别注意,WIN7以及以上系统，必须在字体显示设置里把文字大小调整为默认(100%),否则特征码会变.",
                        "RetType": "String",
                        "Return": "成功时，返回鼠标特征码，失败时，返回空的串",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "GetCursorShapeEx",
                    "Remark": "获取鼠标特征码",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetCursorShapeEx(0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetCursorShapeEx",
                        "Define": "iRet = GetCursorShapeEx(iType)",
                        "Describe": "获取鼠标特征码. 当BindWindow或者BindWindowEx中的mouse参数含有dx.mouse.cursor时，获取到的是后台鼠标特征，否则是前台鼠标特征。   后台特征码是收费功能<br>注: 当type为0时，和GetCursorShape等效.<br>另要特别注意,WIN7以及以上系统，必须在字体显示设置里把文字大小调整为默认(100%),否则特征码会变.",
                        "RetType": "String",
                        "Return": "成功时，返回鼠标特征码；失败时，返回空的串",
                        "Param": [
                            {
                                "Caption": "iType",
                                "DataType": "Integer",
                                "Describe": "获取鼠标特征码的方式. 和工具中的方式1 方式2对应. 方式1此参数值为0. 方式2此参数值为1.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetCursorSpot",
                    "Remark": "获取鼠标热点位置",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetCursorSpot()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetCursorSpot",
                        "Define": "iRet = GetCursorSpot()",
                        "Describe": "获取鼠标热点位置.(参考工具中抓取鼠标后，那个闪动的点就是热点坐标,不是鼠标坐标)<br>当BindWindow或者BindWindowEx中的mouse参数含有dx.mouse.cursor时，获取到的是后台鼠标热点位置，否则是前台鼠标热点位置.  后台热点位置是收费功能",
                        "RetType": "String",
                        "Return": "成功时，返回形如 x,y 的字符串；失败时，返回空的串",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "KeyPress",
                    "Remark": "点击键盘按键",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.KeyPress(65)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "KeyPress",
                        "Define": "iRet = KeyPress(vk_code)",
                        "Describe": "点击指定的虚拟键码",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "vk_code",
                                "DataType": "Integer",
                                "Describe": "虚拟按键码",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "KeyPressChar",
                    "Remark": "点击键盘按键",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.KeyPressChar(\"F1\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "KeyPressChar",
                        "Define": "iRet = KeyPressChar(key_str)",
                        "Describe": "点击指定的键盘按键",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "key_str",
                                "DataType": "String",
                                "Describe": "字符串描述的键码. 大小写无所谓",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "KeyPressStr",
                    "Remark": "点击按键按键序列",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.KeyPressStr(65)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "KeyPressStr",
                        "Define": "iRet = KeyPressStr(key_str, delay)",
                        "Describe": "根据指定的字符串序列，依次按顺序按下其中的字符.   收费功能",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "key_str",
                                "DataType": "String",
                                "Describe": "需要按下的字符串序列.",
                                "Optional": false
                            },
                            {
                                "Caption": "delay",
                                "DataType": "Integer",
                                "Describe": "每按下一个按键，需要延时多久. 单位毫秒.这个值越大，按的速度越慢。",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "KeyDown",
                    "Remark": "按下键盘按键",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.KeyDown(65)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "KeyDown",
                        "Define": "iRet = KeyDown(vk_code)",
                        "Describe": "按下指定的虚拟键码",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "vk_code",
                                "DataType": "Integer",
                                "Describe": "虚拟按键码",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "KeyDownChar",
                    "Remark": "按下键盘按键",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.KeyDownChar(\"F1\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "KeyDownChar",
                        "Define": "iRet = KeyDownChar(key_str)",
                        "Describe": "按下指定的键盘按键",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "key_str",
                                "DataType": "String",
                                "Describe": "字符串描述的键码. 大小写无所谓",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "KeyUp",
                    "Remark": "弹起键盘按键",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.KeyUp(65)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "KeyUp",
                        "Define": "iRet = KeyUp(vk_code)",
                        "Describe": "弹起指定的虚拟键码",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "vk_code",
                                "DataType": "Integer",
                                "Describe": "虚拟按键码",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "KeyUpChar",
                    "Remark": "弹起键盘按键",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.KeyUpChar(\"F1\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "KeyUpChar",
                        "Define": "iRet = KeyUpChar(key_str)",
                        "Describe": "弹起指定的键盘按键",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "key_str",
                                "DataType": "String",
                                "Describe": "字符串描述的键码. 大小写无所谓",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetKeyState",
                    "Remark": "获取按键状态",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetKeyState(65)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetKeyState",
                        "Define": "iRet = GetKeyState(vk_code)",
                        "Describe": "弹起指定的虚拟键码",
                        "RetType": "Boolean",
                        "Return": "0:弹起，1:按下",
                        "Param": [
                            {
                                "Caption": "vk_code",
                                "DataType": "Integer",
                                "Describe": "虚拟按键码",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "WaitKey",
                    "Remark": "等待按键按下",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.WaitKey(65, 3000)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "WaitKey",
                        "Define": "iRet = WaitKey(vk_code, time_out)",
                        "Describe": "等待指定的按键按下 (前台,不是后台)",
                        "RetType": "Boolean",
                        "Return": "0:超时，1:指定的按键按下",
                        "Param": [
                            {
                                "Caption": "vk_code",
                                "DataType": "Integer",
                                "Describe": "虚拟按键码",
                                "Optional": false
                            },
                            {
                                "Caption": "time_out",
                                "DataType": "Integer",
                                "Describe": "等待多久,单位毫秒. 如果是0，表示一直等待",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetMouseDelay",
                    "Remark": "设置鼠标操作间隔",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetMouseDelay(\"normal\", 60)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetMouseDelay",
                        "Define": "iRet = SetMouseDelay(sType, delay)",
                        "Describe": "设置鼠标单击或者双击时,鼠标按下和弹起的时间间隔。高级用户使用。某些窗口可能需要调整这个参数才可以正常点击。",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "sType",
                                "DataType": "String",
                                "Describe": "鼠标类型,取值有以下：<br>\\\"normal\\\" : 对应normal鼠标 默认内部延时为 30ms<br>\\\"windows\\\": 对应windows 鼠标 默认内部延时为 10ms<br>\\\"dx\\\" :     对应dx鼠标 默认内部延时为40ms",
                                "Optional": false
                            },
                            {
                                "Caption": "delay",
                                "DataType": "Integer",
                                "Describe": "延时,单位是毫秒",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetKeypadDelay",
                    "Remark": "设置键盘操作间隔",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetKeypadDelay(\"normal\", 60)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetKeypadDelay",
                        "Define": "iRet = SetKeypadDelay(sType, delay)",
                        "Describe": "设置按键时,键盘按下和弹起的时间间隔。高级用户使用。某些窗口可能需要调整这个参数才可以正常按键。",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "sType",
                                "DataType": "String",
                                "Describe": "键盘类型,取值有以下：<br>\\\"normal\\\" : 对应normal键盘 默认内部延时为 30ms<br>\\\"windows\\\": 对应windows 键盘 默认内部延时为 10ms<br>\\\"dx\\\" :     对应dx键盘 默认内部延时为40ms",
                                "Optional": false
                            },
                            {
                                "Caption": "delay",
                                "DataType": "Integer",
                                "Describe": "延时,单位是毫秒",
                                "Optional": false
                            }
                        ]
                    }
                }
            ]
        },
        {
            "Caption": "图像、颜色",
            "Icon": "文件夹",
            "Visible": true,
            "Templet": "index",
            "Help": {
                "Caption": ""
            },
            "Child": [
                {
                    "Caption": "FindPic",
                    "Remark": "找图",
                    "Visible": false,
                    "Keyword": true,
                    "InsCode": "Dim As Long intX, intY\ndm.FindPic(0, 0, 2000, 2000, \"1.bmp|2.bmp|3.bmp\", \"000000\", 0.9, 0, intX, intY)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindPic",
                        "Define": "iRet = FindPic(x1, y1, x2, y2, pic_name, delta_color, sim, dir, intX, intY)",
                        "Describe": "查找指定区域内的图片,位图必须是24位色格式,支持透明色,当图像上下左右4个顶点的颜色一样时,则这个颜色将作为透明色处理.<br>这个函数可以查找多个图片,只返回第一个找到的X Y坐标.",
                        "RetType": "Integer",
                        "Return": "返回找到的图片的序号,从0开始索引.如果没找到返回-1",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "pic_name",
                                "DataType": "String",
                                "Describe": "图片名,可以是多个图片,比如 test.bmp|test2.bmp|test3.bmp",
                                "Optional": false
                            },
                            {
                                "Caption": "delta_color",
                                "DataType": "String",
                                "Describe": "颜色色偏比如 203040 表示RGB的色偏分别是20 30 40 (这里是16进制表示)",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "dir",
                                "DataType": "Integer",
                                "Describe": "查找方向 0: 从左到右,从上到下 1: 从左到右,从下到上 2: 从右到左,从上到下 3: 从右到左, 从下到上",
                                "Optional": false
                            },
                            {
                                "Caption": "intX",
                                "DataType": "Integer",
                                "Describe": "返回图片左上角的X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "intY",
                                "DataType": "Integer",
                                "Describe": "返回图片左上角的Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindPicE",
                    "Remark": "找图",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindPicE(0, 0, 2000, 2000, \"1.bmp|2.bmp|3.bmp\", \"000000\", 0.9, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindPicE",
                        "Define": "iRet = FindPicE(x1, y1, x2, y2, pic_name, delta_color, sim, dir)",
                        "Describe": "查找指定区域内的图片,位图必须是24位色格式,支持透明色,当图像上下左右4个顶点的颜色一样时,则这个颜色将作为透明色处理.<br>这个函数可以查找多个图片,只返回第一个找到的X Y坐标.",
                        "RetType": "String",
                        "Return": "返回找到的图片序号(从0开始索引)以及X和Y坐标 形式如 \\\"index|x|y\\\", 比如\\\"3|100|200\\\"",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "pic_name",
                                "DataType": "String",
                                "Describe": "图片名,可以是多个图片,比如 test.bmp|test2.bmp|test3.bmp",
                                "Optional": false
                            },
                            {
                                "Caption": "delta_color",
                                "DataType": "String",
                                "Describe": "颜色色偏比如 203040 表示RGB的色偏分别是20 30 40 (这里是16进制表示)",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "dir",
                                "DataType": "Integer",
                                "Describe": "查找方向 0: 从左到右,从上到下 1: 从左到右,从下到上 2: 从右到左,从上到下 3: 从右到左, 从下到上",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindPicEx",
                    "Remark": "找图返回所有坐标",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindPicEx(0, 0, 2000, 2000, \"1.bmp|2.bmp|3.bmp\", \"000000\", 0.9, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindPicEx",
                        "Define": "iRet = FindPicEx(x1, y1, x2, y2, pic_name, delta_color, sim, dir)",
                        "Describe": "查找指定区域内的图片,位图必须是24位色格式,支持透明色,当图像上下左右4个顶点的颜色一样时,则这个颜色将作为透明色处理.<br>这个函数可以查找多个图片,并且返回所有找到的图像的坐标.",
                        "RetType": "String",
                        "Return": "返回的是所有找到的坐标格式如下:\\\"id,x,y|id,x,y..|id,x,y\\\" (图片左上角的坐标)<br>比如 \\\"0,100,20|2,30,40\\\" 表示找到了两个,第一个,对应的图片是图像序号为0的图片,坐标是(100,20),第二个是序号为2的图片,坐标(30,40)<br>(由于内存限制,返回的图片数量最多为1500个左右)",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "pic_name",
                                "DataType": "String",
                                "Describe": "图片名,可以是多个图片,比如 test.bmp|test2.bmp|test3.bmp",
                                "Optional": false
                            },
                            {
                                "Caption": "delta_color",
                                "DataType": "String",
                                "Describe": "颜色色偏比如 203040 表示RGB的色偏分别是20 30 40 (这里是16进制表示)",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "dir",
                                "DataType": "Integer",
                                "Describe": "查找方向 0: 从左到右,从上到下 1: 从左到右,从下到上 2: 从右到左,从上到下 3: 从右到左, 从下到上",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindPicS",
                    "Remark": "找图返回文件名",
                    "Visible": false,
                    "Keyword": true,
                    "InsCode": "Dim As Long intX, intY\ndm.FindPicS(0, 0, 2000, 2000, \"1.bmp|2.bmp|3.bmp\", \"000000\", 0.9, 0, intX, intY)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindPicS",
                        "Define": "iRet = FindPicS(x1, y1, x2, y2, pic_name, delta_color, sim, dir, intX, intY)",
                        "Describe": "查找指定区域内的图片,位图必须是24位色格式,支持透明色,当图像上下左右4个顶点的颜色一样时,则这个颜色将作为透明色处理.<br>这个函数可以查找多个图片,只返回第一个找到的X Y坐标.",
                        "RetType": "String",
                        "Return": "返回找到的图片的文件名. 没找到返回长度为0的字符串.",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "pic_name",
                                "DataType": "String",
                                "Describe": "图片名,可以是多个图片,比如 test.bmp|test2.bmp|test3.bmp",
                                "Optional": false
                            },
                            {
                                "Caption": "delta_color",
                                "DataType": "String",
                                "Describe": "颜色色偏比如 203040 表示RGB的色偏分别是20 30 40 (这里是16进制表示)",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "dir",
                                "DataType": "Integer",
                                "Describe": "查找方向 0: 从左到右,从上到下 1: 从左到右,从下到上 2: 从右到左,从上到下 3: 从右到左, 从下到上",
                                "Optional": false
                            },
                            {
                                "Caption": "intX",
                                "DataType": "Integer",
                                "Describe": "返回图片左上角的X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "intY",
                                "DataType": "Integer",
                                "Describe": "返回图片左上角的Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindPicExS",
                    "Remark": "找图返回所有坐标",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindPicExS(0, 0, 2000, 2000, \"1.bmp|2.bmp|3.bmp\", \"000000\", 0.9, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindPicExS",
                        "Define": "iRet = FindPicExS(x1, y1, x2, y2, pic_name, delta_color, sim, dir)",
                        "Describe": "查找指定区域内的图片,位图必须是24位色格式,支持透明色,当图像上下左右4个顶点的颜色一样时,则这个颜色将作为透明色处理.<br>这个函数可以查找多个图片,并且返回所有找到的图像的坐标. 此函数同FindPicEx.只是返回值不同.   收费功能",
                        "RetType": "String",
                        "Return": "返回的是所有找到的坐标格式如下:\\\"file,x,y| file,x,y..| file,x,y\\\" (图片左上角的坐标)<br>比如 \\\"1.bmp,100,20|2.bmp,30,40\\\" 表示找到了两个,第一个,对应的图片是1.bmp,坐标是(100,20),第二个是2.bmp,坐标(30,40)<br>(由于内存限制,返回的图片数量最多为1500个左右)",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "pic_name",
                                "DataType": "String",
                                "Describe": "图片名,可以是多个图片,比如 test.bmp|test2.bmp|test3.bmp",
                                "Optional": false
                            },
                            {
                                "Caption": "delta_color",
                                "DataType": "String",
                                "Describe": "颜色色偏比如 203040 表示RGB的色偏分别是20 30 40 (这里是16进制表示)",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "dir",
                                "DataType": "Integer",
                                "Describe": "查找方向 0: 从左到右,从上到下 1: 从左到右,从下到上 2: 从右到左,从上到下 3: 从右到左, 从下到上",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindColor",
                    "Remark": "找色",
                    "Visible": false,
                    "Keyword": true,
                    "InsCode": "Dim As Long intX, intY\ndm.FindColor(0, 0, 2000, 2000, \"123456-000000|aabbcc-030303|ddeeff-202020\", 1.0, 0, intX, intY)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindColor",
                        "Define": "iRet = FindColor(x1, y1, x2, y2, color, sim, dir, intX, intY)",
                        "Describe": "查找指定区域内的颜色,颜色格式 RRGGBB-DRDGDB ,注意,和按键的颜色格式相反",
                        "RetType": "Boolean",
                        "Return": "0:没找到，1:找到",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "color",
                                "DataType": "String",
                                "Describe": "颜色 格式为 RRGGBB-DRDGDB ,比如 123456-000000|aabbcc-202020 .注意，这里只支持RGB颜色.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "dir",
                                "DataType": "Integer",
                                "Describe": "查找方向 0: 从左到右,从上到下 1: 从左到右,从下到上 2: 从右到左,从上到下 3: 从右到左, 从下到上",
                                "Optional": false
                            },
                            {
                                "Caption": "intX",
                                "DataType": "Integer",
                                "Describe": "返回图片左上角的X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "intY",
                                "DataType": "Integer",
                                "Describe": "返回图片左上角的Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindColorE",
                    "Remark": "找色",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindColorE(0, 0, 2000, 2000, \"123456-000000|aabbcc-030303|ddeeff-202020\", 1.0, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindColorE",
                        "Define": "iRet = FindColorE(x1, y1, x2, y2, color, sim, dir)",
                        "Describe": "查找指定区域内的颜色,颜色格式 RRGGBB-DRDGDB ,注意,和按键的颜色格式相反",
                        "RetType": "Boolean",
                        "Return": "0:没找到，1:找到",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "color",
                                "DataType": "String",
                                "Describe": "颜色 格式为 RRGGBB-DRDGDB ,比如 123456-000000|aabbcc-202020 .注意，这里只支持RGB颜色.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "dir",
                                "DataType": "Integer",
                                "Describe": "查找方向 0: 从左到右,从上到下 1: 从左到右,从下到上 2: 从右到左,从上到下 3: 从右到左, 从下到上",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindColorEx",
                    "Remark": "找色返回所有坐标",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindColorEx(0, 0, 2000, 2000, \"123456-000000|aabbcc-030303|ddeeff-202020\", 1.0, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindColorEx",
                        "Define": "iRet = FindColorEx(x1, y1, x2, y2, color, sim, dir)",
                        "Describe": "查找指定区域内的颜色,颜色格式 RRGGBB-DRDGDB ,注意,和按键的颜色格式相反",
                        "RetType": "String",
                        "Return": "返回所有颜色信息的坐标值,然后通过GetResultCount等接口来解析 (由于内存限制,返回的颜色数量最多为1800个左右)",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "color",
                                "DataType": "String",
                                "Describe": "颜色 格式为 RRGGBB-DRDGDB ,比如 123456-000000|aabbcc-202020 .注意，这里只支持RGB颜色.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "dir",
                                "DataType": "Integer",
                                "Describe": "查找方向 0: 从左到右,从上到下 1: 从左到右,从下到上 2: 从右到左,从上到下 3: 从右到左, 从下到上",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindMulColor",
                    "Remark": "找多个颜色",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindMulColor(0, 0, 2000, 2000, \"123456-000000|aabbcc-030303|ddeeff-202020\", 1.0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindMulColor",
                        "Define": "iRet = FindMulColor(x1, y1, x2, y2, color, sim, dir)",
                        "Describe": "查找指定区域内的所有颜色    收费功能",
                        "RetType": "Boolean",
                        "Return": "0:没找到或者部分颜色没找到，1:所有颜色都找到",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "color",
                                "DataType": "String",
                                "Describe": "颜色 格式为 RRGGBB-DRDGDB ,比如 123456-000000|aabbcc-202020 .注意，这里只支持RGB颜色.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindMultiColor",
                    "Remark": "找多点",
                    "Visible": false,
                    "Keyword": true,
                    "InsCode": "Dim As Long intX, intY\ndm.FindMultiColor(0, 0, 2000, 2000, \"cc805b-020202\", \"9|2|-00ff00,15|2|2dff1c-010101,6|11|a0d962,11|14|-ffffff\", 1.0, 1, intX, intY)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindMultiColor",
                        "Define": "iRet = FindMultiColor(x1, y1, x2, y2, first_color, offset_color, sim, dir, intX, intY)",
                        "Describe": "根据指定的多点查找颜色坐标",
                        "RetType": "Boolean",
                        "Return": "0:没找到，1:找到",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "first_color",
                                "DataType": "String",
                                "Describe": "颜色 格式为 RRGGBB-DRDGDB 比如 123456-000000 <br>这里的含义和按键自带Color插件的意义相同，只不过我的可以支持偏色<br>所有的偏移色坐标都相对于此颜色.注意，这里只支持RGB颜色.",
                                "Optional": false
                            },
                            {
                                "Caption": "offset_color",
                                "DataType": "String",
                                "Describe": "偏移颜色 可以支持任意多个点 格式和按键自带的Color插件意义相同<br>格式为 x1|y1|RRGGBB-DRDGDB,……xn|yn|RRGGBB-DRDGDB <br>比如 1|3|aabbcc,-5|-3|123456-000000 等任意组合都可以，支持偏色<br>还可以支持反色模式，比如 1|3|-aabbcc,-5|-3|-123456-000000 , - 表示除了指定颜色之外的颜色.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "dir",
                                "DataType": "Integer",
                                "Describe": "查找方向 0: 从左到右,从上到下 1: 从左到右,从下到上 2: 从右到左,从上到下 3: 从右到左, 从下到上",
                                "Optional": false
                            },
                            {
                                "Caption": "intX",
                                "DataType": "Integer",
                                "Describe": "返回X坐标(坐标为first_color所在坐标)",
                                "Optional": false
                            },
                            {
                                "Caption": "intY",
                                "DataType": "Integer",
                                "Describe": "返回Y坐标(坐标为first_color所在坐标)",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindMultiColorE",
                    "Remark": "找多点",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindMultiColorE(0, 0, 2000, 2000, \"cc805b-020202\", \"9|2|-00ff00,15|2|2dff1c-010101,6|11|a0d962,11|14|-ffffff\", 1.0, 1)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindMultiColorE",
                        "Define": "iRet = FindMultiColorE(x1, y1, x2, y2, first_color, offset_color, sim, dir)",
                        "Describe": "根据指定的多点查找颜色坐标",
                        "RetType": "String",
                        "Return": "返回X和Y坐标 形式如 x|y , 比如 100|200",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "first_color",
                                "DataType": "String",
                                "Describe": "颜色 格式为 RRGGBB-DRDGDB 比如 123456-000000 <br>这里的含义和按键自带Color插件的意义相同，只不过我的可以支持偏色<br>所有的偏移色坐标都相对于此颜色.注意，这里只支持RGB颜色.",
                                "Optional": false
                            },
                            {
                                "Caption": "offset_color",
                                "DataType": "String",
                                "Describe": "偏移颜色 可以支持任意多个点 格式和按键自带的Color插件意义相同<br>格式为 x1|y1|RRGGBB-DRDGDB,……xn|yn|RRGGBB-DRDGDB <br>比如 1|3|aabbcc,-5|-3|123456-000000 等任意组合都可以，支持偏色<br>还可以支持反色模式，比如 1|3|-aabbcc,-5|-3|-123456-000000 , - 表示除了指定颜色之外的颜色.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "dir",
                                "DataType": "Integer",
                                "Describe": "查找方向 0: 从左到右,从上到下 1: 从左到右,从下到上 2: 从右到左,从上到下 3: 从右到左, 从下到上",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindMultiColorEx",
                    "Remark": "找多点返回所有坐标",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindMultiColorEx(0, 0, 2000, 2000, \"cc805b-020202\", \"9|2|-00ff00,15|2|2dff1c-010101,6|11|a0d962,11|14|-ffffff\", 1.0, 1)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindMultiColorEx",
                        "Define": "iRet = FindMultiColorEx(x1, y1, x2, y2, first_color, offset_color, sim, dir)",
                        "Describe": "根据指定的多点查找所有颜色坐标",
                        "RetType": "String",
                        "Return": "返回所有颜色信息的坐标值,然后通过GetResultCount等接口来解析(由于内存限制,返回的坐标数量最多为1800个左右)<br>坐标是first_color所在的坐标",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "first_color",
                                "DataType": "String",
                                "Describe": "颜色 格式为 RRGGBB-DRDGDB 比如 123456-000000 <br>这里的含义和按键自带Color插件的意义相同，只不过我的可以支持偏色<br>所有的偏移色坐标都相对于此颜色.注意，这里只支持RGB颜色.",
                                "Optional": false
                            },
                            {
                                "Caption": "offset_color",
                                "DataType": "String",
                                "Describe": "偏移颜色 可以支持任意多个点 格式和按键自带的Color插件意义相同<br>格式为 x1|y1|RRGGBB-DRDGDB,……xn|yn|RRGGBB-DRDGDB <br>比如 1|3|aabbcc,-5|-3|123456-000000 等任意组合都可以，支持偏色<br>还可以支持反色模式，比如 1|3|-aabbcc,-5|-3|-123456-000000 , - 表示除了指定颜色之外的颜色.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "dir",
                                "DataType": "Integer",
                                "Describe": "查找方向 0: 从左到右,从上到下 1: 从左到右,从下到上 2: 从右到左,从上到下 3: 从右到左, 从下到上",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindShape",
                    "Remark": "找形状",
                    "Visible": false,
                    "Keyword": true,
                    "InsCode": "Dim As Long intX, intY\ndm.FindShape(0, 0, 2000, 2000, \"1|1|0,1|6|1,0|10|1,9|10|1,7|6|1,7|8|0,8|9|0,2|2|1,3|1|1\", 1.0, 0, intX, intY)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindShape",
                        "Define": "iRet = FindShape(x1, y1, x2, y2, first_color, offset_color, sim, dir, intX, intY)",
                        "Describe": "查找指定的形状. 形状的描述同按键的抓抓. 具体可以参考按键的抓抓. 和按键的语法不同，需要用大漠综合工具的颜色转换.    收费功能",
                        "RetType": "Boolean",
                        "Return": "0:没找到，1:找到",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "offset",
                                "DataType": "String",
                                "Describe": "坐标偏移描述 可以支持任意多个点 格式和按键自带的Color插件意义相同<br>格式为 x1|y1|e1,……xn|yn|en <br>比如 1|3|1,-5|-3|0 等任意组合都可以",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "dir",
                                "DataType": "Integer",
                                "Describe": "查找方向 0: 从左到右,从上到下 1: 从左到右,从下到上 2: 从右到左,从上到下 3: 从右到左, 从下到上",
                                "Optional": false
                            },
                            {
                                "Caption": "intX",
                                "DataType": "Integer",
                                "Describe": "返回X坐标(坐标为first_color所在坐标)",
                                "Optional": false
                            },
                            {
                                "Caption": "intY",
                                "DataType": "Integer",
                                "Describe": "返回Y坐标(坐标为first_color所在坐标)",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindShapeE",
                    "Remark": "找形状",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindShapeE(0, 0, 2000, 2000, \"1|1|0,1|6|1,0|10|1,9|10|1,7|6|1,7|8|0,8|9|0,2|2|1,3|1|1\", 1.0, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindShapeE",
                        "Define": "iRet = FindShapeE(x1, y1, x2, y2, first_color, offset_color, sim, dir)",
                        "Describe": "查找指定的形状. 形状的描述同按键的抓抓. 具体可以参考按键的抓抓. 和按键的语法不同，需要用大漠综合工具的颜色转换.    收费功能",
                        "RetType": "String",
                        "Return": "返回X和Y坐标 形式如 x|y , 比如 100|200",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "offset",
                                "DataType": "String",
                                "Describe": "坐标偏移描述 可以支持任意多个点 格式和按键自带的Color插件意义相同<br>格式为 x1|y1|e1,……xn|yn|en <br>比如 1|3|1,-5|-3|0 等任意组合都可以",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "dir",
                                "DataType": "Integer",
                                "Describe": "查找方向 0: 从左到右,从上到下 1: 从左到右,从下到上 2: 从右到左,从上到下 3: 从右到左, 从下到上",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindShapeEx",
                    "Remark": "找形状返回所有坐标",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindShapeEx(0, 0, 2000, 2000, \"1|1|0,1|6|1,0|10|1,9|10|1,7|6|1,7|8|0,8|9|0,2|2|1,3|1|1\", 1.0, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindShapeEx",
                        "Define": "iRet = FindShapeEx(x1, y1, x2, y2, first_color, offset_color, sim, dir)",
                        "Describe": "查找指定的形状. 形状的描述同按键的抓抓. 具体可以参考按键的抓抓. 和按键的语法不同，需要用大漠综合工具的颜色转换.    收费功能",
                        "RetType": "String",
                        "Return": "返回所有形状的坐标值,然后通过GetResultCount等接口来解析(由于内存限制,返回的坐标数量最多为1800个左右)",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "offset",
                                "DataType": "String",
                                "Describe": "坐标偏移描述 可以支持任意多个点 格式和按键自带的Color插件意义相同<br>格式为 x1|y1|e1,……xn|yn|en <br>比如 1|3|1,-5|-3|0 等任意组合都可以",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "dir",
                                "DataType": "Integer",
                                "Describe": "查找方向 0: 从左到右,从上到下 1: 从左到右,从下到上 2: 从右到左,从上到下 3: 从右到左, 从下到上",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindPicMem",
                    "Remark": "找内存图",
                    "Visible": false,
                    "Keyword": true,
                    "InsCode": "Dim As Long intX, intY\ndm.FindPicMem(0, 0, 2000, 2000, \"0|0\", \"000000\", 0.9, 0, intX, intY)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindPicMem",
                        "Define": "iRet = FindPicMem(x1, y1, x2, y2, pic_info, delta_color, sim, dir, intX, intY)",
                        "Describe": "查找指定区域内的图片,位图必须是24位色格式,支持透明色,当图像上下左右4个顶点的颜色一样时,则这个颜色将作为透明色处理.<br>这个函数可以查找多个图片,只返回第一个找到的X Y坐标. 这个函数要求图片是数据地址.    收费功能",
                        "RetType": "Integer",
                        "Return": "返回找到的图片的序号,从0开始索引.如果没找到返回-1",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "pic_info",
                                "DataType": "String",
                                "Describe": "图片数据地址集合. 格式为 地址1,长度1|地址2,长度2.....|地址n,长度n . 可以用AppendPicAddr来组合. <br>地址表示24位位图资源在内存中的首地址，用十进制的数值表示<br>长度表示位图资源在内存中的长度，用十进制数值表示.",
                                "Optional": false
                            },
                            {
                                "Caption": "delta_color",
                                "DataType": "String",
                                "Describe": "颜色色偏比如 203040 表示RGB的色偏分别是20 30 40 (这里是16进制表示)",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "dir",
                                "DataType": "Integer",
                                "Describe": "查找方向 0: 从左到右,从上到下 1: 从左到右,从下到上 2: 从右到左,从上到下 3: 从右到左, 从下到上",
                                "Optional": false
                            },
                            {
                                "Caption": "intX",
                                "DataType": "Integer",
                                "Describe": "返回图片左上角的X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "intY",
                                "DataType": "Integer",
                                "Describe": "返回图片左上角的Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindPicMemE",
                    "Remark": "找内存图",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindPicMemE(0, 0, 2000, 2000, \"0|0\", \"000000\", 0.9, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindPicMemE",
                        "Define": "iRet = FindPicMemE(x1, y1, x2, y2, pic_info, delta_color, sim, dir)",
                        "Describe": "查找指定区域内的图片,位图必须是24位色格式,支持透明色,当图像上下左右4个顶点的颜色一样时,则这个颜色将作为透明色处理.<br>这个函数可以查找多个图片,只返回第一个找到的X Y坐标. 这个函数要求图片是数据地址.    收费功能",
                        "RetType": "String",
                        "Return": "返回找到的图片序号(从0开始索引)以及X和Y坐标 形式如 index|x|y , 比如 3|100|200 ",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "pic_info",
                                "DataType": "String",
                                "Describe": "图片数据地址集合. 格式为 地址1,长度1|地址2,长度2.....|地址n,长度n . 可以用AppendPicAddr来组合. <br>地址表示24位位图资源在内存中的首地址，用十进制的数值表示<br>长度表示位图资源在内存中的长度，用十进制数值表示.",
                                "Optional": false
                            },
                            {
                                "Caption": "delta_color",
                                "DataType": "String",
                                "Describe": "颜色色偏比如 203040 表示RGB的色偏分别是20 30 40 (这里是16进制表示)",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "dir",
                                "DataType": "Integer",
                                "Describe": "查找方向 0: 从左到右,从上到下 1: 从左到右,从下到上 2: 从右到左,从上到下 3: 从右到左, 从下到上",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindPicMemEx",
                    "Remark": "找内存图返回所有坐标",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindPicMemEx(0, 0, 2000, 2000, \"0|0\", \"000000\", 0.9, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindPicMemEx",
                        "Define": "iRet = FindPicMemEx(x1, y1, x2, y2, pic_info, delta_color, sim, dir)",
                        "Describe": "查找指定区域内的图片,位图必须是24位色格式,支持透明色,当图像上下左右4个顶点的颜色一样时,则这个颜色将作为透明色处理.<br>这个函数可以查找多个图片,只返回第一个找到的X Y坐标. 这个函数要求图片是数据地址.    收费功能",
                        "RetType": "String",
                        "Return": "返回的是所有找到的坐标格式如下: id,x,y|id,x,y..|id,x,y  (图片左上角的坐标)<br>比如 0,100,20|2,30,40  表示找到了两个,第一个,对应的图片是图像序号为0的图片,坐标是(100,20),第二个是序号为2的图片,坐标(30,40)<br>(由于内存限制,返回的图片数量最多为1500个左右)",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "pic_info",
                                "DataType": "String",
                                "Describe": "图片数据地址集合. 格式为 地址1,长度1|地址2,长度2.....|地址n,长度n . 可以用AppendPicAddr来组合. <br>地址表示24位位图资源在内存中的首地址，用十进制的数值表示<br>长度表示位图资源在内存中的长度，用十进制数值表示.",
                                "Optional": false
                            },
                            {
                                "Caption": "delta_color",
                                "DataType": "String",
                                "Describe": "颜色色偏比如 203040 表示RGB的色偏分别是20 30 40 (这里是16进制表示)",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "dir",
                                "DataType": "Integer",
                                "Describe": "查找方向 0: 从左到右,从上到下 1: 从左到右,从下到上 2: 从右到左,从上到下 3: 从右到左, 从下到上",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetColor",
                    "Remark": "取色",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetColor(0, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetColor",
                        "Define": "iRet = GetColor(x, y)",
                        "Describe": "获取(x,y)的颜色,颜色返回格式 RRGGBB ,注意,和按键的颜色格式相反",
                        "RetType": "String",
                        "Return": "颜色字符串(注意这里都是小写字符，和工具相匹配)",
                        "Param": [
                            {
                                "Caption": "x",
                                "DataType": "Integer",
                                "Describe": "X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y",
                                "DataType": "Integer",
                                "Describe": "Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetColorBGR",
                    "Remark": "取色",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetColorBGR(0, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetColorBGR",
                        "Define": "iRet = GetColorBGR(x, y)",
                        "Describe": "获取(x,y)的颜色,颜色返回格式 BBGGRR",
                        "RetType": "String",
                        "Return": "颜色字符串(注意这里都是小写字符，和工具相匹配)",
                        "Param": [
                            {
                                "Caption": "x",
                                "DataType": "Integer",
                                "Describe": "X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y",
                                "DataType": "Integer",
                                "Describe": "Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetColorHSV",
                    "Remark": "取色",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetColorHSV(0, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetColorHSV",
                        "Define": "iRet = GetColorHSV(x, y)",
                        "Describe": "获取(x,y)的HSV颜色,颜色返回格式 H.S.V",
                        "RetType": "String",
                        "Return": "颜色字符串",
                        "Param": [
                            {
                                "Caption": "x",
                                "DataType": "Integer",
                                "Describe": "X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y",
                                "DataType": "Integer",
                                "Describe": "Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "CmpColor",
                    "Remark": "比色",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.CmpColor(\"FF0000\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "CmpColor",
                        "Define": "iRet = CmpColor(x, y, color, sim)",
                        "Describe": "比较指定坐标点(x,y)的颜色",
                        "RetType": "Boolean",
                        "Return": "0: 颜色匹配，1: 颜色不匹配",
                        "Param": [
                            {
                                "Caption": "x",
                                "DataType": "Integer",
                                "Describe": "X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y",
                                "DataType": "Integer",
                                "Describe": "Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "color",
                                "DataType": "String",
                                "Describe": "颜色字符串,可以支持偏色,多色,例如 ffffff-202020|000000-000000 这个表示白色偏色为202020,和黑色偏色为000000.颜色最多支持10种颜色组合. 注意，这里只支持RGB颜色.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度(0.1-1.0)",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetColorNum",
                    "Remark": "获取区域颜色数量",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetColorNum(0, 0, 2000, 2000, \"123456-000000|aabbcc-030303|ddeeff-202020\", 1.0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetColorNum",
                        "Define": "iRet = GetColorNum(x1, y1, x2, y2, color, sim)",
                        "Describe": "获取(x,y)的HSV颜色,颜色返回格式 H.S.V",
                        "RetType": "Integer",
                        "Return": "颜色数量",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "color",
                                "DataType": "String",
                                "Describe": "颜色 格式为 RRGGBB-DRDGDB ,比如 123456-000000|aabbcc-202020 .注意，这里只支持RGB颜色.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetAveRGB",
                    "Remark": "获取范围颜色均值",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetAveRGB(0, 0, 2000, 2000)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetAveRGB",
                        "Define": "iRet = GetAveRGB(x1, y1, x2, y2)",
                        "Describe": "获取范围(x1,y1,x2,y2)颜色的均值,返回格式 RRGGBB",
                        "RetType": "String",
                        "Return": "颜色字符串",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetAveHSV",
                    "Remark": "获取范围颜色均值",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetAveHSV(0, 0, 2000, 2000)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetAveHSV",
                        "Define": "iRet = GetAveHSV(x1, y1, x2, y2)",
                        "Describe": "获取范围(x1,y1,x2,y2)颜色的均值,返回格式 H.S.V",
                        "RetType": "String",
                        "Return": "颜色字符串",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "IsDisplayDead",
                    "Remark": "判断是否卡屏",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.IsDisplayDead(0, 0, 2000, 2000, 5)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "IsDisplayDead",
                        "Define": "iRet = IsDisplayDead(x1, y1, x2, y2, t)",
                        "Describe": "判断指定的区域，在指定的时间内(秒),图像数据是否一直不变.(卡屏).",
                        "RetType": "Boolean",
                        "Return": "0 : 没有卡屏，图像数据在变化. 1 : 卡屏. 图像数据在指定的时间内一直没有变化.",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "t",
                                "DataType": "Integer",
                                "Describe": "需要等待的时间,单位是秒",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "BGR2RGB",
                    "Remark": "颜色格式转换",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.BGR2RGB(\"FF0000\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "BGR2RGB",
                        "Define": "iRet = BGR2RGB(bgr_color)",
                        "Describe": "把BGR(按键格式)的颜色格式转换为RGB",
                        "RetType": "String",
                        "Return": "RGB格式的字符串",
                        "Param": [
                            {
                                "Caption": "bgr_color",
                                "DataType": "String",
                                "Describe": "RGB格式的字符串",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "RGB2BGR",
                    "Remark": "颜色格式转换",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.RGB2BGR(\"FF0000\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "RGB2BGR",
                        "Define": "iRet = RGB2BGR(rgb_color)",
                        "Describe": "把RGB的颜色格式转换为BGR(按键格式)",
                        "RetType": "String",
                        "Return": "BGR格式的字符串",
                        "Param": [
                            {
                                "Caption": "rgb_color",
                                "DataType": "String",
                                "Describe": "RGB格式的字符串",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "Capture",
                    "Remark": "截图保存为bmp文件",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.Capture(0, 0, 2000, 2000, \"c:\\1.bmp\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "Capture",
                        "Define": "iRet = Capture(x1, y1, x2, y2, file)",
                        "Describe": "抓取指定区域(x1, y1, x2, y2)的图像, 保存为file(24位位图)",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "file",
                                "DataType": "String",
                                "Describe": "保存的文件名,保存的地方一般为SetPath中设置的目录<br>当然这里也可以指定全路径名.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "CaptureGif",
                    "Remark": "截图保存为gif文件",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.CaptureGif(0, 0, 2000, 2000, \"c:\\1.gif\", 100, 3000)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "CaptureGif",
                        "Define": "iRet = CaptureGif(x1, y1, x2, y2, file, delay, time)",
                        "Describe": "抓取指定区域(x1, y1, x2, y2)的动画，保存为gif格式",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "file",
                                "DataType": "String",
                                "Describe": "保存的文件名,保存的地方一般为SetPath中设置的目录<br>当然这里也可以指定全路径名.",
                                "Optional": false
                            },
                            {
                                "Caption": "delay",
                                "DataType": "Integer",
                                "Describe": "动画间隔，单位毫秒。如果为0，表示只截取静态图片",
                                "Optional": false
                            },
                            {
                                "Caption": "time",
                                "DataType": "Integer",
                                "Describe": "总共截取多久的动画，单位毫秒",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "CaptureJpg",
                    "Remark": "截图保存为jpg文件",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.CaptureJpg(0, 0, 2000, 2000, \"c:\\1.bmp\", 80)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "CaptureJpg",
                        "Define": "iRet = CaptureJpg(x1, y1, x2, y2, file, quality)",
                        "Describe": "抓取指定区域(x1, y1, x2, y2)的图像,保存为file(JPG压缩格式)",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "file",
                                "DataType": "String",
                                "Describe": "保存的文件名,保存的地方一般为SetPath中设置的目录<br>当然这里也可以指定全路径名.",
                                "Optional": false
                            },
                            {
                                "Caption": "quality",
                                "DataType": "Integer",
                                "Describe": "jpg压缩比率(1-100) 越大图片质量越好",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "CapturePng",
                    "Remark": "截图保存为png文件",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.CapturePng(0, 0, 2000, 2000, \"c:\\1.bmp\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "CapturePng",
                        "Define": "iRet = CapturePng(x1, y1, x2, y2, file)",
                        "Describe": "同Capture函数，只是保存的格式为PNG",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "file",
                                "DataType": "String",
                                "Describe": "保存的文件名,保存的地方一般为SetPath中设置的目录<br>当然这里也可以指定全路径名.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "CapturePre",
                    "Remark": "截图上次操作的区域",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.CapturePre(\"c:\\1.bmp\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "CapturePre",
                        "Define": "iRet = CapturePre(file)",
                        "Describe": "抓取上次操作的图色区域，保存为file(24位位图)",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "file",
                                "DataType": "String",
                                "Describe": "保存的文件名,保存的地方一般为SetPath中设置的目录<br>当然这里也可以指定全路径名.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "LoadPic",
                    "Remark": "加载图片到内存",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.LoadPic(\"1.bmp|2.bmp|3.bmp\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "LoadPic",
                        "Define": "iRet = LoadPic(pic_name)",
                        "Describe": "预先加载指定的图片,这样在操作任何和图片相关的函数时,将省去了加载图片的时间。调用此函数后,没必要一定要调用FreePic,插件自己会自动释放.<br>另外,此函数不是必须调用的,所有和图形相关的函数只要调用过一次，图片会自动加入缓存.<br>如果想对一个已经加入缓存的图片进行修改，那么必须先用FreePic释放此图片在缓存中占用的内存，然后重新调用图片相关接口，就可以重新加载此图片.",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "pic_name",
                                "DataType": "String",
                                "Describe": "文件名比如 1.bmp|2.bmp|3.bmp 等,可以使用通配符,比如  *.bmp  这个对应了所有的bmp文件，a?c*.bmp 这个代表了所有第一个字母是a 第三个字母是c 第二个字母任意的所有bmp文件，abc???.bmp|1.bmp|aa??.bmp 可以这样任意组合.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FreePic",
                    "Remark": "释放内存图片",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FreePic(\"1.bmp|2.bmp|3.bmp\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FreePic",
                        "Define": "iRet = FreePic(pic_name)",
                        "Describe": "释放指定的图片,此函数不必要调用,除非你想节省内存.",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "pic_name",
                                "DataType": "String",
                                "Describe": "文件名比如 1.bmp|2.bmp|3.bmp 等,可以使用通配符,比如  *.bmp  这个对应了所有的bmp文件，a?c*.bmp 这个代表了所有第一个字母是a 第三个字母是c 第二个字母任意的所有bmp文件，abc???.bmp|1.bmp|aa??.bmp 可以这样任意组合.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetPicSize",
                    "Remark": "获取图像大小",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetPicSize(\"1.bmp\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetPicSize",
                        "Define": "iRet = GetPicSize(pic_name)",
                        "Describe": "获取指定图片的尺寸，如果指定的图片已经被加入缓存，则从缓存中获取信息.<br>此接口也会把此图片加入缓存.",
                        "RetType": "String",
                        "Return": "字符串形式如 w,h 比如 30,20",
                        "Param": [
                            {
                                "Caption": "pic_name",
                                "DataType": "String",
                                "Describe": "文件名比如 1.bmp",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetPicPwd",
                    "Remark": "设置图片密码",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetPicPwd(\"123\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetPicPwd",
                        "Define": "iRet = SetPicPwd(pwd)",
                        "Describe": "设置图片密码，如果图片本身没有加密，那么此设置不影响不加密的图片，一样正常使用.",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "pwd",
                                "DataType": "String",
                                "Describe": "图片密码",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "ImageToBmp",
                    "Remark": "转换图片到bmp格式",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.ImageToBmp(\"1.png\", \"1.bmp\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "ImageToBmp",
                        "Define": "iRet = ImageToBmp(pic_name, bmp_name)",
                        "Describe": "转换图片格式为24位BMP格式.",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "pic_name",
                                "DataType": "String",
                                "Describe": "要转换的图片名",
                                "Optional": false
                            },
                            {
                                "Caption": "bmp_name",
                                "DataType": "String",
                                "Describe": "要保存的BMP图片名",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "EnableDisplayDebug",
                    "Remark": "开启图色调试模式",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.EnableDisplayDebug(1)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "EnableDisplayDebug",
                        "Define": "iRet = EnableDisplayDebug(enable_debug)",
                        "Describe": "开启图色调试模式，此模式会稍许降低图色和文字识别的速度.默认不开启.",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "enable_debug",
                                "DataType": "Boolean",
                                "Describe": "0 为关闭，1 为开启",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "EnableGetColorByCapture",
                    "Remark": "允许截图方式取色",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.EnableGetColorByCapture(1)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "EnableGetColorByCapture",
                        "Define": "iRet = EnableGetColorByCapture(enable)",
                        "Describe": "允许调用GetColor GetColorBGR GetColorHSV 以及 CmpColor时，以截图的方式来获取颜色。<br>注 : 某些窗口上，可能GetColor会获取不到颜色，可以尝试此接口.",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "enable",
                                "DataType": "Boolean",
                                "Describe": "0 为关闭，1 为开启",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetScreenData",
                    "Remark": "获取屏幕像素数据",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetScreenData(0, 0, 2000, 2000)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetScreenData",
                        "Define": "iRet = GetScreenData(x1, y1, x2, y2)",
                        "Describe": "获取指定区域的图像,用二进制数据的方式返回,（不适合按键使用）方便二次开发.",
                        "RetType": "Ptr",
                        "Return": "返回的是指定区域的二进制颜色数据地址,每个颜色是4个字节,表示方式为(00RRGGBB)",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetScreenDataBmp",
                    "Remark": "获取屏幕像素数据",
                    "Visible": false,
                    "Keyword": true,
                    "InsCode": "Dim As pData, iSize<br>dm.GetScreenDataBmp(0, 0, 2000, 2000, pData, iSize)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetScreenDataBmp",
                        "Define": "iRet = GetScreenDataBmp(x1, y1, x2, y2, data, size)",
                        "Describe": "获取指定区域的图像,用24位位图的数据格式返回,（不适合按键使用）方便二次开发.    收费功能",
                        "RetType": "Boolean",
                        "Return": "0 成功，1 失败",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "pData",
                                "DataType": "Ptr",
                                "Describe": "返回图片的数据指针",
                                "Optional": false
                            },
                            {
                                "Caption": "iSize",
                                "DataType": "Integer",
                                "Describe": "返回图片的数据长度",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "MatchPicName",
                    "Remark": "通配符取文件集合",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.MatchPicName(\"1.bmp|2.bmp|3.bmp\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "MatchPicName",
                        "Define": "iRet = MatchPicName(pic_name)",
                        "Describe": "根据通配符获取文件集合. 方便用于FindPic和FindPicEx",
                        "RetType": "String",
                        "Return": "返回的是通配符对应的文件集合，每个图片以|分割",
                        "Param": [
                            {
                                "Caption": "pic_name",
                                "DataType": "String",
                                "Describe": "文件名比如 1.bmp|2.bmp|3.bmp 等,可以使用通配符,比如<br>*.bmp 这个对应了所有的bmp文件<br>a?c*.bmp 这个代表了所有第一个字母是a 第三个字母是c 第二个字母任意的所有bmp文件<br>abc???.bmp|1.bmp|aa??.bmp 可以这样任意组合.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "AppendPicAddr",
                    "Remark": "组合内存图片参数",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.AppendPicAddr(pic_info, 0, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "AppendPicAddr",
                        "Define": "iRet = AppendPicAddr(pic_info, addr, size)",
                        "Describe": "对指定的数据地址和长度，组合成新的参数. FindPicMem FindPicMemE 以及FindPicMemEx专用",
                        "RetType": "String",
                        "Return": "新的地址描述串",
                        "Param": [
                            {
                                "Caption": "pic_info",
                                "DataType": "String",
                                "Describe": "老的地址描述串",
                                "Optional": false
                            },
                            {
                                "Caption": "addr",
                                "DataType": "Integer",
                                "Describe": "数据地址",
                                "Optional": false
                            },
                            {
                                "Caption": "size",
                                "DataType": "Integer",
                                "Describe": "数据长度",
                                "Optional": false
                            }
                        ]
                    }
                }
            ]
        },
        {
            "Caption": "文字识别",
            "Icon": "文件夹",
            "Visible": true,
            "Templet": "index",
            "Help": {
                "Caption": ""
            },
            "Child": [
                {
                    "Caption": "SetDict",
                    "Remark": "加载字库文件",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetDict(0, \"Dict.txt\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetDict",
                        "Define": "iRet = SetDict(index, file)",
                        "Describe": "设置字库文件",
                        "RetType": "Boolean",
                        "Return": "0 失败，1 成功",
                        "Param": [
                            {
                                "Caption": "index",
                                "DataType": "Integer",
                                "Describe": "字库的序号,取值为0-9,目前最多支持10个字库",
                                "Optional": false
                            },
                            {
                                "Caption": "file",
                                "DataType": "String",
                                "Describe": "字库文件名",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetDictMem",
                    "Remark": "加载内存字库",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetDictMem(0, \"Dict.txt\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetDictMem",
                        "Define": "iRet = SetDictMem(index, addr, size)",
                        "Describe": "从内存中设置字库.    收费功能",
                        "RetType": "Boolean",
                        "Return": "0 失败，1 成功",
                        "Param": [
                            {
                                "Caption": "index",
                                "DataType": "Integer",
                                "Describe": "字库的序号,取值为0-9,目前最多支持10个字库",
                                "Optional": false
                            },
                            {
                                "Caption": "addr",
                                "DataType": "Integer",
                                "Describe": "数据地址",
                                "Optional": false
                            },
                            {
                                "Caption": "size",
                                "DataType": "Integer",
                                "Describe": "字库长度",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetDictPwd",
                    "Remark": "设置字库密码",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetDictPwd(\"password\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetDictPwd",
                        "Define": "iRet = SetDictPwd(pwd)",
                        "Describe": "设置字库的密码,在SetDict前调用,目前的设计是,所有字库通用一个密码.<br>注意:如果使用了多字库,所有字库的密码必须一样. 此函数必须在SetDict之前调用,否则会解密失败.",
                        "RetType": "Boolean",
                        "Return": "0 失败，1 成功",
                        "Param": [
                            {
                                "Caption": "pwd",
                                "DataType": "String",
                                "Describe": "字库密码",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "UseDict",
                    "Remark": "使用字库文件",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.UseDict(0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "UseDict",
                        "Define": "iRet = UseDict(index)",
                        "Describe": "表示使用哪个字库文件进行识别(index范围:0-9)<br>设置之后，永久生效，除非再次设定",
                        "RetType": "Boolean",
                        "Return": "0 失败，1 成功",
                        "Param": [
                            {
                                "Caption": "index",
                                "DataType": "Integer",
                                "Describe": "字库编号(0-9)",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetNowDict",
                    "Remark": "获取当前字库编号",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetNowDict()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetNowDict",
                        "Define": "iRet = GetNowDict()",
                        "Describe": "获取当前使用的字库序号(0-9)",
                        "RetType": "Integer",
                        "Return": "字库序号(0-9)",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "AddDict",
                    "Remark": "添加字库数据",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.AddDict(0, \"081101BF8020089FD10A21443F85038$记$0.0$11\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "AddDict",
                        "Define": "iRet = AddDict(index, dict_info)",
                        "Describe": "给指定的字库中添加一条字库信息.<br>注意: 此函数尽量在小字库中使用，大字库中使用AddDict速度比较慢<br>另，此函数是向指定的字库所在的内存中添加,而不是往文件中添加. 添加以后立刻就可以用于文字识别。无须再SetDict<br>如果要保存添加进去的字库信息，需要调用SaveDict",
                        "RetType": "Boolean",
                        "Return": "0 失败，1 成功",
                        "Param": [
                            {
                                "Caption": "index",
                                "DataType": "Integer",
                                "Describe": "字库的序号,取值为0-9,目前最多支持10个字库",
                                "Optional": false
                            },
                            {
                                "Caption": "dict_info",
                                "DataType": "String",
                                "Describe": "字库描述串，具体参考大漠综合工具中的字符定义",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetDictCount",
                    "Remark": "获取字库条目数量",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetDictCount(0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetDictCount",
                        "Define": "iRet = GetDictCount(index)",
                        "Describe": "获取指定的字库中的字符数量",
                        "RetType": "Integer",
                        "Return": "字库数量",
                        "Param": [
                            {
                                "Caption": "index",
                                "DataType": "Integer",
                                "Describe": "字库的序号,取值为0-9,目前最多支持10个字库",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetDict",
                    "Remark": "获取字库数据",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetDict(0, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetDict",
                        "Define": "iRet = GetDict(index, font_index)",
                        "Describe": "获取指定字库中指定条目的字库信息.    收费功能",
                        "RetType": "String",
                        "Return": "返回字库条目信息. 失败返回空串.",
                        "Param": [
                            {
                                "Caption": "index",
                                "DataType": "Integer",
                                "Describe": "字库的序号,取值为0-9,目前最多支持10个字库",
                                "Optional": false
                            },
                            {
                                "Caption": "font_index",
                                "DataType": "Integer",
                                "Describe": "字库条目序号(从0开始计数,数值不得超过指定字库的字库上限,具体参考GetDictCount",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetDictInfo",
                    "Remark": "获取系统字库数据",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetDictInfo(\"回收站\", \"宋体\", 9, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetDictInfo",
                        "Define": "iRet = GetDictInfo(str, font_name, font_size, flag)",
                        "Describe": "根据指定的文字，以及指定的系统字库信息，获取字库描述信息.",
                        "RetType": "String",
                        "Return": "返回字库信息,每个字符的字库信息用 | 来分割",
                        "Param": [
                            {
                                "Caption": "str",
                                "DataType": "String",
                                "Describe": "需要获取的字符串",
                                "Optional": false
                            },
                            {
                                "Caption": "font_name",
                                "DataType": "String",
                                "Describe": "系统字体名,比如 宋体",
                                "Optional": false
                            },
                            {
                                "Caption": "font_size",
                                "DataType": "Integer",
                                "Describe": "系统字体尺寸，这个尺寸一定要以大漠综合工具获取的为准.如何获取尺寸看视频教程.",
                                "Optional": false
                            },
                            {
                                "Caption": "flag",
                                "DataType": "Integer",
                                "Describe": "字体类别 取值可以是以下值的组合,比如1+2+4+8,2+4. 0表示正常字体.<br>1 : 粗体<br>2 : 斜体<br>4 : 下划线<br>8 : 删除线",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "ClearDict",
                    "Remark": "清空指定字库",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.ClearDict(0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "ClearDict",
                        "Define": "iRet = ClearDict(index)",
                        "Describe": "清空指定的字库.",
                        "RetType": "Boolean",
                        "Return": "0 失败，1 成功",
                        "Param": [
                            {
                                "Caption": "index",
                                "DataType": "Integer",
                                "Describe": "字库的序号,取值为0-9,目前最多支持10个字库",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SaveDict",
                    "Remark": "保存字库",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SaveDict(0, \"Dict.txt\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SaveDict",
                        "Define": "iRet = SaveDict(index, file)",
                        "Describe": "保存指定的字库到指定的文件中.",
                        "RetType": "Boolean",
                        "Return": "0 失败，1 成功",
                        "Param": [
                            {
                                "Caption": "index",
                                "DataType": "Integer",
                                "Describe": "字库的序号,取值为0-9,目前最多支持10个字库",
                                "Optional": false
                            },
                            {
                                "Caption": "file",
                                "DataType": "String",
                                "Describe": "文件名",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindStr",
                    "Remark": "找字",
                    "Visible": false,
                    "Keyword": true,
                    "InsCode": "Dim As Long intX, intY\ndm.FindStr(0, 0, 2000, 2000, \"长安|洛阳\", \"9f2e3f-000000\", 0.9, intX, intY)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindStr",
                        "Define": "iRet = FindStr(x1, y1, x2, y2, sText, color_format, sim, intX, intY)",
                        "Describe": "在屏幕范围(x1,y1,x2,y2)内,查找string(可以是任意个字符串的组合),并返回符合color_format的坐标位置,相似度sim同Ocr接口描述.",
                        "RetType": "Integer",
                        "Return": "返回字符串的索引 没找到返回-1, 比如 长安|洛阳 ,若找到长安，则返回0",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "sText",
                                "DataType": "String",
                                "Describe": "待查找的字符串,可以是字符串组合，比如 长安|洛阳|大雁塔 ,中间用 | 来分割字符串",
                                "Optional": false
                            },
                            {
                                "Caption": "color_format",
                                "DataType": "String",
                                "Describe": "颜色格式串, 可以包含换行分隔符,语法是 , 后加分割字符串. 具体可以查看下面的示例 .注意，RGB和HSV格式都支持.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "intX",
                                "DataType": "Integer",
                                "Describe": "返回图片左上角的X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "intY",
                                "DataType": "Integer",
                                "Describe": "返回图片左上角的Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindStrS",
                    "Remark": "找字",
                    "Visible": false,
                    "Keyword": true,
                    "InsCode": "Dim As Long intX, intY\ndm.FindStrS(0, 0, 2000, 2000, \"长安|洛阳\", \"9f2e3f-000000\", 0.9, intX, intY)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindStrS",
                        "Define": "iRet = FindStrS(x1, y1, x2, y2, sText, color_format, sim, intX, intY)",
                        "Describe": "在屏幕范围(x1,y1,x2,y2)内,查找string(可以是任意个字符串的组合),并返回符合color_format的坐标位置,相似度sim同Ocr接口描述.",
                        "RetType": "String",
                        "Return": "返回找到的字符串. 没找到的话返回长度为0的字符串.",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "sText",
                                "DataType": "String",
                                "Describe": "待查找的字符串,可以是字符串组合，比如 长安|洛阳|大雁塔 ,中间用 | 来分割字符串",
                                "Optional": false
                            },
                            {
                                "Caption": "color_format",
                                "DataType": "String",
                                "Describe": "颜色格式串, 可以包含换行分隔符,语法是 , 后加分割字符串. 具体可以查看下面的示例 .注意，RGB和HSV格式都支持.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "intX",
                                "DataType": "Integer",
                                "Describe": "返回图片左上角的X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "intY",
                                "DataType": "Integer",
                                "Describe": "返回图片左上角的Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindStrE",
                    "Remark": "找图",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindStrE(0, 0, 2000, 2000, \"长安|洛阳\", \"9f2e3f-000000\", 0.9)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindStrE",
                        "Define": "iRet = FindStrE(x1, y1, x2, y2, sText, color_format, sim)",
                        "Describe": "在屏幕范围(x1,y1,x2,y2)内,查找string(可以是任意个字符串的组合),并返回符合color_format的坐标位置,相似度sim同Ocr接口描述.",
                        "RetType": "String",
                        "Return": "返回字符串序号以及X和Y坐标,形式如 id|x|y , 比如 0|100|200 ,没找到时，id和X以及Y均为-1，-1|-1|-1",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "sText",
                                "DataType": "String",
                                "Describe": "待查找的字符串,可以是字符串组合，比如 长安|洛阳|大雁塔 ,中间用 | 来分割字符串",
                                "Optional": false
                            },
                            {
                                "Caption": "color_format",
                                "DataType": "String",
                                "Describe": "颜色格式串, 可以包含换行分隔符,语法是 , 后加分割字符串. 具体可以查看下面的示例 .注意，RGB和HSV格式都支持.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindStrEx",
                    "Remark": "找图返回所有坐标",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindStrEx(0, 0, 2000, 2000, \"长安|洛阳\", \"9f2e3f-000000\", 0.9)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindStrEx",
                        "Define": "iRet = FindStrEx(x1, y1, x2, y2, sText, color_format, sim)",
                        "Describe": "在屏幕范围(x1,y1,x2,y2)内,查找string(可以是任意字符串的组合),并返回符合color_format的所有坐标位置,相似度sim同Ocr接口描述.",
                        "RetType": "String",
                        "Return": "返回所有找到的坐标集合,格式如下: id,x0,y0|id,x1,y1|......|id,xn,yn 比如 0,100,20|2,30,40 表示找到了两个,第一个,对应的是序号为0的字符串,坐标是(100,20),第二个是序号为2的字符串,坐标(30,40)",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "sText",
                                "DataType": "String",
                                "Describe": "待查找的字符串,可以是字符串组合，比如 长安|洛阳|大雁塔 ,中间用 | 来分割字符串",
                                "Optional": false
                            },
                            {
                                "Caption": "color_format",
                                "DataType": "String",
                                "Describe": "颜色格式串, 可以包含换行分隔符,语法是 , 后加分割字符串. 具体可以查看下面的示例 .注意，RGB和HSV格式都支持.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindStrExS",
                    "Remark": "找图返回所有坐标",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindStrExS(0, 0, 2000, 2000, \"长安|洛阳\", \"9f2e3f-000000\", 0.9)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindStrExS",
                        "Define": "iRet = FindStrExS(x1, y1, x2, y2, sText, color_format, sim)",
                        "Describe": "在屏幕范围(x1,y1,x2,y2)内,查找string(可以是任意个字符串的组合),并返回符合color_format的坐标位置,相似度sim同Ocr接口描述.",
                        "RetType": "String",
                        "Return": "返回所有找到的坐标集合,格式如下: str,x0,y0| str,x1,y1|......| str,xn,yn 比如 长安,100,20|大雁塔,30,40 表示找到了两个,第一个是长安 ,坐标是(100,20),第二个是大雁塔,坐标(30,40)",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "sText",
                                "DataType": "String",
                                "Describe": "待查找的字符串,可以是字符串组合，比如 长安|洛阳|大雁塔 ,中间用 | 来分割字符串",
                                "Optional": false
                            },
                            {
                                "Caption": "color_format",
                                "DataType": "String",
                                "Describe": "颜色格式串, 可以包含换行分隔符,语法是 , 后加分割字符串. 具体可以查看下面的示例 .注意，RGB和HSV格式都支持.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindStrFast",
                    "Remark": "快速找字",
                    "Visible": false,
                    "Keyword": true,
                    "InsCode": "Dim As Long intX, intY\ndm.FindStrFast(0, 0, 2000, 2000, \"长安|洛阳\", \"9f2e3f-000000\", 0.9, intX, intY)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindStrFast",
                        "Define": "iRet = FindStrFast(x1, y1, x2, y2, sText, color_format, sim, intX, intY)",
                        "Describe": "在屏幕范围(x1,y1,x2,y2)内,查找string(可以是任意个字符串的组合),并返回符合color_format的坐标位置,相似度sim同Ocr接口描述.",
                        "RetType": "Integer",
                        "Return": "返回字符串的索引 没找到返回-1, 比如 长安|洛阳 ,若找到长安，则返回0",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "sText",
                                "DataType": "String",
                                "Describe": "待查找的字符串,可以是字符串组合，比如 长安|洛阳|大雁塔 ,中间用 | 来分割字符串",
                                "Optional": false
                            },
                            {
                                "Caption": "color_format",
                                "DataType": "String",
                                "Describe": "颜色格式串, 可以包含换行分隔符,语法是 , 后加分割字符串. 具体可以查看下面的示例 .注意，RGB和HSV格式都支持.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "intX",
                                "DataType": "Integer",
                                "Describe": "返回图片左上角的X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "intY",
                                "DataType": "Integer",
                                "Describe": "返回图片左上角的Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindStrFastS",
                    "Remark": "快速找字",
                    "Visible": false,
                    "Keyword": true,
                    "InsCode": "Dim As Long intX, intY\ndm.FindStrFastS(0, 0, 2000, 2000, \"长安|洛阳\", \"9f2e3f-000000\", 0.9, intX, intY)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindStrFastS",
                        "Define": "iRet = FindStrFastS(x1, y1, x2, y2, sText, color_format, sim, intX, intY)",
                        "Describe": "在屏幕范围(x1,y1,x2,y2)内,查找string(可以是任意个字符串的组合),并返回符合color_format的坐标位置,相似度sim同Ocr接口描述.",
                        "RetType": "String",
                        "Return": "返回找到的字符串. 没找到的话返回长度为0的字符串.",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "sText",
                                "DataType": "String",
                                "Describe": "待查找的字符串,可以是字符串组合，比如 长安|洛阳|大雁塔 ,中间用 | 来分割字符串",
                                "Optional": false
                            },
                            {
                                "Caption": "color_format",
                                "DataType": "String",
                                "Describe": "颜色格式串, 可以包含换行分隔符,语法是 , 后加分割字符串. 具体可以查看下面的示例 .注意，RGB和HSV格式都支持.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "intX",
                                "DataType": "Integer",
                                "Describe": "返回图片左上角的X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "intY",
                                "DataType": "Integer",
                                "Describe": "返回图片左上角的Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindStrFastE",
                    "Remark": "快速找图",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindStrFastE(0, 0, 2000, 2000, \"长安|洛阳\", \"9f2e3f-000000\", 0.9)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindStrFastE",
                        "Define": "iRet = FindStrFastE(x1, y1, x2, y2, sText, color_format, sim)",
                        "Describe": "在屏幕范围(x1,y1,x2,y2)内,查找string(可以是任意个字符串的组合),并返回符合color_format的坐标位置,相似度sim同Ocr接口描述.",
                        "RetType": "String",
                        "Return": "返回字符串序号以及X和Y坐标,形式如 id|x|y , 比如 0|100|200 ,没找到时，id和X以及Y均为-1，-1|-1|-1",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "sText",
                                "DataType": "String",
                                "Describe": "待查找的字符串,可以是字符串组合，比如 长安|洛阳|大雁塔 ,中间用 | 来分割字符串",
                                "Optional": false
                            },
                            {
                                "Caption": "color_format",
                                "DataType": "String",
                                "Describe": "颜色格式串, 可以包含换行分隔符,语法是 , 后加分割字符串. 具体可以查看下面的示例 .注意，RGB和HSV格式都支持.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindStrFastEx",
                    "Remark": "快速找图返回所有坐标",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindStrFastEx(0, 0, 2000, 2000, \"长安|洛阳\", \"9f2e3f-000000\", 0.9)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindStrFastEx",
                        "Define": "iRet = FindStrFastEx(x1, y1, x2, y2, sText, color_format, sim)",
                        "Describe": "在屏幕范围(x1,y1,x2,y2)内,查找string(可以是任意字符串的组合),并返回符合color_format的所有坐标位置,相似度sim同Ocr接口描述.",
                        "RetType": "String",
                        "Return": "返回所有找到的坐标集合,格式如下: id,x0,y0|id,x1,y1|......|id,xn,yn 比如 0,100,20|2,30,40 表示找到了两个,第一个,对应的是序号为0的字符串,坐标是(100,20),第二个是序号为2的字符串,坐标(30,40)",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "sText",
                                "DataType": "String",
                                "Describe": "待查找的字符串,可以是字符串组合，比如 长安|洛阳|大雁塔 ,中间用 | 来分割字符串",
                                "Optional": false
                            },
                            {
                                "Caption": "color_format",
                                "DataType": "String",
                                "Describe": "颜色格式串, 可以包含换行分隔符,语法是 , 后加分割字符串. 具体可以查看下面的示例 .注意，RGB和HSV格式都支持.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindStrFastExS",
                    "Remark": "快速找图返回所有坐标",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindStrFastExS(0, 0, 2000, 2000, \"长安|洛阳\", \"9f2e3f-000000\", 0.9)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindStrFastExS",
                        "Define": "iRet = FindStrFastExS(x1, y1, x2, y2, sText, color_format, sim)",
                        "Describe": "在屏幕范围(x1,y1,x2,y2)内,查找string(可以是任意个字符串的组合),并返回符合color_format的坐标位置,相似度sim同Ocr接口描述.",
                        "RetType": "String",
                        "Return": "返回所有找到的坐标集合,格式如下: str,x0,y0| str,x1,y1|......| str,xn,yn 比如 长安,100,20|大雁塔,30,40 表示找到了两个,第一个是长安 ,坐标是(100,20),第二个是大雁塔,坐标(30,40)",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "sText",
                                "DataType": "String",
                                "Describe": "待查找的字符串,可以是字符串组合，比如 长安|洛阳|大雁塔 ,中间用 | 来分割字符串",
                                "Optional": false
                            },
                            {
                                "Caption": "color_format",
                                "DataType": "String",
                                "Describe": "颜色格式串, 可以包含换行分隔符,语法是 , 后加分割字符串. 具体可以查看下面的示例 .注意，RGB和HSV格式都支持.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindStrWithFont",
                    "Remark": "系统字库找字",
                    "Visible": false,
                    "Keyword": true,
                    "InsCode": "Dim As Long intX, intY\ndm.FindStrWithFont(0, 0, 2000, 2000, \"长安|洛阳\", \"9f2e3f-000000\", 0.9, \"宋体\", 9, 0, intX, intY)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindStrWithFont",
                        "Define": "iRet = FindStrWithFont(x1, y1, x2, y2, sText, color_format, sim, font_name, font_size, flag, intX, intY)",
                        "Describe": "同FindStr，但是不使用SetDict设置的字库，而利用系统自带的字库，速度比FindStr稍慢.",
                        "RetType": "Integer",
                        "Return": "返回字符串的索引 没找到返回-1, 比如 长安|洛阳 ,若找到长安，则返回0",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "sText",
                                "DataType": "String",
                                "Describe": "待查找的字符串,可以是字符串组合，比如 长安|洛阳|大雁塔 ,中间用 | 来分割字符串",
                                "Optional": false
                            },
                            {
                                "Caption": "color_format",
                                "DataType": "String",
                                "Describe": "颜色格式串, 可以包含换行分隔符,语法是 , 后加分割字符串. 具体可以查看下面的示例 .注意，RGB和HSV格式都支持.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "font_name",
                                "DataType": "String",
                                "Describe": "系统字体名,比如 宋体",
                                "Optional": false
                            },
                            {
                                "Caption": "font_size",
                                "DataType": "Integer",
                                "Describe": "系统字体尺寸，这个尺寸一定要以大漠综合工具获取的为准.如果获取尺寸看视频教程.",
                                "Optional": false
                            },
                            {
                                "Caption": "flag",
                                "DataType": "Integer",
                                "Describe": "字体类别 取值可以是以下值的组合,比如1+2+4+8,2+4. 0表示正常字体.<br>1 : 粗体<br>2 : 斜体<br>4 : 下划线<br>8 : 删除线",
                                "Optional": false
                            },
                            {
                                "Caption": "intX",
                                "DataType": "Integer",
                                "Describe": "返回图片左上角的X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "intY",
                                "DataType": "Integer",
                                "Describe": "返回图片左上角的Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindStrWithFontE",
                    "Remark": "系统字库找字",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindStrWithFontE(0, 0, 2000, 2000, \"长安|洛阳\", \"9f2e3f-000000\", 0.9, \"宋体\", 9, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindStrWithFontE",
                        "Define": "iRet = FindStrWithFontE(x1, y1, x2, y2, sText, color_format, sim, font_name, font_size, flag)",
                        "Describe": "同FindStr，但是不使用SetDict设置的字库，而利用系统自带的字库，速度比FindStr稍慢.",
                        "RetType": "String",
                        "Return": "返回字符串序号以及X和Y坐标,形式如 id|x|y , 比如 0|100|200 ,没找到时，id和X以及Y均为-1， -1|-1|-1",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "sText",
                                "DataType": "String",
                                "Describe": "待查找的字符串,可以是字符串组合，比如 长安|洛阳|大雁塔 ,中间用 | 来分割字符串",
                                "Optional": false
                            },
                            {
                                "Caption": "color_format",
                                "DataType": "String",
                                "Describe": "颜色格式串, 可以包含换行分隔符,语法是 , 后加分割字符串. 具体可以查看下面的示例 .注意，RGB和HSV格式都支持.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "font_name",
                                "DataType": "String",
                                "Describe": "系统字体名,比如 宋体",
                                "Optional": false
                            },
                            {
                                "Caption": "font_size",
                                "DataType": "Integer",
                                "Describe": "系统字体尺寸，这个尺寸一定要以大漠综合工具获取的为准.如果获取尺寸看视频教程.",
                                "Optional": false
                            },
                            {
                                "Caption": "flag",
                                "DataType": "Integer",
                                "Describe": "字体类别 取值可以是以下值的组合,比如1+2+4+8,2+4. 0表示正常字体.<br>1 : 粗体<br>2 : 斜体<br>4 : 下划线<br>8 : 删除线",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindStrWithFontEx",
                    "Remark": "系统字库找字返回所有坐标",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindStrWithFontEx(0, 0, 2000, 2000, \"长安|洛阳\", \"9f2e3f-000000\", 0.9, \"宋体\", 9, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindStrWithFontEx",
                        "Define": "iRet = FindStrWithFontEx(x1, y1, x2, y2, sText, color_format, sim, font_name, font_size, flag)",
                        "Describe": "同FindStr，但是不使用SetDict设置的字库，而利用系统自带的字库，速度比FindStr稍慢.",
                        "RetType": "String",
                        "Return": "返回所有找到的坐标集合,格式如下: id,x0,y0|id,x1,y1|......|id,xn,yn 比如 0,100,20|2,30,40 表示找到了两个,第一个,对应的是序号为0的字符串,坐标是(100,20),第二个是序号为2的字符串,坐标(30,40)",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "sText",
                                "DataType": "String",
                                "Describe": "待查找的字符串,可以是字符串组合，比如 长安|洛阳|大雁塔 ,中间用 | 来分割字符串",
                                "Optional": false
                            },
                            {
                                "Caption": "color_format",
                                "DataType": "String",
                                "Describe": "颜色格式串, 可以包含换行分隔符,语法是 , 后加分割字符串. 具体可以查看下面的示例 .注意，RGB和HSV格式都支持.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            },
                            {
                                "Caption": "font_name",
                                "DataType": "String",
                                "Describe": "系统字体名,比如 宋体",
                                "Optional": false
                            },
                            {
                                "Caption": "font_size",
                                "DataType": "Integer",
                                "Describe": "系统字体尺寸，这个尺寸一定要以大漠综合工具获取的为准.如果获取尺寸看视频教程.",
                                "Optional": false
                            },
                            {
                                "Caption": "flag",
                                "DataType": "Integer",
                                "Describe": "字体类别 取值可以是以下值的组合,比如1+2+4+8,2+4. 0表示正常字体.<br>1 : 粗体<br>2 : 斜体<br>4 : 下划线<br>8 : 删除线",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "Ocr",
                    "Remark": "文字识别",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.Ocr(0, 0, 2000, 2000, \"9f2e3f-000000\", 0.9)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "Ocr",
                        "Define": "iRet = Ocr(x1, y1, x2, y2, color_format, sim)",
                        "Describe": "识别屏幕范围(x1,y1,x2,y2)内符合color_format的字符串,并且相似度为sim,sim取值范围(0.1-1.0),这个值越大越精确,越大速度越快,越小速度越慢,请斟酌使用!",
                        "RetType": "String",
                        "Return": "返回识别到的字符串",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "color_format",
                                "DataType": "String",
                                "Describe": "颜色格式串, 可以包含换行分隔符,语法是 , 后加分割字符串. 具体可以查看下面的示例 .注意，RGB和HSV格式都支持.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "OcrEx",
                    "Remark": "文字识别返回所有坐标",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.OcrEx(0, 0, 2000, 2000, \"9f2e3f-000000\", 0.9)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "OcrEx",
                        "Define": "iRet = OcrEx(x1, y1, x2, y2, color_format, sim)",
                        "Describe": "识别屏幕范围(x1,y1,x2,y2)内符合color_format的字符串,并且相似度为sim,sim取值范围(0.1-1.0),这个值越大越精确,越大速度越快,越小速度越慢,请斟酌使用!<br>这个函数可以返回识别到的字符串，以及每个字符的坐标.",
                        "RetType": "String",
                        "Return": "返回识别到的字符串 格式如 识别到的信息|x0,y0|…|xn,yn",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "color_format",
                                "DataType": "String",
                                "Describe": "颜色格式串, 可以包含换行分隔符,语法是 , 后加分割字符串. 具体可以查看下面的示例 .注意，RGB和HSV格式都支持.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "OcrInFile",
                    "Remark": "图像文字识别",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.OcrInFile(0, 0, 2000, 2000, \"test.bmp\", \"9f2e3f-000000\", 0.9)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "OcrInFile",
                        "Define": "iRet = OcrInFile(x1, y1, x2, y2, pic_name, color_format, sim)",
                        "Describe": "识别位图中区域(x1,y1,x2,y2)的文字",
                        "RetType": "String",
                        "Return": "返回识别到的字符串",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "pic_name",
                                "DataType": "String",
                                "Describe": "图片文件名.",
                                "Optional": false
                            },
                            {
                                "Caption": "color_format",
                                "DataType": "String",
                                "Describe": "颜色格式串, 可以包含换行分隔符,语法是 , 后加分割字符串. 具体可以查看下面的示例 .注意，RGB和HSV格式都支持.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetResultCount",
                    "Remark": "获取结果数量",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetResultCount(sRet)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetResultCount",
                        "Define": "iRet = GetResultCount(ret)",
                        "Describe": "对插件部分接口的返回值进行解析,并返回ret中的坐标个数.",
                        "RetType": "Integer",
                        "Return": "返回ret中的坐标个数",
                        "Param": [
                            {
                                "Caption": "ret",
                                "DataType": "String",
                                "Describe": "部分接口的返回串",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetResultPos",
                    "Remark": "获取结果坐标",
                    "Visible": false,
                    "Keyword": true,
                    "InsCode": "Dim As Long IntX, IntY<br>dm.GetResultPos(sRet, 1, IntX, IntY)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetResultPos",
                        "Define": "iRet = GetResultPos(ret, index, intX, intY)",
                        "Describe": "对插件部分接口的返回值进行解析,并根据指定的第index个坐标,返回具体的值",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "ret",
                                "DataType": "String",
                                "Describe": "部分接口的返回串",
                                "Optional": false
                            },
                            {
                                "Caption": "index",
                                "DataType": "Integer",
                                "Describe": "第几个坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "intX",
                                "DataType": "Integer",
                                "Describe": "返回X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "intY",
                                "DataType": "Integer",
                                "Describe": "返回Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetWordResultCount",
                    "Remark": "获取词组结果数量",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetWordResultCount(sRet)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetWordResultCount",
                        "Define": "iRet = GetWordResultCount(str)",
                        "Describe": "在使用GetWords进行词组识别以后,可以用此接口进行识别词组数量的计算.",
                        "RetType": "Integer",
                        "Return": "返回词组数量",
                        "Param": [
                            {
                                "Caption": "str",
                                "DataType": "String",
                                "Describe": "GetWords接口调用以后的返回值",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetWordResultPos",
                    "Remark": "获取词组结果坐标",
                    "Visible": false,
                    "Keyword": true,
                    "InsCode": "Dim As Long IntX, IntY<br>dm.GetWordResultPos(sRet, 1, IntX, IntY)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetWordResultPos",
                        "Define": "iRet = GetWordResultPos(str, index, intX, intY)",
                        "Describe": "在使用GetWords进行词组识别以后,可以用此接口进行识别各个词组的坐标",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "str",
                                "DataType": "String",
                                "Describe": "GetWords的返回值",
                                "Optional": false
                            },
                            {
                                "Caption": "index",
                                "DataType": "Integer",
                                "Describe": "表示第几个词组",
                                "Optional": false
                            },
                            {
                                "Caption": "intX",
                                "DataType": "Integer",
                                "Describe": "返回X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "intY",
                                "DataType": "Integer",
                                "Describe": "返回Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetWordResultStr",
                    "Remark": "获取词组结果内容",
                    "Visible": false,
                    "Keyword": true,
                    "InsCode": "dm.GetWordResultStr(sRet, 1)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetWordResultStr",
                        "Define": "iRet = GetWordResultStr(str, index)",
                        "Describe": "在使用GetWords进行词组识别以后,可以用此接口进行识别各个词组的内容",
                        "RetType": "String",
                        "Return": "返回的第index个词组内容",
                        "Param": [
                            {
                                "Caption": "str",
                                "DataType": "String",
                                "Describe": "GetWords的返回值",
                                "Optional": false
                            },
                            {
                                "Caption": "index",
                                "DataType": "Integer",
                                "Describe": "表示第几个词组",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetWords",
                    "Remark": "识别词组",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetWords(0, 0, 2000, 2000, \"000000-000000\", 0.9)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetWords",
                        "Define": "iRet = GetWords(x1, y1, x2, y2, color, sim)",
                        "Describe": "根据指定的范围,以及设定好的词组识别参数(一般不用更改,除非你真的理解了)<br>识别这个范围内所有满足条件的词组. 比较适合用在未知文字的情况下,进行不定识别.",
                        "RetType": "String",
                        "Return": "识别到的格式串,要用到专用函数来解析",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "color",
                                "DataType": "String",
                                "Describe": "颜色格式串.注意，RGB和HSV格式都支持.",
                                "Optional": false
                            },
                            {
                                "Caption": "sim",
                                "DataType": "Double",
                                "Describe": "相似度,取值范围0.1-1.0",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetWordsNoDict",
                    "Remark": "识别形状词组",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetWordsNoDict(0, 0, 2000, 2000, \"000000-000000\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetWordsNoDict",
                        "Define": "iRet = GetWordsNoDict(x1, y1, x2, y2, color)",
                        "Describe": "根据指定的范围,以及设定好的词组识别参数(一般不用更改,除非你真的理解了)<br>识别这个范围内所有满足条件的词组. 这个识别函数不会用到字库。只是识别大概形状的位置",
                        "RetType": "String",
                        "Return": "识别到的格式串,要用到专用函数来解析",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "color",
                                "DataType": "String",
                                "Describe": "颜色格式串.注意，RGB和HSV格式都支持.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FetchWord",
                    "Remark": "提取点阵信息",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FetchWord(0, 0, 2000, 2000, \"abcdef-101010|ffffff-101010\", \"张三\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FetchWord",
                        "Define": "iRet = FetchWord(x1, y1, x2, y2, color, word)",
                        "Describe": "根据指定的范围,以及指定的颜色描述，提取点阵信息，类似于大漠工具里的单独提取.",
                        "RetType": "String",
                        "Return": "识别到的点阵信息，可用于AddDict<br>如果失败，返回空",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "color",
                                "DataType": "String",
                                "Describe": "颜色格式串, 可以包含换行分隔符,语法是 , 后加分割字符串. 具体可以查看下面的示例 .注意，RGB和HSV格式都支持.",
                                "Optional": false
                            },
                            {
                                "Caption": "word",
                                "DataType": "String",
                                "Describe": "待定义的文字,不能为空，且不能为关键符号 $",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetExactOcr",
                    "Remark": "设置精准识别开关",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetExactOcr(1)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetExactOcr",
                        "Define": "iRet = SetExactOcr(exact_ocr)",
                        "Describe": "高级用户使用,在使用文字识别功能前，设定是否开启精准识别.",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "exact_ocr",
                                "DataType": "Integer",
                                "Describe": "0 表示关闭精准识别，1 开启精准识别",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetMinRowGap",
                    "Remark": "设置行间距",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetMinRowGap(1)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetMinRowGap",
                        "Define": "iRet = SetMinRowGap(min_row_gap)",
                        "Describe": "高级用户使用,在识别前,如果待识别区域有多行文字,可以设定行间距,默认的行间距是1,<br>如果根据情况设定,可以提高识别精度。一般不用设定。",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "min_row_gap",
                                "DataType": "Integer",
                                "Describe": "最小行间距",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetMinColGap",
                    "Remark": "设置列间距",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetMinColGap(1)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetMinColGap",
                        "Define": "iRet = SetMinColGap(min_col_gap)",
                        "Describe": "高级用户使用,在识别前,如果待识别区域有多行文字,可以设定列间距,默认的列间距是0,<br>如果根据情况设定,可以提高识别精度。一般不用设定。",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "min_col_gap",
                                "DataType": "Integer",
                                "Describe": "最小列间距",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetRowGapNoDict",
                    "Remark": "设置文字行距",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetRowGapNoDict(1)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetRowGapNoDict",
                        "Define": "iRet = SetRowGapNoDict(row_gap)",
                        "Describe": "高级用户使用,在不使用字库进行词组识别前,可设定文字的行距,默认行距是1",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "row_gap",
                                "DataType": "Integer",
                                "Describe": "文字行距",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetColGapNoDict",
                    "Remark": "设置文字列距",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetColGapNoDict(1)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetColGapNoDict",
                        "Define": "iRet = SetColGapNoDict(col_gap)",
                        "Describe": "高级用户使用,在不使用字库进行词组识别前,可设定文字的列距,默认列距是1",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "col_gap",
                                "DataType": "Integer",
                                "Describe": "文字列距",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetWordGap",
                    "Remark": "设置单词间距",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetWordGap(5)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetWordGap",
                        "Define": "iRet = SetWordGap(word_gap)",
                        "Describe": "高级用户使用,在识别词组前,可设定词组间的间隔,默认的词组间隔是5",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "word_gap",
                                "DataType": "Integer",
                                "Describe": "单词间距",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetWordGapNoDict",
                    "Remark": "设置单词间距",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetWordGapNoDict(5)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetWordGapNoDict",
                        "Define": "iRet = SetWordGapNoDict(word_gap)",
                        "Describe": "高级用户使用,在不使用字库进行词组识别前,可设定词组间的间隔,默认的词组间隔是5",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "word_gap",
                                "DataType": "Integer",
                                "Describe": "单词间距",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetWordLineHeight",
                    "Remark": "设置文字平均行高",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetWordLineHeight(5)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetWordLineHeight",
                        "Define": "iRet = SetWordLineHeight(line_height)",
                        "Describe": "高级用户使用,在识别词组前,可设定文字的平均行高,默认的词组行高是10",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "line_height",
                                "DataType": "Integer",
                                "Describe": "行高",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetWordLineHeightNoDict",
                    "Remark": "设置文字平均行高",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetWordLineHeightNoDict(5)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetWordLineHeightNoDict",
                        "Define": "iRet = SetWordLineHeightNoDict(line_height)",
                        "Describe": "高级用户使用,在不使用字库进行词组识别前,可设定文字的平均行高,默认的词组行高是10",
                        "RetType": "Boolean",
                        "Return": "0:失败，1:成功",
                        "Param": [
                            {
                                "Caption": "line_height",
                                "DataType": "Integer",
                                "Describe": "行高",
                                "Optional": false
                            }
                        ]
                    }
                }
            ]
        },
        {
            "Caption": "基本设置",
            "Icon": "文件夹",
            "Visible": true,
            "Templet": "index",
            "Help": {
                "Caption": ""
            },
            "Child": [
                {
                    "Caption": "Ver",
                    "Remark": "版本号",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.Ver()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "Ver",
                        "Define": "sRet = Ver()",
                        "Describe": "返回当前插件版本号",
                        "RetType": "String",
                        "Return": "当前插件的版本描述字符串",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "SetPath",
                    "Remark": "设置全局路径",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetPath(APP_ScriptName & \"res\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetPath",
                        "Define": "iRet = SetPath(path)",
                        "Describe": "设置全局路径,设置了此路径后,所有接口调用中,相关的文件都相对于此路径. 比如图片,字库等.",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "path",
                                "DataType": "String",
                                "Describe": "路径,可以是相对路径,也可以是绝对路径",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetPath",
                    "Remark": "获取全局路径",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetPath()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetPath",
                        "Define": "sRet = GetPath()",
                        "Describe": "获取全局路径.(可用于调试)",
                        "RetType": "String",
                        "Return": "以字符串的形式返回当前设置的全局路径",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "GetBasePath",
                    "Remark": "获取DLL所在路径",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetBasePath()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetBasePath",
                        "Define": "sRet = GetBasePath()",
                        "Describe": "获取注册在系统中的dm.dll的路径.",
                        "RetType": "String",
                        "Return": "返回dm.dll所在路径",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "SetShowErrorMsg",
                    "Remark": "设置是否弹出错误信息",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetShowErrorMsg(true)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetShowErrorMsg",
                        "Define": "iRet = SetShowErrorMsg(show)",
                        "Describe": "设置是否弹出错误信息,默认是打开.",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "show",
                                "DataType": "Boolean",
                                "Describe": "0表示不打开,1表示打开",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "Reg",
                    "Remark": "注册",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.Reg()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "Reg",
                        "Define": "iRet = Reg(reg_code, ver_info)",
                        "Describe": "非简单游平台使用，调用此函数来注册，从而使用插件的高级功能.推荐使用此函数.",
                        "RetType": "Integer",
                        "Return": "-1 : 无法连接网络,(可能防火墙拦截,如果可以正常访问大漠插件网站，那就可以肯定是被防火墙拦截)<br>-2 : 进程没有以管理员方式运行. (出现在win7 vista 2008.建议关闭uac)<br>0 : 失败 (未知错误)<br>1 : 成功<br>2 : 余额不足<br>3 : 绑定了本机器，但是账户余额不足50元.<br>4 : 注册码错误<br>5 : 你的机器或者IP在黑名单列表中或者不在白名单列表中.<br>-8 : 版本附加信息长度超过了10<br>-9 : 版本附加信息里包含了非法字母.",
                        "Param": [
                            {
                                "Caption": "reg_code",
                                "DataType": "String",
                                "Describe": "注册码. (从大漠插件后台获取)",
                                "Optional": false
                            },
                            {
                                "Caption": "ver_info",
                                "DataType": "String",
                                "Describe": "版本附加信息. 可以在后台详细信息查看. 可以任意填写. 可留空. 长度不能超过10. 并且只能包含数字和字母以及小数点. 这个版本信息不是插件版本.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "RegEx",
                    "Remark": "指定服务器注册",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.RegEx()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "RegEx",
                        "Define": "iRet = RegEx(reg_code, ver_info, ip)",
                        "Describe": "非简单游平台使用，调用此函数来注册，从而使用插件的高级功能. 可以根据指定的IP列表来注册. 新手不建议使用!",
                        "RetType": "Integer",
                        "Return": "-1 : 无法连接网络,(可能防火墙拦截,如果可以正常访问大漠插件网站，那就可以肯定是被防火墙拦截)<br>-2 : 进程没有以管理员方式运行. (出现在win7 vista 2008.建议关闭uac)<br>0 : 失败 (未知错误)<br>1 : 成功<br>2 : 余额不足<br>3 : 绑定了本机器，但是账户余额不足50元.<br>4 : 注册码错误<br>5 : 你的机器或者IP在黑名单列表中或者不在白名单列表中.<br>-8 : 版本附加信息长度超过了10<br>-9 : 版本附加信息里包含了非法字母.<br>-10 : 非法的参数ip",
                        "Param": [
                            {
                                "Caption": "reg_code",
                                "DataType": "String",
                                "Describe": "注册码. (从大漠插件后台获取)",
                                "Optional": false
                            },
                            {
                                "Caption": "ver_info",
                                "DataType": "String",
                                "Describe": "版本附加信息. 可以在后台详细信息查看. 可以任意填写. 可留空. 长度不能超过10. 并且只能包含数字和字母以及小数点. 这个版本信息不是插件版本.",
                                "Optional": false
                            },
                            {
                                "Caption": "ip",
                                "DataType": "String",
                                "Describe": "插件注册的ip地址.可以用|来组合,依次对ip中的地址进行注册，直到成功. ip地址列表在VIP群中获取.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "RegNoMac",
                    "Remark": "注册不带MAC",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.RegNoMac()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "RegNoMac",
                        "Define": "iRet = RegNoMac(reg_code, ver_info)",
                        "Describe": "非简单游平台使用，调用此函数来注册，从而使用插件的高级功能.推荐使用此函数. 新手不建议使用! 此函数同Reg函数的不同在于,此函数用于注册的机器码是不带mac地址的.",
                        "RetType": "Integer",
                        "Return": "-1 : 无法连接网络,(可能防火墙拦截,如果可以正常访问大漠插件网站，那就可以肯定是被防火墙拦截)<br>-2 : 进程没有以管理员方式运行. (出现在win7 vista 2008.建议关闭uac)<br>0 : 失败 (未知错误)<br>1 : 成功<br>2 : 余额不足<br>3 : 绑定了本机器，但是账户余额不足50元.<br>4 : 注册码错误<br>5 : 你的机器或者IP在黑名单列表中或者不在白名单列表中.<br>-8 : 版本附加信息长度超过了10<br>-9 : 版本附加信息里包含了非法字母.",
                        "Param": [
                            {
                                "Caption": "reg_code",
                                "DataType": "String",
                                "Describe": "注册码. (从大漠插件后台获取)",
                                "Optional": false
                            },
                            {
                                "Caption": "ver_info",
                                "DataType": "String",
                                "Describe": "版本附加信息. 可以在后台详细信息查看. 可以任意填写. 可留空. 长度不能超过10. 并且只能包含数字和字母以及小数点. 这个版本信息不是插件版本.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "RegExNoMac",
                    "Remark": "指定服务器注册不带MAC",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.RegExNoMac()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "RegExNoMac",
                        "Define": "iRet = RegExNoMac(reg_code, ver_info, ip)",
                        "Describe": "非简单游平台使用，调用此函数来注册，从而使用插件的高级功能. 可以根据指定的IP列表来注册.新手不建议使用! 此函数同RegEx函数的不同在于,此函数用于注册的机器码是不带mac地址的.",
                        "RetType": "Integer",
                        "Return": "-1 : 无法连接网络,(可能防火墙拦截,如果可以正常访问大漠插件网站，那就可以肯定是被防火墙拦截)<br>-2 : 进程没有以管理员方式运行. (出现在win7 vista 2008.建议关闭uac)<br>0 : 失败 (未知错误)<br>1 : 成功<br>2 : 余额不足<br>3 : 绑定了本机器，但是账户余额不足50元.<br>4 : 注册码错误<br>5 : 你的机器或者IP在黑名单列表中或者不在白名单列表中.<br>-8 : 版本附加信息长度超过了10<br>-9 : 版本附加信息里包含了非法字母.<br>-10 : 非法的参数ip",
                        "Param": [
                            {
                                "Caption": "reg_code",
                                "DataType": "String",
                                "Describe": "注册码. (从大漠插件后台获取)",
                                "Optional": false
                            },
                            {
                                "Caption": "ver_info",
                                "DataType": "String",
                                "Describe": "版本附加信息. 可以在后台详细信息查看. 可以任意填写. 可留空. 长度不能超过10. 并且只能包含数字和字母以及小数点. 这个版本信息不是插件版本.",
                                "Optional": false
                            },
                            {
                                "Caption": "ip",
                                "DataType": "String",
                                "Describe": "插件注册的ip地址.可以用|来组合,依次对ip中的地址进行注册，直到成功. ip地址列表在VIP群中获取.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetID",
                    "Remark": "获取对象ID",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetID()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetID",
                        "Define": "iRet = GetID()",
                        "Describe": "返回当前大漠对象的ID值，这个值对于每个对象是唯一存在的。可以用来判定两个大漠对象是否一致.",
                        "RetType": "Integer",
                        "Return": "当前对象的ID值.",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "GetLastError",
                    "Remark": "获取最后的错误",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetLastError()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetLastError",
                        "Define": "iRet = GetLastError()",
                        "Describe": "获取插件命令的最后错误",
                        "RetType": "Integer",
                        "Return": "返回值表示错误值。 0表示无错误.",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "GetDmCount",
                    "Remark": "已创建的对象个数",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetDmCount()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetDmCount",
                        "Define": "iRet = GetDmCount()",
                        "Describe": "返回当前进程已经创建的dm对象个数.    收费功能",
                        "RetType": "Integer",
                        "Return": "个数",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "SetDisplayInput",
                    "Remark": "设置图色获取方式",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetDisplayInput(\"screen\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetDisplayInput",
                        "Define": "iRet = SetDisplayInput(mode)",
                        "Describe": "设定图色的获取方式，默认是显示器或者后台窗口(具体参考BindWindow)",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "mode",
                                "DataType": "String",
                                "Describe": "图色输入模式取值有以下几种<br>1. screen 这个是默认的模式，表示使用显示器或者后台窗口<br>2. pic:file 指定输入模式为指定的图片,如果使用了这个模式，则所有和图色相关的函数均视为对此图片进行处理，比如文字识别查找图片 颜色 等等一切图色函数.<br>需要注意的是，设定以后，此图片就已经加入了缓冲，如果更改了源图片内容，那么需要释放此缓冲，重新设置.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetEnumWindowDelay",
                    "Remark": "设置枚举窗口超时时间",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetEnumWindowDelay(30000)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetEnumWindowDelay",
                        "Define": "iRet = SetEnumWindowDelay(delay)",
                        "Describe": "设置EnumWindow  EnumWindowByProcess  EnumWindowSuper的最长延时. 内部默认超时是5秒.    收费功能",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "delay",
                                "DataType": "Integer",
                                "Describe": "单位毫秒",
                                "Optional": false
                            }
                        ]
                    }
                }
            ]
        },
        {
            "Caption": "后台设置",
            "Icon": "文件夹",
            "Visible": true,
            "Templet": "index",
            "Help": {
                "Caption": ""
            },
            "Child": [
                {
                    "Caption": "BindWindow",
                    "Remark": "绑定窗口",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.BindWindow(hWin, \"windows\", \"windows\", \"windows\", 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "BindWindow",
                        "Define": "iRet = BindWindow(hwnd, display, mouse, keypad, mode)",
                        "Describe": "绑定指定的窗口,并指定这个窗口的屏幕颜色获取方式,鼠标仿真模式,键盘仿真模式,以及模式设定,高级用户可以参考BindWindowEx更加灵活强大.",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功，如果返回0，可以调用GetLastError来查看具体失败错误码,帮助分析问题.",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定的窗口句柄",
                                "Optional": false
                            },
                            {
                                "Caption": "display",
                                "DataType": "String",
                                "Describe": "屏幕颜色获取方式",
                                "Optional": false
                            },
                            {
                                "Caption": "mouse",
                                "DataType": "String",
                                "Describe": "鼠标仿真模式",
                                "Optional": false
                            },
                            {
                                "Caption": "keypad",
                                "DataType": "String",
                                "Describe": "键盘仿真模式",
                                "Optional": false
                            },
                            {
                                "Caption": "mode",
                                "DataType": "Integer",
                                "Describe": "模式",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "BindWindowEx",
                    "Remark": "绑定窗口",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.BindWindowEx(hWin, \"windows\", \"windows\", \"windows\", \"\", 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "BindWindowEx",
                        "Define": "iRet = BindWindowEx(hwnd, display, mouse, keypad, public, mode)",
                        "Describe": "绑定指定的窗口,并指定这个窗口的屏幕颜色获取方式,鼠标仿真模式,键盘仿真模式 高级用户使用.",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功，如果返回0，可以调用GetLastError来查看具体失败错误码,帮助分析问题.",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定的窗口句柄",
                                "Optional": false
                            },
                            {
                                "Caption": "display",
                                "DataType": "String",
                                "Describe": "屏幕颜色获取方式",
                                "Optional": false
                            },
                            {
                                "Caption": "mouse",
                                "DataType": "String",
                                "Describe": "鼠标仿真模式",
                                "Optional": false
                            },
                            {
                                "Caption": "keypad",
                                "DataType": "String",
                                "Describe": "键盘仿真模式",
                                "Optional": false
                            },
                            {
                                "Caption": "public",
                                "DataType": "String",
                                "Describe": "公共属性",
                                "Optional": false
                            },
                            {
                                "Caption": "mode",
                                "DataType": "Integer",
                                "Describe": "模式",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "UnBindWindow",
                    "Remark": "解绑窗口",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.UnBindWindow()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "UnBindWindow",
                        "Define": "iRet = UnBindWindow()",
                        "Describe": "解除绑定窗口,并释放系统资源.",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "ForceUnBindWindow",
                    "Remark": "暴力解绑窗口",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.ForceUnBindWindow(hWin)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "ForceUnBindWindow",
                        "Define": "iRet = ForceUnBindWindow(hwnd)",
                        "Describe": "强制解除绑定窗口,并释放系统资源.    收费功能",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "需要强制解除绑定的窗口句柄.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "EnableBind",
                    "Remark": "暂时关闭绑定",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.EnableBind(0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "EnableBind",
                        "Define": "iRet = EnableBind(enable)",
                        "Describe": "设置是否暂时关闭或者开启后台功能. 默认是开启.    收费功能",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "enable",
                                "DataType": "Integer",
                                "Describe": "0 全部关闭(图色键鼠都关闭,也就是说图色,键鼠都是前台,但是如果有指定dx.public.active.message时，在窗口前后台切换时，这个属性会失效.)<br>-1 只关闭图色.(也就是说图色是normal前台. 键鼠不变)<br>1 开启(恢复原始状态)<br>5 同0，也是全部关闭，但是这个模式下，就算窗口在前后台切换时，属性dx.public.active.message的效果也一样不会失效.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "IsBind",
                    "Remark": "判断是否已绑定",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.IsBind(hWin)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "IsBind",
                        "Define": "iRet = IsBind(hwnd)",
                        "Describe": "判定指定窗口是否已经被后台绑定. (前台无法判定)    收费功能",
                        "RetType": "Boolean",
                        "Return": "0: 没绑定,或者窗口不存在，1: 已经绑定.",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "窗口句柄",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "DownCpu",
                    "Remark": "降低CPU占用",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.DownCpu(50)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "DownCpu",
                        "Define": "iRet = DownCpu(rate)",
                        "Describe": "降低目标窗口所在进程的CPU占用",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "rate",
                                "DataType": "Integer",
                                "Describe": "取值范围0到100   取值为0 表示关闭CPU优化. 这个值越大表示降低CPU效果越好.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetSimMode",
                    "Remark": "设置模拟方式",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetSimMode(1)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetSimMode",
                        "Define": "iRet = SetSimMode(mode)",
                        "Describe": "设置前台键鼠的模拟方式.    收费功能",
                        "RetType": "Integer",
                        "Return": "0  : 插件没注册<br>-1 : 64位平台不支持<br>-2 : 驱动释放失败.<br>-3 : 驱动加载失败.可能是权限不够. 参考UAC权限设置.<br>1  : 成功",
                        "Param": [
                            {
                                "Caption": "mode",
                                "DataType": "Integer",
                                "Describe": "0 正常模式(默认模式)，1 超级模拟，2 硬件模拟",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "LockDisplay",
                    "Remark": "锁定图色刷新",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.LockDisplay(1)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "LockDisplay",
                        "Define": "iRet = LockDisplay(lock)",
                        "Describe": "锁定指定窗口的图色数据(不刷新).    收费功能",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "lock",
                                "DataType": "Integer",
                                "Describe": "0 关闭锁定，1 开启锁定",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "LockInput",
                    "Remark": "锁定外部输入",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.LockInput(1)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "LockInput",
                        "Define": "iRet = LockInput(lock)",
                        "Describe": "禁止外部输入到指定窗口",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "lock",
                                "DataType": "Integer",
                                "Describe": "0 关闭锁定，1 开启锁定(键盘鼠标都锁定)，2 只锁定鼠标，3 只锁定键盘",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "LockMouseRect",
                    "Remark": "锁定鼠标活动范围",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.LockMouseRect(0, 0, 0, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "LockMouseRect",
                        "Define": "iRet = LockMouseRect(x1, y1, x2, y2)",
                        "Describe": "设置前台鼠标在屏幕上的活动范围. 4个参数都是0,表示恢复鼠标活动范围为整个屏幕区域.",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "区域的左上X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "区域的左上Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "区域的右下X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "区域的右下Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetDisplayDelay",
                    "Remark": "设置截图等待时间",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetDisplayDelay(3000)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetDisplayDelay",
                        "Define": "iRet = SetDisplayDelay(time)",
                        "Describe": "设置dx截图最长等待时间。内部默认是3000毫秒. 一般用不到调整这个.<br>注: 此接口仅对图色为dx.graphic.3d   dx.graphic.3d.8  dx.graphic.2d   dx.graphic.2d.2有效. 其他图色模式无效.<br>默认情况下，截图需要等待一个延时，超时就认为截图失败. 这个接口可以调整这个延时. 某些时候或许有用.比如当窗口图色卡死(这时获取图色一定都是超时)，并且要判断窗口卡死，那么这个设置就很有用了。",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "time",
                                "DataType": "Integer",
                                "Describe": "等待时间，单位是毫秒。 注意这里不能设置的过小，否则可能会导致截图失败,从而导致图色函数和文字识别失败.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "EnableFakeActive",
                    "Remark": "设置截图等待时间",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.EnableFakeActive(3000)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "EnableFakeActive",
                        "Define": "iRet = EnableFakeActive(enable)",
                        "Describe": "设置是否开启后台假激活功能. 默认是关闭. 一般用不到. 除非有人有特殊需求.<br>注: 此接口的含义并不是关闭或者开启窗口假激活功能(dx.public.active.api或者dx.public.active.message). 而是说有些时候，本来窗口没有激活并且在没有绑定的状态下，可以正常使用的功能，而在窗口绑定以后,并且窗口在非激活状态下,此时由于绑定的锁定导致无法使用. 那么，你就需要把你的部分代码用EnableFakeActive来保护起来。这样就让我的插件认为你的这段代码是在窗口激活状态下执行.<br>另外，此函数开启以后，有可能会让前台影响到后台. 所以如果不是特殊情况，最好是关闭. <br>有些时候，有人会故意利用这个前台影响后台的作用，做类似同步器的软件，那这个函数就很有作用了.",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "enable",
                                "DataType": "Integer",
                                "Describe": "0 关闭，1 开启",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "EnableIme",
                    "Remark": "开关输入法",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.EnableIme(0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "EnableIme",
                        "Define": "iRet = EnableIme(enable)",
                        "Describe": "设置是否关闭绑定窗口所在进程的输入法，此函数必须在绑定后调用才有效果.",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "enable",
                                "DataType": "Integer",
                                "Describe": "0 关闭，1 开启",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "EnableKeypadMsg",
                    "Remark": "使用DX键盘时开启消息",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.EnableKeypadMsg(0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "EnableKeypadMsg",
                        "Define": "iRet = EnableKeypadMsg(enable)",
                        "Describe": "是否在使用dx键盘时开启windows消息.默认开启.    收费功能",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "enable",
                                "DataType": "Integer",
                                "Describe": "0 关闭，1 开启",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "EnableMouseMsg",
                    "Remark": "使用DX鼠标时开启消息",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.EnableMouseMsg(0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "EnableMouseMsg",
                        "Define": "iRet = EnableMouseMsg(enable)",
                        "Describe": "是否在使用dx鼠标时开启windows消息.默认开启.    收费功能",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "enable",
                                "DataType": "Integer",
                                "Describe": "0 关闭，1 开启",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "EnableKeypadSync",
                    "Remark": "同步发送键盘消息",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.EnableKeypadSync(0, 1000)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "EnableKeypadSync",
                        "Define": "iRet = EnableKeypadSync(enable, time_out)",
                        "Describe": "键盘消息采用同步发送模式.默认异步.    收费功能",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "enable",
                                "DataType": "Integer",
                                "Describe": "0 禁止同步，1 开启同步",
                                "Optional": false
                            },
                            {
                                "Caption": "time_out",
                                "DataType": "Integer",
                                "Describe": "单位是毫秒,表示同步等待的最大时间.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "EnableMouseSync",
                    "Remark": "同步发送鼠标消息",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.EnableMouseSync(0, 1000)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "EnableMouseSync",
                        "Define": "iRet = EnableMouseSync(enable, time_out)",
                        "Describe": "键盘消息采用同步发送模式.默认异步.    收费功能",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "enable",
                                "DataType": "Integer",
                                "Describe": "0 禁止同步，1 开启同步",
                                "Optional": false
                            },
                            {
                                "Caption": "time_out",
                                "DataType": "Integer",
                                "Describe": "单位是毫秒,表示同步等待的最大时间.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "EnableKeypadPatch",
                    "Remark": "键盘消息发送补丁",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.EnableKeypadPatch(0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "EnableKeypadPatch",
                        "Define": "iRet = EnableKeypadPatch(enable)",
                        "Describe": "键盘消息发送补丁. 默认是关闭.    收费功能",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "enable",
                                "DataType": "Integer",
                                "Describe": "0 关闭，1 开启",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "EnableRealKeypad",
                    "Remark": "模拟真实键盘操作",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.EnableRealKeypad(0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "EnableRealKeypad",
                        "Define": "iRet = EnableRealKeypad(enable)",
                        "Describe": "键盘动作模拟真实操作,点击延时随机.    收费功能",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "enable",
                                "DataType": "Integer",
                                "Describe": "0 关闭模拟，1 开启模拟",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "EnableRealMouse",
                    "Remark": "模拟真实鼠标操作",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.EnableRealMouse(1, 20, 50)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "EnableRealMouse",
                        "Define": "iRet = EnableRealMouse(enable, mousedelay, mousestep)",
                        "Describe": "鼠标动作模拟真实操作,带移动轨迹,以及点击延时随机.    收费功能",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "enable",
                                "DataType": "Integer",
                                "Describe": "0 关闭模拟，1 开启模拟",
                                "Optional": false
                            },
                            {
                                "Caption": "mousedelay",
                                "DataType": "Integer",
                                "Describe": "单位是毫秒. 表示在模拟鼠标移动轨迹时,每移动一次的时间间隔.这个值越大,鼠标移动越慢.",
                                "Optional": false
                            },
                            {
                                "Caption": "mousestep",
                                "DataType": "Integer",
                                "Describe": "表示在模拟鼠标移动轨迹时,每移动一次的距离. 这个值越大，鼠标移动越快速.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "EnableSpeedDx",
                    "Remark": "高速dx键鼠模式",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.EnableSpeedDx(0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "EnableSpeedDx",
                        "Define": "iRet = EnableSpeedDx(enable)",
                        "Describe": "设置是否开启高速dx键鼠模式。 默认是关闭.",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "enable",
                                "DataType": "Integer",
                                "Describe": "0 关闭，1 开启",
                                "Optional": false
                            }
                        ]
                    }
                }
            ]
        },
        {
            "Caption": "窗口操作",
            "Icon": "文件夹",
            "Visible": true,
            "Templet": "index",
            "Help": {
                "Caption": ""
            },
            "Child": [
                {
                    "Caption": "FindWindow",
                    "Remark": "查找窗口",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindWindow(\"\", \"记事本\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindWindow",
                        "Define": "iRet = FindWindow(class, title)",
                        "Describe": "查找符合类名或者标题名的顶层可见窗口",
                        "RetType": "Integer",
                        "Return": "整形数表示的窗口句柄，没找到返回0",
                        "Param": [
                            {
                                "Caption": "class",
                                "DataType": "String",
                                "Describe": "窗口类名，如果为空，则匹配所有. 这里的匹配是模糊匹配.",
                                "Optional": false
                            },
                            {
                                "Caption": "title",
                                "DataType": "String",
                                "Describe": "窗口标题,如果为空，则匹配所有.这里的匹配是模糊匹配.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindWindowEx",
                    "Remark": "查找子窗口",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindWindowEx(0, \"\", \"记事本\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindWindowEx",
                        "Define": "iRet = FindWindowEx(parent, class, title)",
                        "Describe": "查找符合类名或者标题名的顶层可见窗口,如果指定了parent,则在parent的第一层子窗口中查找.",
                        "RetType": "Integer",
                        "Return": "整形数表示的窗口句柄，没找到返回0",
                        "Param": [
                            {
                                "Caption": "parent",
                                "DataType": "Integer",
                                "Describe": "父窗口句柄，如果为空，则匹配所有顶层窗口.",
                                "Optional": false
                            },
                            {
                                "Caption": "class",
                                "DataType": "String",
                                "Describe": "窗口类名，如果为空，则匹配所有. 这里的匹配是模糊匹配.",
                                "Optional": false
                            },
                            {
                                "Caption": "title",
                                "DataType": "String",
                                "Describe": "窗口标题,如果为空，则匹配所有.这里的匹配是模糊匹配.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindWindowByProcess",
                    "Remark": "根据进程名查找窗口",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindWindowByProcess(\"noteapd.exe\", \"\", \"记事本\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindWindowByProcess",
                        "Define": "iRet = FindWindowByProcess(process_name, class, title)",
                        "Describe": "根据指定的进程名字，来查找可见窗口.    收费功能",
                        "RetType": "Integer",
                        "Return": "整形数表示的窗口句柄，没找到返回0",
                        "Param": [
                            {
                                "Caption": "process_name",
                                "DataType": "String",
                                "Describe": "进程名. 比如(notepad.exe).这里是精确匹配,但不区分大小写.",
                                "Optional": false
                            },
                            {
                                "Caption": "class",
                                "DataType": "String",
                                "Describe": "窗口类名，如果为空，则匹配所有. 这里的匹配是模糊匹配.",
                                "Optional": false
                            },
                            {
                                "Caption": "title",
                                "DataType": "String",
                                "Describe": "窗口标题,如果为空，则匹配所有.这里的匹配是模糊匹配.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindWindowByProcessId",
                    "Remark": "根据进程PID查找窗口",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindWindowByProcessId(123456, \"\", \"记事本\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindWindowByProcessId",
                        "Define": "iRet = FindWindowByProcessId(process_id, class, title)",
                        "Describe": "根据指定的进程Id，来查找可见窗口.    收费功能",
                        "RetType": "Integer",
                        "Return": "整形数表示的窗口句柄，没找到返回0",
                        "Param": [
                            {
                                "Caption": "process_id",
                                "DataType": "Integer",
                                "Describe": "进程id.",
                                "Optional": false
                            },
                            {
                                "Caption": "class",
                                "DataType": "String",
                                "Describe": "窗口类名，如果为空，则匹配所有. 这里的匹配是模糊匹配.",
                                "Optional": false
                            },
                            {
                                "Caption": "title",
                                "DataType": "String",
                                "Describe": "窗口标题,如果为空，则匹配所有.这里的匹配是模糊匹配.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindWindowSuper",
                    "Remark": "多条件查找窗口",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindWindowSuper(\"记事本\", 0, 1, \"notepad\", 1, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindWindowSuper",
                        "Define": "iRet = FindWindowSuper(spec1, flag1, type1, spec2, flag2, type2)",
                        "Describe": "根据两组设定条件来查找指定窗口.    收费功能",
                        "RetType": "Integer",
                        "Return": "整形数表示的窗口句柄，没找到返回0",
                        "Param": [
                            {
                                "Caption": "spec1",
                                "DataType": "String",
                                "Describe": "查找串1. (内容取决于flag1的值).",
                                "Optional": false
                            },
                            {
                                "Caption": "flag1",
                                "DataType": "Integer",
                                "Describe": "0表示spec1的内容是标题<br>1表示spec1的内容是程序名字. (比如notepad)<br>2表示spec1的内容是类名<br>3表示spec1的内容是程序路径.(不包含盘符,比如\\\\windows\\\\system32)<br>4表示spec1的内容是父句柄.(十进制表达的串)<br>5表示spec1的内容是父窗口标题<br>6表示spec1的内容是父窗口类名<br>7表示spec1的内容是顶级窗口句柄.(十进制表达的串)<br>8表示spec1的内容是顶级窗口标题<br>9表示spec1的内容是顶级窗口类名",
                                "Optional": false
                            },
                            {
                                "Caption": "type1",
                                "DataType": "Integer",
                                "Describe": "0精确判断，1模糊判断",
                                "Optional": false
                            },
                            {
                                "Caption": "spec2",
                                "DataType": "String",
                                "Describe": "查找串2. (内容取决于flag2的值).",
                                "Optional": false
                            },
                            {
                                "Caption": "flag2",
                                "DataType": "Integer",
                                "Describe": "0表示spec2的内容是标题<br>1表示spec2的内容是程序名字. (比如notepad)<br>2表示spec2的内容是类名<br>3表示spec2的内容是程序路径.(不包含盘符,比如\\\\windows\\\\system32)<br>4表示spec2的内容是父句柄.(十进制表达的串)<br>5表示spec2的内容是父窗口标题<br>6表示spec2的内容是父窗口类名<br>7表示spec2的内容是顶级窗口句柄.(十进制表达的串)<br>8表示spec2的内容是顶级窗口标题<br>9表示spec2的内容是顶级窗口类名",
                                "Optional": false
                            },
                            {
                                "Caption": "type2",
                                "DataType": "Integer",
                                "Describe": "0精确判断，1模糊判断",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "EnumWindow",
                    "Remark": "枚举窗口",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.EnumWindow(0, \"QQ三国\", \"\", 1 + 4 + 8 + 16)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "EnumWindow",
                        "Define": "iRet = EnumWindow(parent, title, class_name, filter)",
                        "Describe": "根据指定条件,枚举系统中符合条件的窗口,可以枚举到按键自带的无法枚举到的窗口",
                        "RetType": "String",
                        "Return": "返回所有匹配的窗口句柄字符串,格式 hwnd1,hwnd2,hwnd3",
                        "Param": [
                            {
                                "Caption": "parent",
                                "DataType": "Integer",
                                "Describe": "获得的窗口句柄是该窗口的子窗口的窗口句柄,取0时为获得桌面句柄",
                                "Optional": false
                            },
                            {
                                "Caption": "title",
                                "DataType": "String",
                                "Describe": "窗口标题. 此参数是模糊匹配.",
                                "Optional": false
                            },
                            {
                                "Caption": "class_name",
                                "DataType": "String",
                                "Describe": "窗口类名. 此参数是模糊匹配.",
                                "Optional": false
                            },
                            {
                                "Caption": "filter",
                                "DataType": "Integer",
                                "Describe": "取值定义如下：<br>1 : 匹配窗口标题,参数title有效<br>2 : 匹配窗口类名,参数class_name有效.<br>4 : 只匹配指定父窗口的第一层孩子窗口<br>8 : 匹配所有者窗口为0的窗口,即顶级窗口<br>16 : 匹配可见的窗口<br>32 : 匹配出的窗口按照窗口打开顺序依次排列 [收费功能]",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "EnumWindowByProcess",
                    "Remark": "枚举进程窗口",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.EnumWindowByProcess(\"game.exe\", \"天龙八部\", \"\", 1 + 8 + 16)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "EnumWindowByProcess",
                        "Define": "iRet = EnumWindowByProcess(process_name, title, class_name, filter)",
                        "Describe": "根据指定进程以及其它条件,枚举系统中符合条件的窗口,可以枚举到按键自带的无法枚举到的窗口",
                        "RetType": "String",
                        "Return": "返回所有匹配的窗口句柄字符串,格式 hwnd1,hwnd2,hwnd3",
                        "Param": [
                            {
                                "Caption": "process_name",
                                "DataType": "String",
                                "Describe": "进程映像名.比如(svchost.exe). 此参数是精确匹配,但不区分大小写.",
                                "Optional": false
                            },
                            {
                                "Caption": "title",
                                "DataType": "String",
                                "Describe": "窗口标题. 此参数是模糊匹配.",
                                "Optional": false
                            },
                            {
                                "Caption": "class_name",
                                "DataType": "String",
                                "Describe": "窗口类名. 此参数是模糊匹配.",
                                "Optional": false
                            },
                            {
                                "Caption": "filter",
                                "DataType": "Integer",
                                "Describe": "取值定义如下：<br>1 : 匹配窗口标题,参数title有效<br>2 : 匹配窗口类名,参数class_name有效.<br>4 : 只匹配指定父窗口的第一层孩子窗口<br>8 : 匹配所有者窗口为0的窗口,即顶级窗口<br>16 : 匹配可见的窗口<br>32 : 匹配出的窗口按照窗口打开顺序依次排列 [收费功能]",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "EnumWindowSuper",
                    "Remark": "多条件枚举窗口",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.EnumWindowSuper(\"记事本\", 0, 1, \"notepad\", 1, 0, true)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "EnumWindowSuper",
                        "Define": "iRet = EnumWindowSuper(spec1, flag1, type1, spec2, flag2, type2, sort)",
                        "Describe": "根据两组设定条件来枚举指定窗口.    收费功能",
                        "RetType": "String",
                        "Return": "返回所有匹配的窗口句柄字符串,格式 hwnd1,hwnd2,hwnd3",
                        "Param": [
                            {
                                "Caption": "spec1",
                                "DataType": "String",
                                "Describe": "查找串1. (内容取决于flag1的值).",
                                "Optional": false
                            },
                            {
                                "Caption": "flag1",
                                "DataType": "Integer",
                                "Describe": "0表示spec1的内容是标题<br>1表示spec1的内容是程序名字. (比如notepad)<br>2表示spec1的内容是类名<br>3表示spec1的内容是程序路径.(不包含盘符,比如\\\\windows\\\\system32)<br>4表示spec1的内容是父句柄.(十进制表达的串)<br>5表示spec1的内容是父窗口标题<br>6表示spec1的内容是父窗口类名<br>7表示spec1的内容是顶级窗口句柄.(十进制表达的串)<br>8表示spec1的内容是顶级窗口标题<br>9表示spec1的内容是顶级窗口类名",
                                "Optional": false
                            },
                            {
                                "Caption": "type1",
                                "DataType": "Integer",
                                "Describe": "0精确判断，1模糊判断",
                                "Optional": false
                            },
                            {
                                "Caption": "spec2",
                                "DataType": "String",
                                "Describe": "查找串2. (内容取决于flag2的值).",
                                "Optional": false
                            },
                            {
                                "Caption": "flag2",
                                "DataType": "Integer",
                                "Describe": "0表示spec2的内容是标题<br>1表示spec2的内容是程序名字. (比如notepad)<br>2表示spec2的内容是类名<br>3表示spec2的内容是程序路径.(不包含盘符,比如\\\\windows\\\\system32)<br>4表示spec2的内容是父句柄.(十进制表达的串)<br>5表示spec2的内容是父窗口标题<br>6表示spec2的内容是父窗口类名<br>7表示spec2的内容是顶级窗口句柄.(十进制表达的串)<br>8表示spec2的内容是顶级窗口标题<br>9表示spec2的内容是顶级窗口类名",
                                "Optional": false
                            },
                            {
                                "Caption": "type2",
                                "DataType": "Integer",
                                "Describe": "0精确判断，1模糊判断",
                                "Optional": false
                            },
                            {
                                "Caption": "sort",
                                "DataType": "Boolean",
                                "Describe": "0不排序，1对枚举出的窗口进行排序,按照窗口打开顺序.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetForegroundWindow",
                    "Remark": "获取活动窗口",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetForegroundWindow()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetForegroundWindow",
                        "Define": "iRet = GetForegroundWindow()",
                        "Describe": "获取顶层活动窗口,可以获取到按键自带插件无法获取到的句柄",
                        "RetType": "Integer",
                        "Return": "返回整型表示的窗口句柄",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "GetForegroundFocus",
                    "Remark": "获取活动子窗口",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetForegroundFocus()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetForegroundFocus",
                        "Define": "iRet = GetForegroundFocus()",
                        "Describe": "获取顶层活动窗口中具有输入焦点的窗口句柄",
                        "RetType": "Integer",
                        "Return": "返回整型表示的窗口句柄",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "GetMousePointWindow",
                    "Remark": "获取鼠标位置窗口",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetMousePointWindow()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetMousePointWindow",
                        "Define": "iRet = GetMousePointWindow()",
                        "Describe": "获取鼠标指向的窗口句柄,可以获取到按键自带的插件无法获取到的句柄",
                        "RetType": "Integer",
                        "Return": "返回整型表示的窗口句柄",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "GetPointWindow",
                    "Remark": "获取指定位置窗口",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetPointWindow(100, 100)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetPointWindow",
                        "Define": "iRet = GetPointWindow(x, y)",
                        "Describe": "获取给定坐标的窗口句柄,可以获取到按键自带的插件无法获取到的句柄",
                        "RetType": "Integer",
                        "Return": "返回整型表示的窗口句柄",
                        "Param": [
                            {
                                "Caption": "x",
                                "DataType": "Integer",
                                "Describe": "屏幕X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y",
                                "DataType": "Integer",
                                "Describe": "屏幕Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetSpecialWindow",
                    "Remark": "获取特殊窗口",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetSpecialWindow(0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetSpecialWindow",
                        "Define": "iRet = GetSpecialWindow(flag)",
                        "Describe": "获取特殊窗口",
                        "RetType": "Integer",
                        "Return": "返回整型表示的窗口句柄",
                        "Param": [
                            {
                                "Caption": "flag",
                                "DataType": "Integer",
                                "Describe": "0 : 获取桌面窗口、1 : 获取任务栏窗口",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetWindow",
                    "Remark": "获取相关窗口",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetWindow(hWin, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetWindow",
                        "Define": "iRet = GetWindow(hWnd, flag)",
                        "Describe": "获取给定窗口相关的窗口句柄",
                        "RetType": "Integer",
                        "Return": "返回整型表示的窗口句柄",
                        "Param": [
                            {
                                "Caption": "hWnd",
                                "DataType": "Integer",
                                "Describe": "窗口句柄",
                                "Optional": false
                            },
                            {
                                "Caption": "flag",
                                "DataType": "Integer",
                                "Describe": "取值定义如下<br>0 : 获取父窗口<br>1 : 获取第一个儿子窗口<br>2 : 获取First 窗口<br>3 : 获取Last窗口<br>4 : 获取下一个窗口<br>5 : 获取上一个窗口<br>6 : 获取拥有者窗口<br>7 : 获取顶层窗口",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetWindowClass",
                    "Remark": "获取窗口类名",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetWindowClass(hWin)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetWindowClass",
                        "Define": "iRet = GetWindowClass(hWnd)",
                        "Describe": "获取窗口的类名",
                        "RetType": "String",
                        "Return": "窗口的类名",
                        "Param": [
                            {
                                "Caption": "hWnd",
                                "DataType": "Integer",
                                "Describe": "指定的窗口句柄",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetWindowTitle",
                    "Remark": "获取窗口标题",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetWindowTitle(hWin)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetWindowTitle",
                        "Define": "iRet = GetWindowTitle(hWnd)",
                        "Describe": "获取窗口的标题",
                        "RetType": "String",
                        "Return": "窗口的标题",
                        "Param": [
                            {
                                "Caption": "hWnd",
                                "DataType": "Integer",
                                "Describe": "指定的窗口句柄",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetWindowState",
                    "Remark": "获取窗口状态",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetWindowState(hWin, 1)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetWindowState",
                        "Define": "iRet = GetWindowState(hWnd, flag)",
                        "Describe": "获取指定窗口的一些属性",
                        "RetType": "Boolean",
                        "Return": "0: 不满足条件，1: 满足条件",
                        "Param": [
                            {
                                "Caption": "hWnd",
                                "DataType": "Integer",
                                "Describe": "指定的窗口句柄",
                                "Optional": false
                            },
                            {
                                "Caption": "flag",
                                "DataType": "Integer",
                                "Describe": "取值定义如下<br>0 : 判断窗口是否存在<br>1 : 判断窗口是否处于激活<br>2 : 判断窗口是否可见<br>3 : 判断窗口是否最小化<br>4 : 判断窗口是否最大化<br>5 : 判断窗口是否置顶<br>6 : 判断窗口是否无响应",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetWindowProcessId",
                    "Remark": "获取窗口进程PID",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetWindowProcessId(hWin)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetWindowProcessId",
                        "Define": "iRet = GetWindowProcessId(hWnd)",
                        "Describe": "获取指定窗口所在的进程ID.",
                        "RetType": "Integer",
                        "Return": "返回整型表示的是进程ID",
                        "Param": [
                            {
                                "Caption": "hWnd",
                                "DataType": "Integer",
                                "Describe": "指定的窗口句柄",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetWindowProcessPath",
                    "Remark": "获取窗口文件路径",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetWindowProcessPath(hWin)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetWindowProcessPath",
                        "Define": "iRet = GetWindowProcessPath(hWnd)",
                        "Describe": "获取指定窗口所在的进程的exe文件全路径.",
                        "RetType": "String",
                        "Return": "返回字符串表示的是exe全路径名",
                        "Param": [
                            {
                                "Caption": "hWnd",
                                "DataType": "Integer",
                                "Describe": "指定的窗口句柄",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetWindowRect",
                    "Remark": "获取窗口位置",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "Dim As Long x1, y1, x2, y2\ndm.GetWindowRect(hWin, x1, y1, x2, y2)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetWindowRect",
                        "Define": "iRet = GetWindowRect(hWnd, x1, y1, x2, y2)",
                        "Describe": "获取窗口在屏幕上的位置",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "hWnd",
                                "DataType": "Integer",
                                "Describe": "指定的窗口句柄",
                                "Optional": false
                            },
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "返回窗口左上角X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "返回窗口左上角Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "返回窗口右下角X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "返回窗口右下角Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetClientRect",
                    "Remark": "获取窗口客户区位置",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "Dim As Long x1, y1, x2, y2\ndm.GetClientRect(hWin, x1, y1, x2, y2)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetClientRect",
                        "Define": "iRet = GetClientRect(hWnd, x1, y1, x2, y2)",
                        "Describe": "获取窗口客户区域在屏幕上的位置",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "hWnd",
                                "DataType": "Integer",
                                "Describe": "指定的窗口句柄",
                                "Optional": false
                            },
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "返回窗口左上角X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "返回窗口左上角Y坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "返回窗口右下角X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "返回窗口右下角Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetClientSize",
                    "Remark": "获取窗口客户区大小",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "Dim As Long w, h\ndm.GetClientSize(hWin, w, h)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetClientSize",
                        "Define": "iRet = GetClientSize(hWnd, width, height)",
                        "Describe": "获取窗口客户区域在屏幕上的位置",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "hWnd",
                                "DataType": "Integer",
                                "Describe": "指定的窗口句柄",
                                "Optional": false
                            },
                            {
                                "Caption": "width",
                                "DataType": "Integer",
                                "Describe": "返回窗口的宽度",
                                "Optional": false
                            },
                            {
                                "Caption": "height",
                                "DataType": "Integer",
                                "Describe": "返回窗口的高度",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetWindowText",
                    "Remark": "设置窗口标题",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetWindowText(hWin, \"新的标题\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetWindowText",
                        "Define": "iRet = SetWindowText(hWnd, title)",
                        "Describe": "设置窗口的标题",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "hWnd",
                                "DataType": "Integer",
                                "Describe": "指定的窗口句柄",
                                "Optional": false
                            },
                            {
                                "Caption": "title",
                                "DataType": "String",
                                "Describe": "标题",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetWindowState",
                    "Remark": "设置窗口状态",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetWindowState(hWin, 1)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetWindowState",
                        "Define": "iRet = SetWindowState(hWnd, flag)",
                        "Describe": "设置窗口的状态",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "hWnd",
                                "DataType": "Integer",
                                "Describe": "指定的窗口句柄",
                                "Optional": false
                            },
                            {
                                "Caption": "flag",
                                "DataType": "Integer",
                                "Describe": "取值定义如下<br>0 : 关闭指定窗口<br>1 : 激活指定窗口<br>2 : 最小化指定窗口,但不激活<br>3 : 最小化指定窗口,并释放内存,但同时也会激活窗口.<br>4 : 最大化指定窗口,同时激活窗口.<br>5 : 恢复指定窗口 ,但不激活<br>6 : 隐藏指定窗口<br>7 : 显示指定窗口<br>8 : 置顶指定窗口<br>9 : 取消置顶指定窗口<br>10 : 禁止指定窗口<br>11 : 取消禁止指定窗口<br>12 : 恢复并激活指定窗口<br>13 : 强制结束窗口所在进程.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetClientSize",
                    "Remark": "设置窗口客户区大小",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetClientSize(hWin, 800, 600)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetClientSize",
                        "Define": "iRet = SetClientSize(hWnd, width, height)",
                        "Describe": "设置窗口客户区域的宽度和高度",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "hWnd",
                                "DataType": "Integer",
                                "Describe": "指定的窗口句柄",
                                "Optional": false
                            },
                            {
                                "Caption": "width",
                                "DataType": "Integer",
                                "Describe": "宽度",
                                "Optional": false
                            },
                            {
                                "Caption": "height",
                                "DataType": "Integer",
                                "Describe": "高度",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetWindowSize",
                    "Remark": "设置窗口大小",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetWindowSize(hWin, 800, 600)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetWindowSize",
                        "Define": "iRet = SetWindowSize(hWnd, width, height)",
                        "Describe": "设置窗口的大小",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "hWnd",
                                "DataType": "Integer",
                                "Describe": "指定的窗口句柄",
                                "Optional": false
                            },
                            {
                                "Caption": "width",
                                "DataType": "Integer",
                                "Describe": "宽度",
                                "Optional": false
                            },
                            {
                                "Caption": "height",
                                "DataType": "Integer",
                                "Describe": "高度",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetWindowTransparent",
                    "Remark": "设置窗口透明度",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetWindowTransparent(hWin, 128)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetWindowTransparent",
                        "Define": "iRet = SetWindowTransparent(hWnd, trans)",
                        "Describe": "设置窗口的透明度",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "hWnd",
                                "DataType": "Integer",
                                "Describe": "指定的窗口句柄",
                                "Optional": false
                            },
                            {
                                "Caption": "trans",
                                "DataType": "Integer",
                                "Describe": "透明度取值(0-255) 越小透明度越大 0为完全透明(不可见) 255为完全显示(不透明)",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "MoveWindow",
                    "Remark": "移动窗口位置",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.MoveWindow(hWin, 100, 100)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "MoveWindow",
                        "Define": "iRet = MoveWindow(hWnd, x, y)",
                        "Describe": "移动指定窗口到指定位置",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "hWnd",
                                "DataType": "Integer",
                                "Describe": "指定的窗口句柄",
                                "Optional": false
                            },
                            {
                                "Caption": "x",
                                "DataType": "Integer",
                                "Describe": "X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y",
                                "DataType": "Integer",
                                "Describe": "Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "ClientToScreen",
                    "Remark": "客户区转屏幕坐标",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "Dim As Long x, y = 100\ndm.ClientToScreen(hWin, x, y)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "ClientToScreen",
                        "Define": "iRet = ClientToScreen(hWnd, x, y)",
                        "Describe": "把窗口坐标转换为屏幕坐标",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "hWnd",
                                "DataType": "Integer",
                                "Describe": "指定的窗口句柄",
                                "Optional": false
                            },
                            {
                                "Caption": "x",
                                "DataType": "Integer",
                                "Describe": "窗口X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y",
                                "DataType": "Integer",
                                "Describe": "窗口Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "ScreenToClient",
                    "Remark": "屏幕转客户区坐标",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "Dim As Long x, y = 100\ndm.ScreenToClient(hWin, x, y)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "ScreenToClient",
                        "Define": "iRet = ScreenToClient(hWnd, x, y)",
                        "Describe": "把屏幕坐标转换为窗口坐标",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "hWnd",
                                "DataType": "Integer",
                                "Describe": "指定的窗口句柄",
                                "Optional": false
                            },
                            {
                                "Caption": "x",
                                "DataType": "Integer",
                                "Describe": "窗口X坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y",
                                "DataType": "Integer",
                                "Describe": "窗口Y坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SendString",
                    "Remark": "发送文本数据",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SendString(hWin, \"我是来测试的\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SendString",
                        "Define": "iRet = SendString(hWnd, str)",
                        "Describe": "向指定窗口发送文本数据",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "hWnd",
                                "DataType": "Integer",
                                "Describe": "指定的窗口句柄",
                                "Optional": false
                            },
                            {
                                "Caption": "str",
                                "DataType": "String",
                                "Describe": "发送的文本数据",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SendString2",
                    "Remark": "发送文本数据",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SendString2(hWin, \"我是来测试的\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SendString2",
                        "Define": "iRet = SendString2(hWnd, str)",
                        "Describe": "向指定窗口发送文本数据；此接口为老的SendString，如果新的SendString不能输入，可以尝试此接口.",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "hWnd",
                                "DataType": "Integer",
                                "Describe": "指定的窗口句柄",
                                "Optional": false
                            },
                            {
                                "Caption": "str",
                                "DataType": "String",
                                "Describe": "发送的文本数据",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SendStringIme",
                    "Remark": "输入法发送文本数据",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SendStringIme(\"我是来测试的\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SendStringIme",
                        "Define": "iRet = SendStringIme(str)",
                        "Describe": "向绑定的窗口发送文本数据.必须配合dx.public.input.ime属性.    收费功能",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "str",
                                "DataType": "String",
                                "Describe": "发送的文本数据",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SendPaste",
                    "Remark": "粘贴文本数据",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SendPaste(hWin)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SendPaste",
                        "Define": "iRet = SendPaste(hWnd)",
                        "Describe": "向指定窗口发送粘贴命令. 把剪贴板的内容发送到目标窗口.<br>注:剪贴板是公共资源，多个线程同时设置剪贴板时,会产生冲突，必须用互斥信号保护.",
                        "RetType": "Boolean",
                        "Return": "0: 失败，1: 成功",
                        "Param": [
                            {
                                "Caption": "hWnd",
                                "DataType": "Integer",
                                "Describe": "指定的窗口句柄",
                                "Optional": false
                            }
                        ]
                    }
                }
            ]
        },
        {
            "Caption": "文件",
            "Icon": "文件夹",
            "Visible": true,
            "Templet": "index",
            "Help": {
                "Caption": ""
            },
            "Child": [
                {
                    "Caption": "ReadFile",
                    "Remark": "读取文件内容",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.ReadFile(\"c:\\123.txt\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "ReadFile",
                        "Define": "iRet = ReadFile(file)",
                        "Describe": "从指定的文件读取内容.",
                        "RetType": "String",
                        "Return": "读入的文件内容",
                        "Param": [
                            {
                                "Caption": "file",
                                "DataType": "String",
                                "Describe": "文件路径",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "WriteFile",
                    "Remark": "向文件写入内容",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.WriteFile(\"c:\\123.txt\", \"哈哈哈\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "WriteFile",
                        "Define": "iRet = WriteFile(file, content)",
                        "Describe": "向指定文件追加字符串.",
                        "RetType": "Boolean",
                        "Return": "0 : 失败，1 : 成功",
                        "Param": [
                            {
                                "Caption": "file",
                                "DataType": "String",
                                "Describe": "文件路径",
                                "Optional": false
                            },
                            {
                                "Caption": "content",
                                "DataType": "String",
                                "Describe": "写入的字符串",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetFileLength",
                    "Remark": "获取文件大小",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetFileLength(\"c:\\123.txt\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetFileLength",
                        "Define": "iRet = GetFileLength(file)",
                        "Describe": "获取指定的文件长度.",
                        "RetType": "Integer",
                        "Return": "文件长度(字节数)",
                        "Param": [
                            {
                                "Caption": "file",
                                "DataType": "String",
                                "Describe": "文件路径",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "IsFileExist",
                    "Remark": "判断文件是否存在",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.IsFileExist(\"c:\\123.txt\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "IsFileExist",
                        "Define": "iRet = IsFileExist(file)",
                        "Describe": "判断指定文件是否存在.",
                        "RetType": "Boolean",
                        "Return": "0 : 不存在，1 : 存在",
                        "Param": [
                            {
                                "Caption": "file",
                                "DataType": "String",
                                "Describe": "文件路径",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "CopyFile",
                    "Remark": "复制文件",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.CopyFile(\"c:\\123.txt\", \"c:\\456.txt\", true)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "CopyFile",
                        "Define": "iRet = CopyFile(src_file, dst_file, over)",
                        "Describe": "复制文件.",
                        "RetType": "Boolean",
                        "Return": "0 : 失败，1 : 成功",
                        "Param": [
                            {
                                "Caption": "src_file",
                                "DataType": "String",
                                "Describe": "原始文件路径",
                                "Optional": false
                            },
                            {
                                "Caption": "dst_file",
                                "DataType": "String",
                                "Describe": "目标文件路径",
                                "Optional": false
                            },
                            {
                                "Caption": "over",
                                "DataType": "Boolean",
                                "Describe": "0 : 如果dst_file文件存在则不覆盖返回.<br>1 : 如果dst_file文件存在则覆盖.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "MoveFile",
                    "Remark": "移动文件",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.MoveFile(\"c:\\123.txt\", \"c:\\456.txt\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "MoveFile",
                        "Define": "iRet = MoveFile(src_file, dst_file)",
                        "Describe": "移动文件.",
                        "RetType": "Boolean",
                        "Return": "0 : 失败，1 : 成功",
                        "Param": [
                            {
                                "Caption": "src_file",
                                "DataType": "String",
                                "Describe": "原始文件路径",
                                "Optional": false
                            },
                            {
                                "Caption": "dst_file",
                                "DataType": "String",
                                "Describe": "目标文件路径",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "DeleteFile",
                    "Remark": "删除文件",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.DeleteFile(\"c:\\123.txt\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "DeleteFile",
                        "Define": "iRet = DeleteFile(file)",
                        "Describe": "删除文件.",
                        "RetType": "Boolean",
                        "Return": "0 : 失败，1 : 成功",
                        "Param": [
                            {
                                "Caption": "file",
                                "DataType": "String",
                                "Describe": "文件路径",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "EncodeFile",
                    "Remark": "加密文件",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.EncodeFile(\"c:\\123.txt\", \"password\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "EncodeFile",
                        "Define": "iRet = EncodeFile(file, pwd)",
                        "Describe": "加密指定的文件.    收费功能<br>如果此文件没加密，调用此函数不会有任何效果.<br>插件所有的字库 图片 ini都是用此接口来加密.",
                        "RetType": "Boolean",
                        "Return": "0 : 失败，1 : 成功",
                        "Param": [
                            {
                                "Caption": "file",
                                "DataType": "String",
                                "Describe": "文件路径",
                                "Optional": false
                            },
                            {
                                "Caption": "pwd",
                                "DataType": "String",
                                "Describe": "密码",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "EncodeFile",
                    "Remark": "解密文件",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.DecodeFile(\"c:\\123.txt\", \"password\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "DecodeFile",
                        "Define": "iRet = DecodeFile(file, pwd)",
                        "Describe": "解密指定的文件.    收费功能<br>如果此文件没加密，调用此函数不会有任何效果.<br>插件所有的字库 图片 ini都是用此接口来解密.",
                        "RetType": "Boolean",
                        "Return": "0 : 失败，1 : 成功",
                        "Param": [
                            {
                                "Caption": "file",
                                "DataType": "String",
                                "Describe": "文件路径",
                                "Optional": false
                            },
                            {
                                "Caption": "pwd",
                                "DataType": "String",
                                "Describe": "密码",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "CreateFolder",
                    "Remark": "创建文件夹",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.CreateFolder(\"c:\\123\\456\\789\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "CreateFolder",
                        "Define": "iRet = CreateFolder(folder)",
                        "Describe": "创建指定目录，支持创建多级目录.",
                        "RetType": "Boolean",
                        "Return": "0 : 失败，1 : 成功",
                        "Param": [
                            {
                                "Caption": "folder",
                                "DataType": "String",
                                "Describe": "目录路径",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "DeleteFolder",
                    "Remark": "删除文件夹",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.DeleteFolder(\"c:\\123\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "DeleteFolder",
                        "Define": "iRet = DeleteFolder(folder)",
                        "Describe": "删除指定目录.",
                        "RetType": "Boolean",
                        "Return": "0 : 失败，1 : 成功",
                        "Param": [
                            {
                                "Caption": "folder",
                                "DataType": "String",
                                "Describe": "目录路径",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "DownloadFile",
                    "Remark": "下载文件",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.DownloadFile(\"www.baidu.com\", \"baidu\", 3000)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "DownloadFile",
                        "Define": "iRet = DownloadFile(url, save_file, timeout)",
                        "Describe": "从internet上下载一个文件.",
                        "RetType": "Integer",
                        "Return": "1 : 成功<br>-1 : 网络连接失败<br>-2 : 写入文件失败",
                        "Param": [
                            {
                                "Caption": "url",
                                "DataType": "String",
                                "Describe": "下载的url地址.",
                                "Optional": false
                            },
                            {
                                "Caption": "save_file",
                                "DataType": "String",
                                "Describe": "要保存的文件名.",
                                "Optional": false
                            },
                            {
                                "Caption": "timeout",
                                "DataType": "Integer",
                                "Describe": "连接超时时间，单位是毫秒.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "ReadIni",
                    "Remark": "读ini键值",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.ReadIni(\"Global\", \"var1\", \"c:\\test_game\\cfg.ini\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "ReadIni",
                        "Define": "iRet = ReadIni(section, key, file)",
                        "Describe": "从Ini中读取指定信息.",
                        "RetType": "String",
                        "Return": "字符串形式表达的读取到的内容",
                        "Param": [
                            {
                                "Caption": "section",
                                "DataType": "String",
                                "Describe": "小节名.",
                                "Optional": false
                            },
                            {
                                "Caption": "key",
                                "DataType": "String",
                                "Describe": "变量名.",
                                "Optional": false
                            },
                            {
                                "Caption": "file",
                                "DataType": "String",
                                "Describe": "ini文件名.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "WriteIni",
                    "Remark": "写ini键值",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.WriteIni(\"Global\", \"var1\", \"123\", \"c:\\test_game\\cfg.ini\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "WriteIni",
                        "Define": "iRet = WriteIni(section, key, value, file)",
                        "Describe": "向指定的Ini写入信息.",
                        "RetType": "Boolean",
                        "Return": "0 : 失败，1 : 成功",
                        "Param": [
                            {
                                "Caption": "section",
                                "DataType": "String",
                                "Describe": "小节名.",
                                "Optional": false
                            },
                            {
                                "Caption": "key",
                                "DataType": "String",
                                "Describe": "变量名.",
                                "Optional": false
                            },
                            {
                                "Caption": "value",
                                "DataType": "String",
                                "Describe": "变量内容.",
                                "Optional": false
                            },
                            {
                                "Caption": "file",
                                "DataType": "String",
                                "Describe": "ini文件名.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "DeleteIni",
                    "Remark": "删除ini数据",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.DeleteIni(\"Global\", \"var1\", \"c:\\test_game\\cfg.ini\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "DeleteIni",
                        "Define": "iRet = DeleteIni(section, key, file)",
                        "Describe": "删除指定的ini键值或小节.",
                        "RetType": "Boolean",
                        "Return": "0 : 失败，1 : 成功",
                        "Param": [
                            {
                                "Caption": "section",
                                "DataType": "String",
                                "Describe": "小节名.",
                                "Optional": false
                            },
                            {
                                "Caption": "key",
                                "DataType": "String",
                                "Describe": "变量名. 如果这个变量为空串，则删除整个section小节.",
                                "Optional": false
                            },
                            {
                                "Caption": "file",
                                "DataType": "String",
                                "Describe": "ini文件名.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "ReadIniPwd",
                    "Remark": "读加密ini键值",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.ReadIniPwd(\"Global\", \"var1\", \"c:\\test_game\\cfg.ini\", \"1234\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "ReadIniPwd",
                        "Define": "iRet = ReadIniPwd(section, key, file, pwd)",
                        "Describe": "从Ini中读取指定信息.可支持加密文件.    收费功能<br>注 : 此函数是多线程安全的. 多线程同时读写同个文件不会造成文件错乱.<br>如果文件没加密，也可以正常读取.",
                        "RetType": "String",
                        "Return": "字符串形式表达的读取到的内容",
                        "Param": [
                            {
                                "Caption": "section",
                                "DataType": "String",
                                "Describe": "小节名.",
                                "Optional": false
                            },
                            {
                                "Caption": "key",
                                "DataType": "String",
                                "Describe": "变量名.",
                                "Optional": false
                            },
                            {
                                "Caption": "file",
                                "DataType": "String",
                                "Describe": "ini文件名.",
                                "Optional": false
                            },
                            {
                                "Caption": "pwd",
                                "DataType": "String",
                                "Describe": "密码.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "WriteIniPwd",
                    "Remark": "写加密ini键值",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.WriteIniPwd(\"Global\", \"var1\", \"123\", \"c:\\test_game\\cfg.ini\", \"1234\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "WriteIniPwd",
                        "Define": "iRet = WriteIniPwd(section, key, value, file, pwd)",
                        "Describe": "向指定的Ini写入信息.支持加密文件.    收费功能<br>注 : 此函数是多线程安全的. 多线程同时读写同个文件不会造成文件错乱.<br>如果此文件没加密，调用此函数会自动加密.",
                        "RetType": "Boolean",
                        "Return": "0 : 失败，1 : 成功",
                        "Param": [
                            {
                                "Caption": "section",
                                "DataType": "String",
                                "Describe": "小节名.",
                                "Optional": false
                            },
                            {
                                "Caption": "key",
                                "DataType": "String",
                                "Describe": "变量名.",
                                "Optional": false
                            },
                            {
                                "Caption": "value",
                                "DataType": "String",
                                "Describe": "变量内容.",
                                "Optional": false
                            },
                            {
                                "Caption": "file",
                                "DataType": "String",
                                "Describe": "ini文件名.",
                                "Optional": false
                            },
                            {
                                "Caption": "pwd",
                                "DataType": "String",
                                "Describe": "密码.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "DeleteIniPwd",
                    "Remark": "删除加密ini数据",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.DeleteIniPwd(\"Global\", \"var1\", \"c:\\test_game\\cfg.ini\", \"1234\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "DeleteIniPwd",
                        "Define": "iRet = DeleteIniPwd(section, key, file, pwd)",
                        "Describe": "删除指定的ini小节.支持加密文件.    收费功能<br>注 : 此函数是多线程安全的. 多线程同时读写同个文件不会造成文件错乱.<br>如果此文件没加密，调用此函数会自动加密",
                        "RetType": "Boolean",
                        "Return": "0 : 失败，1 : 成功",
                        "Param": [
                            {
                                "Caption": "section",
                                "DataType": "String",
                                "Describe": "小节名.",
                                "Optional": false
                            },
                            {
                                "Caption": "key",
                                "DataType": "String",
                                "Describe": "变量名. 如果这个变量为空串，则删除整个section小节.",
                                "Optional": false
                            },
                            {
                                "Caption": "file",
                                "DataType": "String",
                                "Describe": "ini文件名.",
                                "Optional": false
                            },
                            {
                                "Caption": "pwd",
                                "DataType": "String",
                                "Describe": "密码.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SelectFile",
                    "Remark": "对话框选择文件",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SelectFile()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SelectFile",
                        "Define": "iRet = SelectFile()",
                        "Describe": "弹出选择文件对话框，并返回选择的文件.",
                        "RetType": "String",
                        "Return": "选择的文件全路径",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "SelectDirectory",
                    "Remark": "对话框选择文件夹",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SelectDirectory()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SelectDirectory",
                        "Define": "iRet = SelectDirectory()",
                        "Describe": "弹出选择文件夹对话框，并返回选择的文件夹.",
                        "RetType": "String",
                        "Return": "选择的文件夹全路径",
                        "Param": [
                        ]
                    }
                }
            ]
        },
        {
            "Caption": "系统",
            "Icon": "文件夹",
            "Visible": true,
            "Templet": "index",
            "Help": {
                "Caption": ""
            },
            "Child": [
                {
                    "Caption": "RunApp",
                    "Remark": "运行应用程序",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.RunApp(\"notepad\", 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "RunApp",
                        "Define": "iRet = RunApp(app_path, mode)",
                        "Describe": "运行指定的应用程序.",
                        "RetType": "Boolean",
                        "Return": "0 : 失败，1 : 成功",
                        "Param": [
                            {
                                "Caption": "app_path",
                                "DataType": "String",
                                "Describe": "指定的可执行程序全路径",
                                "Optional": false
                            },
                            {
                                "Caption": "mode",
                                "DataType": "Integer",
                                "Describe": "0 : 普通模式，1 : 加强模式",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "Delay",
                    "Remark": "延时指定毫秒",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.Delay(1000)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "Delay",
                        "Define": "iRet = Delay(mis)",
                        "Describe": "延时指定的毫秒,过程中不阻塞UI操作. 一般高级语言使用.按键用不到.    收费功能",
                        "RetType": "Boolean",
                        "Return": "0 : 失败，1 : 成功",
                        "Param": [
                            {
                                "Caption": "mis",
                                "DataType": "Integer",
                                "Describe": "毫秒数",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetClipboard",
                    "Remark": "读取剪贴板文本",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetClipboard()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetClipboard",
                        "Define": "iRet = GetClipboard()",
                        "Describe": "获取剪贴板的内容",
                        "RetType": "String",
                        "Return": "以字符串表示的剪贴板内容",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "SetClipboard",
                    "Remark": "设置剪贴板文本",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetClipboard(\"abcd\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetClipboard",
                        "Define": "iRet = SetClipboard(value)",
                        "Describe": "设置剪贴板的内容",
                        "RetType": "Boolean",
                        "Return": "0 : 失败，1 : 成功",
                        "Param": [
                            {
                                "Caption": "value",
                                "DataType": "String",
                                "Describe": "以字符串表示的剪贴板内容",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetOsType",
                    "Remark": "获取操作系统类型",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetOsType()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetOsType",
                        "Define": "iRet = GetOsType()",
                        "Describe": "得到操作系统的类型",
                        "RetType": "Integer",
                        "Return": "0 : win95/98/me/nt4.0<br>1 : xp/2000<br>2 : 2003<br>3 : win7/vista/2008",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "Is64Bit",
                    "Remark": "是否是64位系统",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.Is64Bit()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "Is64Bit",
                        "Define": "iRet = Is64Bit()",
                        "Describe": "判断当前系统是否是64位操作系统",
                        "RetType": "Boolean",
                        "Return": "0 : 不是64位系统，1 : 是64位系统",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "GetDir",
                    "Remark": "获取系统路径",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetDir(2)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetDir",
                        "Define": "iRet = GetDir(type)",
                        "Describe": "得到系统的路径",
                        "RetType": "String",
                        "Return": "返回路径",
                        "Param": [
                            {
                                "Caption": "type",
                                "DataType": "Integer",
                                "Describe": "0 : 获取当前路径<br>1 : 获取系统路径(system32路径)<br>2 : 获取windows路径(windows所在路径)<br>3 : 获取临时目录路径(temp)<br>4 : 获取当前进程(exe)所在的路径",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "CheckUAC",
                    "Remark": "检测UAC是否开启",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.CheckUAC()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "CheckUAC",
                        "Define": "iRet = CheckUAC()",
                        "Describe": "检测当前系统是否有开启UAC(用户账户控制)",
                        "RetType": "Boolean",
                        "Return": "0 : 没开启UAC，1 : 开启了UAC",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "SetUAC",
                    "Remark": "设置UAC开关",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetUAC(true)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetUAC",
                        "Define": "iRet = SetUAC(enable)",
                        "Describe": "设置当前系统的UAC(用户账户控制)",
                        "RetType": "Boolean",
                        "Return": "0 : 操作失败，1 : 操作成功",
                        "Param": [
                            {
                                "Caption": "enable",
                                "DataType": "Boolean",
                                "Describe": "0 : 关闭UAC，1 : 开启UAC",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "CheckFontSmooth",
                    "Remark": "检测字体平滑",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.CheckFontSmooth()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "CheckFontSmooth",
                        "Define": "iRet = CheckFontSmooth()",
                        "Describe": "检测当前系统是否有开启屏幕字体平滑.    收费功能",
                        "RetType": "Boolean",
                        "Return": "0 : 系统没开启平滑字体，1 : 系统有开启平滑字体",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "DisableFontSmooth",
                    "Remark": "关闭字体平滑",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.DisableFontSmooth()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "DisableFontSmooth",
                        "Define": "iRet = DisableFontSmooth()",
                        "Describe": "关闭当前系统屏幕字体平滑.同时关闭系统的ClearType功能.    收费功能",
                        "RetType": "Boolean",
                        "Return": "0 : 操作失败，1 : 操作成功",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "DisablePowerSave",
                    "Remark": "关闭电源管理",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.DisablePowerSave()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "DisablePowerSave",
                        "Define": "iRet = DisablePowerSave()",
                        "Describe": "关闭电源管理，不会进入睡眠.",
                        "RetType": "Boolean",
                        "Return": "0 : 操作失败，1 : 操作成功",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "DisableScreenSave",
                    "Remark": "关闭屏幕保护",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.DisableScreenSave()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "DisableScreenSave",
                        "Define": "iRet = DisableScreenSave()",
                        "Describe": "关闭屏幕保护.",
                        "RetType": "Boolean",
                        "Return": "0 : 操作失败，1 : 操作成功",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "SetDisplayAcceler",
                    "Remark": "设置硬件加速级别",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetDisplayAcceler(5)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetDisplayAcceler",
                        "Define": "iRet = SetDisplayAcceler(level)",
                        "Describe": "设置当前系统的硬件加速级别.    收费功能",
                        "RetType": "Boolean",
                        "Return": "0 : 操作失败，1 : 操作成功",
                        "Param": [
                            {
                                "Caption": "level",
                                "DataType": "Integer",
                                "Describe": "取值范围为0-5.  0表示关闭硬件加速。5表示完全打开硬件加速",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetScreenWidth",
                    "Remark": "获取屏幕宽度",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetScreenWidth()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetScreenWidth",
                        "Define": "iRet = GetScreenWidth()",
                        "Describe": "获取屏幕的宽度.",
                        "RetType": "Integer",
                        "Return": "屏幕的宽度",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "GetScreenHeight",
                    "Remark": "获取屏幕高度",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetScreenHeight()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetScreenHeight",
                        "Define": "iRet = GetScreenHeight()",
                        "Describe": "获取屏幕的高度.",
                        "RetType": "Integer",
                        "Return": "屏幕的高度",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "GetScreenDepth",
                    "Remark": "获取屏幕色深",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetScreenDepth()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetScreenDepth",
                        "Define": "iRet = GetScreenDepth()",
                        "Describe": "获取屏幕的色深.",
                        "RetType": "Integer",
                        "Return": "系统颜色深度.(16或者32等)",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "SetScreen",
                    "Remark": "设置系统显示参数",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetScreen(1920, 1080, 32)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetScreen",
                        "Define": "iRet = SetScreen(width, height, depth)",
                        "Describe": "设置系统的分辨率 系统色深.",
                        "RetType": "Boolean",
                        "Return": "0 : 失败<br>1 : 成功",
                        "Param": [
                            {
                                "Caption": "width",
                                "DataType": "Integer",
                                "Describe": "屏幕宽度",
                                "Optional": false
                            },
                            {
                                "Caption": "height",
                                "DataType": "Integer",
                                "Describe": "屏幕高度",
                                "Optional": false
                            },
                            {
                                "Caption": "depth",
                                "DataType": "Integer",
                                "Describe": "系统色深",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetDiskSerial",
                    "Remark": "获取硬盘序列号",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetDiskSerial()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetDiskSerial",
                        "Define": "iRet = GetDiskSerial()",
                        "Describe": "获取本机的硬盘序列号.支持ide scsi硬盘. 要求调用进程必须有管理员权限. 否则返回空串.",
                        "RetType": "String",
                        "Return": "字符串表达的硬盘序列号",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "GetMachineCode",
                    "Remark": "获取本机机器码",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetMachineCode()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetMachineCode",
                        "Define": "iRet = GetMachineCode()",
                        "Describe": "获取本机的机器码.(带网卡). 此机器码用于插件网站后台. 要求调用进程必须有管理员权限. 否则返回空串.<br>注: 此机器码包含的硬件设备有硬盘,显卡,网卡等. 其它不便透露. 重装系统不会改变此值.<br>另要注意,插拔任何USB设备,(U盘，U盾,USB移动硬盘,USB键鼠等),以及安装任何网卡驱动程序,(开启或者关闭无线网卡等)都会导致机器码改变.",
                        "RetType": "String",
                        "Return": "字符串表达的机器机器码",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "GetMachineCodeNoMac",
                    "Remark": "获取本机机器码",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetMachineCodeNoMac()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetMachineCodeNoMac",
                        "Define": "iRet = GetMachineCodeNoMac()",
                        "Describe": "获取本机的机器码.(不带网卡) 要求调用进程必须有管理员权限. 否则返回空串.<br>注: 此机器码包含的硬件设备有硬盘,显卡,等. 其它不便透露. 重装系统不会改变此值.<br>另要注意,插拔任何USB设备,(U盘，U盾,USB移动硬盘,USB键鼠等),都会导致机器码改变.",
                        "RetType": "String",
                        "Return": "字符串表达的机器机器码",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "GetTime",
                    "Remark": "获取时间戳",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetTime()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetTime",
                        "Define": "iRet = GetTime()",
                        "Describe": "获取当前系统从开机到现在所经历过的时间，单位是毫秒.",
                        "RetType": "Integer",
                        "Return": "时间(单位毫秒)",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "GetNetTime",
                    "Remark": "获取网络时间",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetNetTime()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetNetTime",
                        "Define": "iRet = GetNetTime()",
                        "Describe": "从网络获取当前北京时间.",
                        "RetType": "String",
                        "Return": "字符串表示的时间格式. 比如 2001-11-01 23:14:08",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "GetNetTimeSafe",
                    "Remark": "获取网络时间",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetNetTimeSafe()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetNetTimeSafe",
                        "Define": "iRet = GetNetTimeSafe()",
                        "Describe": "从网络获取当前北京时间. 同GetNetTime. 但此接口数据是加密传送,以免被人破解.    收费功能",
                        "RetType": "String",
                        "Return": "字符串表示的时间格式. 比如 2001-11-01 23:14:08",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "Play",
                    "Remark": "播放音乐",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.Play(\"d:\\test.mp3\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "Play",
                        "Define": "iRet = Play(media_file)",
                        "Describe": "播放指定的MP3或者wav文件.",
                        "RetType": "Integer",
                        "Return": "0 : 失败，非0表示当前播放的ID。可以用Stop来控制播放结束.",
                        "Param": [
                            {
                                "Caption": "media_file",
                                "DataType": "String",
                                "Describe": "指定的音乐文件，可以采用文件名或者绝对路径的形式.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "Stop",
                    "Remark": "停止播放音乐",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.Stop(id)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "Stop",
                        "Define": "iRet = Stop(id)",
                        "Describe": "停止播放指定的音乐.",
                        "RetType": "Boolean",
                        "Return": "0 : 失败，1 : 成功.",
                        "Param": [
                            {
                                "Caption": "id",
                                "DataType": "Integer",
                                "Describe": "Play返回的播放id.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "Beep",
                    "Remark": "蜂鸣器",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.Beep(1000, 1000)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "Beep",
                        "Define": "iRet = Beep(f, duration)",
                        "Describe": "蜂鸣器.",
                        "RetType": "Boolean",
                        "Return": "0 : 失败，1 : 成功.",
                        "Param": [
                            {
                                "Caption": "f",
                                "DataType": "Integer",
                                "Describe": "频率.",
                                "Optional": false
                            },
                            {
                                "Caption": "duration",
                                "DataType": "Integer",
                                "Describe": "时长(ms).",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "ExitOs",
                    "Remark": "退出系统",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.ExitOs(1)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "ExitOs",
                        "Define": "iRet = ExitOs(type)",
                        "Describe": "退出系统(注销 重启 关机)",
                        "RetType": "Boolean",
                        "Return": "0 : 失败，1 : 成功.",
                        "Param": [
                            {
                                "Caption": "type",
                                "DataType": "Integer",
                                "Describe": "0 : 注销系统<br>1 : 关机<br>2 : 重新启动",
                                "Optional": false
                            }
                        ]
                    }
                }
            ]
        },
        {
            "Caption": "内存",
            "Icon": "文件夹",
            "Visible": true,
            "Templet": "index",
            "Help": {
                "Caption": ""
            },
            "Child": [
                {
                    "Caption": "FindData",
                    "Remark": "搜索二进制数据",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindData(hwnd, \"00000000-FFFFFFFF\", \"00 01 23 45 67 86 ab ce f1\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindData",
                        "Define": "sRet = FindData(hwnd, addr_range, data)",
                        "Describe": "搜索指定的二进制数据,默认步长是1.如果要定制步长，请用FindDataEx",
                        "RetType": "String",
                        "Return": "返回搜索到的地址集合，地址格式如下: addr1|addr2|addr3…|addrn，比如 400050|423435|453430",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定搜索的窗口句柄或者进程ID.  默认是窗口句柄. 如果要指定为进程ID,需要调用SetMemoryHwndAsProcessId.",
                                "Optional": false
                            },
                            {
                                "Caption": "addr_range",
                                "DataType": "String",
                                "Describe": "指定搜索的地址集合，字符串类型，这个地方可以是上次FindXXX的返回地址集合,可以进行二次搜索.(类似CE的再次扫描)<br>如果要进行地址范围搜索，那么这个值为的形如如下(类似于CE的新搜索)<br>\\\"00400000-7FFFFFFF\\\" \\\"80000000-BFFFFFFF\\\" \\\"00000000-FFFFFFFF\\\" 等.",
                                "Optional": false
                            },
                            {
                                "Caption": "data",
                                "DataType": "String",
                                "Describe": "要搜索的二进制数据 以字符串的形式描述比如\\\"00 01 23 45 67 86 ab ce f1\\\"等. <br>这里也可以支持模糊查找,用??来代替单个字节. 比如\\\"00 01 ?? ?? 67 86 ?? ce f1\\\"等. 模糊查找是收费功能.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindDataEx",
                    "Remark": "搜索二进制数据",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindDataEx(hwnd, \"00000000-FFFFFFFF\", \"00 01 23 45 67 86 ab ce f1\", 4, 1, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindDataEx",
                        "Define": "sRet = FindDataEx(hwnd, addr_range, data, step, multi_thread, mode)",
                        "Describe": "搜索指定的二进制数据.    收费功能",
                        "RetType": "String",
                        "Return": "返回搜索到的地址集合，地址格式如下: addr1|addr2|addr3…|addrn，比如 400050|423435|453430",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定搜索的窗口句柄或者进程ID.  默认是窗口句柄. 如果要指定为进程ID,需要调用SetMemoryHwndAsProcessId.",
                                "Optional": false
                            },
                            {
                                "Caption": "addr_range",
                                "DataType": "String",
                                "Describe": "指定搜索的地址集合，字符串类型，这个地方可以是上次FindXXX的返回地址集合,可以进行二次搜索.(类似CE的再次扫描)<br>如果要进行地址范围搜索，那么这个值为的形如如下(类似于CE的新搜索)<br>\\\"00400000-7FFFFFFF\\\" \\\"80000000-BFFFFFFF\\\" \\\"00000000-FFFFFFFF\\\" 等.",
                                "Optional": false
                            },
                            {
                                "Caption": "data",
                                "DataType": "String",
                                "Describe": "要搜索的二进制数据 以字符串的形式描述比如\\\"00 01 23 45 67 86 ab ce f1\\\"等. <br>这里也可以支持模糊查找,用??来代替单个字节. 比如\\\"00 01 ?? ?? 67 86 ?? ce f1\\\"等.",
                                "Optional": false
                            },
                            {
                                "Caption": "step",
                                "DataType": "Integer",
                                "Describe": "搜索步长.",
                                "Optional": false
                            },
                            {
                                "Caption": "multi_thread",
                                "DataType": "Boolean",
                                "Describe": "表示是否开启多线程查找.  0不开启，1开启.<br>开启多线程查找速度较快，但会耗费较多CPU资源. 不开启速度较慢，但节省CPU.",
                                "Optional": false
                            },
                            {
                                "Caption": "mode",
                                "DataType": "Boolean",
                                "Describe": "1 表示开启快速扫描(略过只读内存)  0表示所有内存类型全部扫描.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindInt",
                    "Remark": "搜索整数",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindInt(hwnd, \"00000000-FFFFFFFF\", 300, 300, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindInt",
                        "Define": "sRet = FindInt(hwnd, addr_range, int_value_min, int_value_max, type)",
                        "Describe": "搜索指定的整数,默认步长是1.如果要定制步长，请用FindIntEx",
                        "RetType": "String",
                        "Return": "返回搜索到的地址集合，地址格式如下: addr1|addr2|addr3…|addrn，比如 400050|423435|453430",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定搜索的窗口句柄或者进程ID.  默认是窗口句柄. 如果要指定为进程ID,需要调用SetMemoryHwndAsProcessId.",
                                "Optional": false
                            },
                            {
                                "Caption": "addr_range",
                                "DataType": "String",
                                "Describe": "指定搜索的地址集合，字符串类型，这个地方可以是上次FindXXX的返回地址集合,可以进行二次搜索.(类似CE的再次扫描)<br>如果要进行地址范围搜索，那么这个值为的形如如下(类似于CE的新搜索)<br>\\\"00400000-7FFFFFFF\\\" \\\"80000000-BFFFFFFF\\\" \\\"00000000-FFFFFFFF\\\" 等.",
                                "Optional": false
                            },
                            {
                                "Caption": "int_value_min",
                                "DataType": "Integer",
                                "Describe": "搜索的整数数值最小值",
                                "Optional": false
                            },
                            {
                                "Caption": "int_value_max",
                                "DataType": "Integer",
                                "Describe": "搜索的整数数值最大值",
                                "Optional": false
                            },
                            {
                                "Caption": "type",
                                "DataType": "Integer",
                                "Describe": "搜索的整数类型,取值如下<br>0 : 32位<br>1 : 16 位<br>2 : 8位",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindIntEx",
                    "Remark": "搜索整数",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindIntEx(hwnd, \"00000000-FFFFFFFF\", 300, 300, 0, 2, 1, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindIntEx",
                        "Define": "sRet = FindIntEx(hwnd, addr_range, int_value_min, int_value_max, type, step, multi_thread, mode)",
                        "Describe": "搜索指定的整数.    收费功能",
                        "RetType": "String",
                        "Return": "返回搜索到的地址集合，地址格式如下: addr1|addr2|addr3…|addrn，比如 400050|423435|453430",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定搜索的窗口句柄或者进程ID.  默认是窗口句柄. 如果要指定为进程ID,需要调用SetMemoryHwndAsProcessId.",
                                "Optional": false
                            },
                            {
                                "Caption": "addr_range",
                                "DataType": "String",
                                "Describe": "指定搜索的地址集合，字符串类型，这个地方可以是上次FindXXX的返回地址集合,可以进行二次搜索.(类似CE的再次扫描)<br>如果要进行地址范围搜索，那么这个值为的形如如下(类似于CE的新搜索)<br>\\\"00400000-7FFFFFFF\\\" \\\"80000000-BFFFFFFF\\\" \\\"00000000-FFFFFFFF\\\" 等.",
                                "Optional": false
                            },
                            {
                                "Caption": "int_value_min",
                                "DataType": "Integer",
                                "Describe": "搜索的整数数值最小值",
                                "Optional": false
                            },
                            {
                                "Caption": "int_value_max",
                                "DataType": "Integer",
                                "Describe": "搜索的整数数值最大值",
                                "Optional": false
                            },
                            {
                                "Caption": "type",
                                "DataType": "Integer",
                                "Describe": "搜索的整数类型,取值如下<br>0 : 32位<br>1 : 16 位<br>2 : 8位",
                                "Optional": false
                            },
                            {
                                "Caption": "step",
                                "DataType": "Integer",
                                "Describe": "搜索步长.",
                                "Optional": false
                            },
                            {
                                "Caption": "multi_thread",
                                "DataType": "Boolean",
                                "Describe": "表示是否开启多线程查找.  0不开启，1开启.<br>开启多线程查找速度较快，但会耗费较多CPU资源. 不开启速度较慢，但节省CPU.",
                                "Optional": false
                            },
                            {
                                "Caption": "mode",
                                "DataType": "Boolean",
                                "Describe": "1 表示开启快速扫描(略过只读内存)  0表示所有内存类型全部扫描.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindFloat",
                    "Remark": "搜索单精度浮点数",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindFloat(hwnd, \"00000000-FFFFFFFF\", 0.5, 1.0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindFloat",
                        "Define": "sRet = FindFloat(hwnd, addr_range, float_value_min, float_value_max)",
                        "Describe": "搜索指定的单精度浮点数,默认步长是1.如果要定制步长，请用FindFloatEx",
                        "RetType": "String",
                        "Return": "返回搜索到的地址集合，地址格式如下: addr1|addr2|addr3…|addrn，比如 400050|423435|453430",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定搜索的窗口句柄或者进程ID.  默认是窗口句柄. 如果要指定为进程ID,需要调用SetMemoryHwndAsProcessId.",
                                "Optional": false
                            },
                            {
                                "Caption": "addr_range",
                                "DataType": "String",
                                "Describe": "指定搜索的地址集合，字符串类型，这个地方可以是上次FindXXX的返回地址集合,可以进行二次搜索.(类似CE的再次扫描)<br>如果要进行地址范围搜索，那么这个值为的形如如下(类似于CE的新搜索)<br>\\\"00400000-7FFFFFFF\\\" \\\"80000000-BFFFFFFF\\\" \\\"00000000-FFFFFFFF\\\" 等.",
                                "Optional": false
                            },
                            {
                                "Caption": "float_value_min",
                                "DataType": "Double",
                                "Describe": "搜索的单精度数值最小值",
                                "Optional": false
                            },
                            {
                                "Caption": "float_value_max",
                                "DataType": "Double",
                                "Describe": "搜索的单精度数值最大值",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindFloatEx",
                    "Remark": "搜索单精度浮点数",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindFloatEx(hwnd, \"00000000-FFFFFFFF\", 0.5, 1.0, 0, 2, 1, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindFloatEx",
                        "Define": "sRet = FindFloatEx(hwnd, addr_range, float_value_min, float_value_max, step, multi_thread, mode)",
                        "Describe": "搜索指定的单精度浮点数.    收费功能",
                        "RetType": "String",
                        "Return": "返回搜索到的地址集合，地址格式如下: addr1|addr2|addr3…|addrn，比如 400050|423435|453430",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定搜索的窗口句柄或者进程ID.  默认是窗口句柄. 如果要指定为进程ID,需要调用SetMemoryHwndAsProcessId.",
                                "Optional": false
                            },
                            {
                                "Caption": "addr_range",
                                "DataType": "String",
                                "Describe": "指定搜索的地址集合，字符串类型，这个地方可以是上次FindXXX的返回地址集合,可以进行二次搜索.(类似CE的再次扫描)<br>如果要进行地址范围搜索，那么这个值为的形如如下(类似于CE的新搜索)<br>\\\"00400000-7FFFFFFF\\\" \\\"80000000-BFFFFFFF\\\" \\\"00000000-FFFFFFFF\\\" 等.",
                                "Optional": false
                            },
                            {
                                "Caption": "float_value_min",
                                "DataType": "Double",
                                "Describe": "搜索的单精度数值最小值",
                                "Optional": false
                            },
                            {
                                "Caption": "float_value_max",
                                "DataType": "Double",
                                "Describe": "搜索的单精度数值最大值",
                                "Optional": false
                            },
                            {
                                "Caption": "step",
                                "DataType": "Integer",
                                "Describe": "搜索步长.",
                                "Optional": false
                            },
                            {
                                "Caption": "multi_thread",
                                "DataType": "Boolean",
                                "Describe": "表示是否开启多线程查找.  0不开启，1开启.<br>开启多线程查找速度较快，但会耗费较多CPU资源. 不开启速度较慢，但节省CPU.",
                                "Optional": false
                            },
                            {
                                "Caption": "mode",
                                "DataType": "Boolean",
                                "Describe": "1 表示开启快速扫描(略过只读内存)  0表示所有内存类型全部扫描.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindDouble",
                    "Remark": "搜索双精度浮点数",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindDouble(hwnd, \"00000000-FFFFFFFF\", 0.5, 1.0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindDouble",
                        "Define": "sRet = FindDouble(hwnd, addr_range, double_value_min, double_value_max)",
                        "Describe": "搜索指定的双精度浮点数,默认步长是1.如果要定制步长，请用FindDoubleEx",
                        "RetType": "String",
                        "Return": "返回搜索到的地址集合，地址格式如下: addr1|addr2|addr3…|addrn，比如 400050|423435|453430",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定搜索的窗口句柄或者进程ID.  默认是窗口句柄. 如果要指定为进程ID,需要调用SetMemoryHwndAsProcessId.",
                                "Optional": false
                            },
                            {
                                "Caption": "addr_range",
                                "DataType": "String",
                                "Describe": "指定搜索的地址集合，字符串类型，这个地方可以是上次FindXXX的返回地址集合,可以进行二次搜索.(类似CE的再次扫描)<br>如果要进行地址范围搜索，那么这个值为的形如如下(类似于CE的新搜索)<br>\\\"00400000-7FFFFFFF\\\" \\\"80000000-BFFFFFFF\\\" \\\"00000000-FFFFFFFF\\\" 等.",
                                "Optional": false
                            },
                            {
                                "Caption": "double_value_min",
                                "DataType": "Double",
                                "Describe": "搜索的双精度数值最小值",
                                "Optional": false
                            },
                            {
                                "Caption": "double_value_max",
                                "DataType": "Double",
                                "Describe": "搜索的双精度数值最大值",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindDoubleEx",
                    "Remark": "搜索双精度浮点数",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindDoubleEx(hwnd, \"00000000-FFFFFFFF\", 0.5, 1.0, 0, 2, 1, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindDoubleEx",
                        "Define": "sRet = FindDoubleEx(hwnd, addr_range, double_value_min, double_value_max, step, multi_thread, mode)",
                        "Describe": "搜索指定的双精度浮点数.    收费功能",
                        "RetType": "String",
                        "Return": "返回搜索到的地址集合，地址格式如下: addr1|addr2|addr3…|addrn，比如 400050|423435|453430",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定搜索的窗口句柄或者进程ID.  默认是窗口句柄. 如果要指定为进程ID,需要调用SetMemoryHwndAsProcessId.",
                                "Optional": false
                            },
                            {
                                "Caption": "addr_range",
                                "DataType": "String",
                                "Describe": "指定搜索的地址集合，字符串类型，这个地方可以是上次FindXXX的返回地址集合,可以进行二次搜索.(类似CE的再次扫描)<br>如果要进行地址范围搜索，那么这个值为的形如如下(类似于CE的新搜索)<br>\\\"00400000-7FFFFFFF\\\" \\\"80000000-BFFFFFFF\\\" \\\"00000000-FFFFFFFF\\\" 等.",
                                "Optional": false
                            },
                            {
                                "Caption": "double_value_min",
                                "DataType": "Double",
                                "Describe": "搜索的双精度数值最小值",
                                "Optional": false
                            },
                            {
                                "Caption": "double_value_max",
                                "DataType": "Double",
                                "Describe": "搜索的双精度数值最大值",
                                "Optional": false
                            },
                            {
                                "Caption": "step",
                                "DataType": "Integer",
                                "Describe": "搜索步长.",
                                "Optional": false
                            },
                            {
                                "Caption": "multi_thread",
                                "DataType": "Boolean",
                                "Describe": "表示是否开启多线程查找.  0不开启，1开启.<br>开启多线程查找速度较快，但会耗费较多CPU资源. 不开启速度较慢，但节省CPU.",
                                "Optional": false
                            },
                            {
                                "Caption": "mode",
                                "DataType": "Boolean",
                                "Describe": "1 表示开启快速扫描(略过只读内存)  0表示所有内存类型全部扫描.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindString",
                    "Remark": "搜索字符串",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindString(hwnd, \"00000000-FFFFFFFF\", \"哈哈哈哈\", 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindString",
                        "Define": "sRet = FindString(hwnd, addr_range, string_value, type)",
                        "Describe": "搜索指定的字符串,默认步长是1.如果要定制步长，请用FindStringEx",
                        "RetType": "String",
                        "Return": "返回搜索到的地址集合，地址格式如下: addr1|addr2|addr3…|addrn，比如 400050|423435|453430",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定搜索的窗口句柄或者进程ID.  默认是窗口句柄. 如果要指定为进程ID,需要调用SetMemoryHwndAsProcessId.",
                                "Optional": false
                            },
                            {
                                "Caption": "addr_range",
                                "DataType": "String",
                                "Describe": "指定搜索的地址集合，字符串类型，这个地方可以是上次FindXXX的返回地址集合,可以进行二次搜索.(类似CE的再次扫描)<br>如果要进行地址范围搜索，那么这个值为的形如如下(类似于CE的新搜索)<br>\\\"00400000-7FFFFFFF\\\" \\\"80000000-BFFFFFFF\\\" \\\"00000000-FFFFFFFF\\\" 等.",
                                "Optional": false
                            },
                            {
                                "Caption": "string_value",
                                "DataType": "String",
                                "Describe": "搜索的字符串",
                                "Optional": false
                            },
                            {
                                "Caption": "type",
                                "DataType": "Integer",
                                "Describe": "0 : Ascii字符串，1 : Unicode字符串",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindStringEx",
                    "Remark": "搜索字符串",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindStringEx(hwnd, \"00000000-FFFFFFFF\", \"哈哈哈哈\", 0, 0, 2, 1, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindStringEx",
                        "Define": "sRet = FindStringEx(hwnd, addr_range, string_value, type, step, multi_thread, mode)",
                        "Describe": "搜索指定的字符串.    收费功能",
                        "RetType": "String",
                        "Return": "返回搜索到的地址集合，地址格式如下: addr1|addr2|addr3…|addrn，比如 400050|423435|453430",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定搜索的窗口句柄或者进程ID.  默认是窗口句柄. 如果要指定为进程ID,需要调用SetMemoryHwndAsProcessId.",
                                "Optional": false
                            },
                            {
                                "Caption": "addr_range",
                                "DataType": "String",
                                "Describe": "指定搜索的地址集合，字符串类型，这个地方可以是上次FindXXX的返回地址集合,可以进行二次搜索.(类似CE的再次扫描)<br>如果要进行地址范围搜索，那么这个值为的形如如下(类似于CE的新搜索)<br>\\\"00400000-7FFFFFFF\\\" \\\"80000000-BFFFFFFF\\\" \\\"00000000-FFFFFFFF\\\" 等.",
                                "Optional": false
                            },
                            {
                                "Caption": "string_value",
                                "DataType": "String",
                                "Describe": "搜索的字符串",
                                "Optional": false
                            },
                            {
                                "Caption": "type",
                                "DataType": "Integer",
                                "Describe": "0 : Ascii字符串，1 : Unicode字符串",
                                "Optional": false
                            },
                            {
                                "Caption": "step",
                                "DataType": "Integer",
                                "Describe": "搜索步长.",
                                "Optional": false
                            },
                            {
                                "Caption": "multi_thread",
                                "DataType": "Boolean",
                                "Describe": "表示是否开启多线程查找.  0不开启，1开启.<br>开启多线程查找速度较快，但会耗费较多CPU资源. 不开启速度较慢，但节省CPU.",
                                "Optional": false
                            },
                            {
                                "Caption": "mode",
                                "DataType": "Boolean",
                                "Describe": "1 表示开启快速扫描(略过只读内存)  0表示所有内存类型全部扫描.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "ReadData",
                    "Remark": "读二进制数据",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.ReadData(hwnd, \"4DA678\", 10)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "ReadData",
                        "Define": "sRet = ReadData(hwnd, addr, len)",
                        "Describe": "读取指定地址的二进制数据",
                        "RetType": "String",
                        "Return": "读取到的数值,以16进制表示的字符串 每个字节以空格相隔 比如 12 34 56 78 ab cd ef",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定搜索的窗口句柄或者进程ID.  默认是窗口句柄. 如果要指定为进程ID,需要调用SetMemoryHwndAsProcessId.",
                                "Optional": false
                            },
                            {
                                "Caption": "addr",
                                "DataType": "String",
                                "Describe": "用字符串来描述地址，类似于CE的地址描述，数值必须是16进制,里面可以用[ ] + -这些符号来描述一个地址。+表示地址加，-表示地址减，模块名必须用<>符号来圈起来<br>例如:<br>1.         \\\"4DA678\\\" 最简单的方式，用绝对数值来表示地址<br>2.         \\\"<360SE.exe>+DA678\\\" 相对简单的方式，只是这里用模块名来决定模块基址，后面的是偏移<br>3.         \\\"[4DA678]+3A\\\" 用绝对数值加偏移，相当于一级指针<br>4.         \\\"[<360SE.exe>+DA678]+3A\\\" 用模块定基址的方式，也是一级指针<br>5.         \\\"[[[<360SE.exe>+DA678]+3A]+5B]+8\\\" 这个是一个三级指针<br>总之熟悉CE的人 应该对这个地址描述都很熟悉,我就不多举例了",
                                "Optional": false
                            },
                            {
                                "Caption": "len",
                                "DataType": "Integer",
                                "Describe": "二进制数据的长度",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "ReadInt",
                    "Remark": "读整数",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.ReadInt(hwnd, \"4DA678\", 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "ReadInt",
                        "Define": "sRet = ReadInt(hwnd, addr, type)",
                        "Describe": "读取指定地址的整数数值，类型可以是8位，16位 或者 32位",
                        "RetType": "Integer",
                        "Return": "读取到的数值,注意这里无法判断读取是否成功",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定搜索的窗口句柄或者进程ID.  默认是窗口句柄. 如果要指定为进程ID,需要调用SetMemoryHwndAsProcessId.",
                                "Optional": false
                            },
                            {
                                "Caption": "addr",
                                "DataType": "String",
                                "Describe": "用字符串来描述地址，类似于CE的地址描述，数值必须是16进制,里面可以用[ ] + -这些符号来描述一个地址。+表示地址加，-表示地址减，模块名必须用<>符号来圈起来<br>例如:<br>1.         \\\"4DA678\\\" 最简单的方式，用绝对数值来表示地址<br>2.         \\\"<360SE.exe>+DA678\\\" 相对简单的方式，只是这里用模块名来决定模块基址，后面的是偏移<br>3.         \\\"[4DA678]+3A\\\" 用绝对数值加偏移，相当于一级指针<br>4.         \\\"[<360SE.exe>+DA678]+3A\\\" 用模块定基址的方式，也是一级指针<br>5.         \\\"[[[<360SE.exe>+DA678]+3A]+5B]+8\\\" 这个是一个三级指针<br>总之熟悉CE的人 应该对这个地址描述都很熟悉,我就不多举例了",
                                "Optional": false
                            },
                            {
                                "Caption": "type",
                                "DataType": "Integer",
                                "Describe": "整数类型,取值如下：<br>0 : 32位<br>1 : 16 位<br>2 : 8位",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "ReadFloat",
                    "Remark": "读单精度浮点数",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.ReadFloat(hwnd, \"4DA678\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "ReadFloat",
                        "Define": "sRet = ReadFloat(hwnd, addr)",
                        "Describe": "读取指定地址的单精度浮点数",
                        "RetType": "Double",
                        "Return": "读取到的数值,注意这里无法判断读取是否成功",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定搜索的窗口句柄或者进程ID.  默认是窗口句柄. 如果要指定为进程ID,需要调用SetMemoryHwndAsProcessId.",
                                "Optional": false
                            },
                            {
                                "Caption": "addr",
                                "DataType": "String",
                                "Describe": "用字符串来描述地址，类似于CE的地址描述，数值必须是16进制,里面可以用[ ] + -这些符号来描述一个地址。+表示地址加，-表示地址减，模块名必须用<>符号来圈起来<br>例如:<br>1.         \\\"4DA678\\\" 最简单的方式，用绝对数值来表示地址<br>2.         \\\"<360SE.exe>+DA678\\\" 相对简单的方式，只是这里用模块名来决定模块基址，后面的是偏移<br>3.         \\\"[4DA678]+3A\\\" 用绝对数值加偏移，相当于一级指针<br>4.         \\\"[<360SE.exe>+DA678]+3A\\\" 用模块定基址的方式，也是一级指针<br>5.         \\\"[[[<360SE.exe>+DA678]+3A]+5B]+8\\\" 这个是一个三级指针<br>总之熟悉CE的人 应该对这个地址描述都很熟悉,我就不多举例了",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "ReadDouble",
                    "Remark": "读双精度浮点数",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.ReadDouble(hwnd, \"4DA678\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "ReadDouble",
                        "Define": "sRet = ReadDouble(hwnd, addr)",
                        "Describe": "读取指定地址的双精度浮点数",
                        "RetType": "Double",
                        "Return": "读取到的数值,注意这里无法判断读取是否成功",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定搜索的窗口句柄或者进程ID.  默认是窗口句柄. 如果要指定为进程ID,需要调用SetMemoryHwndAsProcessId.",
                                "Optional": false
                            },
                            {
                                "Caption": "addr",
                                "DataType": "String",
                                "Describe": "用字符串来描述地址，类似于CE的地址描述，数值必须是16进制,里面可以用[ ] + -这些符号来描述一个地址。+表示地址加，-表示地址减，模块名必须用<>符号来圈起来<br>例如:<br>1.         \\\"4DA678\\\" 最简单的方式，用绝对数值来表示地址<br>2.         \\\"<360SE.exe>+DA678\\\" 相对简单的方式，只是这里用模块名来决定模块基址，后面的是偏移<br>3.         \\\"[4DA678]+3A\\\" 用绝对数值加偏移，相当于一级指针<br>4.         \\\"[<360SE.exe>+DA678]+3A\\\" 用模块定基址的方式，也是一级指针<br>5.         \\\"[[[<360SE.exe>+DA678]+3A]+5B]+8\\\" 这个是一个三级指针<br>总之熟悉CE的人 应该对这个地址描述都很熟悉,我就不多举例了",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "ReadString",
                    "Remark": "读字符串",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.ReadString(hwnd, \"4DA678\", 0, 10)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "ReadString",
                        "Define": "sRet = ReadString(hwnd, addr, type, len)",
                        "Describe": "读取指定地址的字符串，可以是GBK字符串或者是Unicode字符串.(必须事先知道内存区的字符串编码方式)",
                        "RetType": "String",
                        "Return": "读取到的字符串,注意这里无法判断读取是否成功",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定搜索的窗口句柄或者进程ID.  默认是窗口句柄. 如果要指定为进程ID,需要调用SetMemoryHwndAsProcessId.",
                                "Optional": false
                            },
                            {
                                "Caption": "addr",
                                "DataType": "String",
                                "Describe": "用字符串来描述地址，类似于CE的地址描述，数值必须是16进制,里面可以用[ ] + -这些符号来描述一个地址。+表示地址加，-表示地址减，模块名必须用<>符号来圈起来<br>例如:<br>1.         \\\"4DA678\\\" 最简单的方式，用绝对数值来表示地址<br>2.         \\\"<360SE.exe>+DA678\\\" 相对简单的方式，只是这里用模块名来决定模块基址，后面的是偏移<br>3.         \\\"[4DA678]+3A\\\" 用绝对数值加偏移，相当于一级指针<br>4.         \\\"[<360SE.exe>+DA678]+3A\\\" 用模块定基址的方式，也是一级指针<br>5.         \\\"[[[<360SE.exe>+DA678]+3A]+5B]+8\\\" 这个是一个三级指针<br>总之熟悉CE的人 应该对这个地址描述都很熟悉,我就不多举例了",
                                "Optional": false
                            },
                            {
                                "Caption": "type",
                                "DataType": "Integer",
                                "Describe": "字符串类型,取值如下：<br>0 : GBK字符串<br>1 : Unicode字符串",
                                "Optional": false
                            },
                            {
                                "Caption": "len",
                                "DataType": "Integer",
                                "Describe": "需要读取的字节数目.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "WriteData",
                    "Remark": "写二进制数据",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.WriteData(hwnd, \"4DA678\", \"12 34 56 78 90 ab cd\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "WriteData",
                        "Define": "sRet = WriteData(hwnd, addr, data)",
                        "Describe": "对指定地址写入二进制数据",
                        "RetType": "Boolean",
                        "Return": "0 : 失败, 1 : 成功",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定搜索的窗口句柄或者进程ID.  默认是窗口句柄. 如果要指定为进程ID,需要调用SetMemoryHwndAsProcessId.",
                                "Optional": false
                            },
                            {
                                "Caption": "addr",
                                "DataType": "String",
                                "Describe": "用字符串来描述地址，类似于CE的地址描述，数值必须是16进制,里面可以用[ ] + -这些符号来描述一个地址。+表示地址加，-表示地址减，模块名必须用<>符号来圈起来<br>例如:<br>1.         \\\"4DA678\\\" 最简单的方式，用绝对数值来表示地址<br>2.         \\\"<360SE.exe>+DA678\\\" 相对简单的方式，只是这里用模块名来决定模块基址，后面的是偏移<br>3.         \\\"[4DA678]+3A\\\" 用绝对数值加偏移，相当于一级指针<br>4.         \\\"[<360SE.exe>+DA678]+3A\\\" 用模块定基址的方式，也是一级指针<br>5.         \\\"[[[<360SE.exe>+DA678]+3A]+5B]+8\\\" 这个是一个三级指针<br>总之熟悉CE的人 应该对这个地址描述都很熟悉,我就不多举例了",
                                "Optional": false
                            },
                            {
                                "Caption": "data",
                                "DataType": "String",
                                "Describe": "二进制数据，以字符串形式描述，比如 12 34 56 78 90 ab cd",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "WriteInt",
                    "Remark": "写整数",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.WriteInt(hwnd, \"4DA678\", 0, 100)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "WriteInt",
                        "Define": "sRet = WriteInt(hwnd, addr, type, v)",
                        "Describe": "对指定地址写入整数数值，类型可以是8位，16位 或者 32位",
                        "RetType": "Boolean",
                        "Return": "0 : 失败, 1 : 成功",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定搜索的窗口句柄或者进程ID.  默认是窗口句柄. 如果要指定为进程ID,需要调用SetMemoryHwndAsProcessId.",
                                "Optional": false
                            },
                            {
                                "Caption": "addr",
                                "DataType": "String",
                                "Describe": "用字符串来描述地址，类似于CE的地址描述，数值必须是16进制,里面可以用[ ] + -这些符号来描述一个地址。+表示地址加，-表示地址减，模块名必须用<>符号来圈起来<br>例如:<br>1.         \\\"4DA678\\\" 最简单的方式，用绝对数值来表示地址<br>2.         \\\"<360SE.exe>+DA678\\\" 相对简单的方式，只是这里用模块名来决定模块基址，后面的是偏移<br>3.         \\\"[4DA678]+3A\\\" 用绝对数值加偏移，相当于一级指针<br>4.         \\\"[<360SE.exe>+DA678]+3A\\\" 用模块定基址的方式，也是一级指针<br>5.         \\\"[[[<360SE.exe>+DA678]+3A]+5B]+8\\\" 这个是一个三级指针<br>总之熟悉CE的人 应该对这个地址描述都很熟悉,我就不多举例了",
                                "Optional": false
                            },
                            {
                                "Caption": "type",
                                "DataType": "Integer",
                                "Describe": "整数类型,取值如下：<br>0 : 32位<br>1 : 16 位<br>2 : 8位",
                                "Optional": false
                            },
                            {
                                "Caption": "v",
                                "DataType": "Integer",
                                "Describe": "整形数值",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "WriteFloat",
                    "Remark": "写单精度浮点数",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.WriteFloat(hwnd, \"4DA678\", 2.34)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "WriteFloat",
                        "Define": "sRet = WriteFloat(hwnd, addr, v)",
                        "Describe": "对指定地址写入单精度浮点数",
                        "RetType": "Boolean",
                        "Return": "0 : 失败, 1 : 成功",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定搜索的窗口句柄或者进程ID.  默认是窗口句柄. 如果要指定为进程ID,需要调用SetMemoryHwndAsProcessId.",
                                "Optional": false
                            },
                            {
                                "Caption": "addr",
                                "DataType": "String",
                                "Describe": "用字符串来描述地址，类似于CE的地址描述，数值必须是16进制,里面可以用[ ] + -这些符号来描述一个地址。+表示地址加，-表示地址减，模块名必须用<>符号来圈起来<br>例如:<br>1.         \\\"4DA678\\\" 最简单的方式，用绝对数值来表示地址<br>2.         \\\"<360SE.exe>+DA678\\\" 相对简单的方式，只是这里用模块名来决定模块基址，后面的是偏移<br>3.         \\\"[4DA678]+3A\\\" 用绝对数值加偏移，相当于一级指针<br>4.         \\\"[<360SE.exe>+DA678]+3A\\\" 用模块定基址的方式，也是一级指针<br>5.         \\\"[[[<360SE.exe>+DA678]+3A]+5B]+8\\\" 这个是一个三级指针<br>总之熟悉CE的人 应该对这个地址描述都很熟悉,我就不多举例了",
                                "Optional": false
                            },
                            {
                                "Caption": "v",
                                "DataType": "Double",
                                "Describe": "单精度浮点数",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "WriteDouble",
                    "Remark": "写双精度浮点数",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.WriteDouble(hwnd, \"4DA678\", 2.34)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "WriteDouble",
                        "Define": "sRet = WriteDouble(hwnd, addr, v)",
                        "Describe": "对指定地址写入双精度浮点数",
                        "RetType": "Boolean",
                        "Return": "0 : 失败, 1 : 成功",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定搜索的窗口句柄或者进程ID.  默认是窗口句柄. 如果要指定为进程ID,需要调用SetMemoryHwndAsProcessId.",
                                "Optional": false
                            },
                            {
                                "Caption": "addr",
                                "DataType": "String",
                                "Describe": "用字符串来描述地址，类似于CE的地址描述，数值必须是16进制,里面可以用[ ] + -这些符号来描述一个地址。+表示地址加，-表示地址减，模块名必须用<>符号来圈起来<br>例如:<br>1.         \\\"4DA678\\\" 最简单的方式，用绝对数值来表示地址<br>2.         \\\"<360SE.exe>+DA678\\\" 相对简单的方式，只是这里用模块名来决定模块基址，后面的是偏移<br>3.         \\\"[4DA678]+3A\\\" 用绝对数值加偏移，相当于一级指针<br>4.         \\\"[<360SE.exe>+DA678]+3A\\\" 用模块定基址的方式，也是一级指针<br>5.         \\\"[[[<360SE.exe>+DA678]+3A]+5B]+8\\\" 这个是一个三级指针<br>总之熟悉CE的人 应该对这个地址描述都很熟悉,我就不多举例了",
                                "Optional": false
                            },
                            {
                                "Caption": "v",
                                "DataType": "Double",
                                "Describe": "双精度浮点数",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "WriteString",
                    "Remark": "写字符串",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.WriteString(hwnd, \"4DA678\", 0, \"我是来测试的\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "WriteString",
                        "Define": "sRet = WriteString(hwnd, addr, type, v)",
                        "Describe": "对指定地址写入字符串，可以是Ascii字符串或者是Unicode字符串",
                        "RetType": "Boolean",
                        "Return": "0 : 失败, 1 : 成功",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定搜索的窗口句柄或者进程ID.  默认是窗口句柄. 如果要指定为进程ID,需要调用SetMemoryHwndAsProcessId.",
                                "Optional": false
                            },
                            {
                                "Caption": "addr",
                                "DataType": "String",
                                "Describe": "用字符串来描述地址，类似于CE的地址描述，数值必须是16进制,里面可以用[ ] + -这些符号来描述一个地址。+表示地址加，-表示地址减，模块名必须用<>符号来圈起来<br>例如:<br>1.         \\\"4DA678\\\" 最简单的方式，用绝对数值来表示地址<br>2.         \\\"<360SE.exe>+DA678\\\" 相对简单的方式，只是这里用模块名来决定模块基址，后面的是偏移<br>3.         \\\"[4DA678]+3A\\\" 用绝对数值加偏移，相当于一级指针<br>4.         \\\"[<360SE.exe>+DA678]+3A\\\" 用模块定基址的方式，也是一级指针<br>5.         \\\"[[[<360SE.exe>+DA678]+3A]+5B]+8\\\" 这个是一个三级指针<br>总之熟悉CE的人 应该对这个地址描述都很熟悉,我就不多举例了",
                                "Optional": false
                            },
                            {
                                "Caption": "type",
                                "DataType": "Integer",
                                "Describe": "0 : Ascii字符串，1 : Unicode字符串",
                                "Optional": false
                            },
                            {
                                "Caption": "v",
                                "DataType": "String",
                                "Describe": "字符串",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "IntToData",
                    "Remark": "整数转二进制数据",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.IntToData(&H12345678, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "IntToData",
                        "Define": "sRet = IntToData(value, type)",
                        "Describe": "把整数转换成二进制形式.",
                        "RetType": "String",
                        "Return": "字符串形式表达的二进制数据. 可以用于WriteData FindData FindDataEx等接口.",
                        "Param": [
                            {
                                "Caption": "value",
                                "DataType": "Integer",
                                "Describe": "需要转化的整型数",
                                "Optional": false
                            },
                            {
                                "Caption": "type",
                                "DataType": "Integer",
                                "Describe": "整数类型,取值如下：<br>0 : 32位 4字节整形数 (一般都选这个)<br>1 : 16位 2字节整形数<br>2 : 8位 1字节整形数",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FloatToData",
                    "Remark": "单精度浮点数转二进制数据",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FloatToData(1.24)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FloatToData",
                        "Define": "sRet = FloatToData(value)",
                        "Describe": "把单精度浮点数转换成二进制形式.",
                        "RetType": "String",
                        "Return": "字符串形式表达的二进制数据. 可以用于WriteData FindData FindDataEx等接口.",
                        "Param": [
                            {
                                "Caption": "value",
                                "DataType": "Double",
                                "Describe": "需要转化的单精度浮点数",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "DoubleToData",
                    "Remark": "双精度浮点数转二进制数据",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.DoubleToData(1.24)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "DoubleToData",
                        "Define": "sRet = DoubleToData(value)",
                        "Describe": "把双精度浮点数转换成二进制形式.",
                        "RetType": "String",
                        "Return": "字符串形式表达的二进制数据. 可以用于WriteData FindData FindDataEx等接口.",
                        "Param": [
                            {
                                "Caption": "value",
                                "DataType": "Double",
                                "Describe": "需要转化的双精度浮点数",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "StringToData",
                    "Remark": "双精度浮点数转二进制数据",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.StringToData(\"12345678\", 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "StringToData",
                        "Define": "sRet = StringToData(value, type)",
                        "Describe": "把字符串转换成二进制形式.",
                        "RetType": "String",
                        "Return": "字符串形式表达的二进制数据. 可以用于WriteData FindData FindDataEx等接口.",
                        "Param": [
                            {
                                "Caption": "value",
                                "DataType": "String",
                                "Describe": "需要转化的字符串",
                                "Optional": false
                            },
                            {
                                "Caption": "type",
                                "DataType": "Integer",
                                "Describe": "取值如下:<br>0: 返回Ascii表达的字符串<br>1: 返回Unicode表达的字符串",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "GetModuleBaseAddr",
                    "Remark": "获取模块基址",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.GetModuleBaseAddr(hwnd, \"gdi32.dll\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "GetModuleBaseAddr",
                        "Define": "sRet = GetModuleBaseAddr(hwnd, module)",
                        "Describe": "根据指定的窗口句柄，来获取对应窗口句柄进程下的指定模块的基址",
                        "RetType": "Integer",
                        "Return": "模块的基址",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "指定搜索的窗口句柄或者进程ID.  默认是窗口句柄. 如果要指定为进程ID,需要调用SetMemoryHwndAsProcessId.",
                                "Optional": false
                            },
                            {
                                "Caption": "module",
                                "DataType": "String",
                                "Describe": "模块名",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetMemoryHwndAsProcessId",
                    "Remark": "使用进程PID操作内存",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetMemoryHwndAsProcessId(true)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetMemoryHwndAsProcessId",
                        "Define": "sRet = SetMemoryHwndAsProcessId(en)",
                        "Describe": "设置是否把所有内存接口函数中的窗口句柄当作进程ID,以支持直接以进程ID来使用内存接口.    收费功能",
                        "RetType": "Boolean",
                        "Return": "0 : 失败  1 : 成功",
                        "Param": [
                            {
                                "Caption": "en",
                                "DataType": "Boolean",
                                "Describe": "0 : 关闭  1 : 开启",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SetMemoryFindResultToFile",
                    "Remark": "设置结果存入文件",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SetMemoryFindResultToFile(true)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SetMemoryFindResultToFile",
                        "Define": "sRet = SetMemoryFindResultToFile(file)",
                        "Describe": "设置是否把所有内存查找接口的结果保存入指定文件.    收费功能",
                        "RetType": "Boolean",
                        "Return": "0 : 失败  1 : 成功",
                        "Param": [
                            {
                                "Caption": "file",
                                "DataType": "String",
                                "Describe": "设置要保存的搜索结果文件名. 如果为空字符串表示取消此功能.",
                                "Optional": false
                            }
                        ]
                    }
                }
            ]
        },
        {
            "Caption": "汇编",
            "Icon": "文件夹",
            "Visible": true,
            "Templet": "index",
            "Help": {
                "Caption": ""
            },
            "Child": [
                {
                    "Caption": "AsmClear",
                    "Remark": "清除指令缓冲区",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.AsmClear()",
                    "Templet": "command",
                    "Help": {
                        "Caption": "AsmClear",
                        "Define": "iRet = AsmClear()",
                        "Describe": "清除汇编指令缓冲区 用AsmAdd添加到缓冲的指令全部清除",
                        "RetType": "Boolean",
                        "Return": "0 : 失败  1 : 成功",
                        "Param": [
                        ]
                    }
                },
                {
                    "Caption": "AsmAdd",
                    "Remark": "添加指令",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.AsmAdd(\"push 0100\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "AsmAdd",
                        "Define": "iRet = AsmAdd(asm_ins)",
                        "Describe": "添加指定的MASM汇编指令",
                        "RetType": "Boolean",
                        "Return": "0 : 失败  1 : 成功",
                        "Param": [
                            {
                                "Caption": "asm_ins",
                                "DataType": "String",
                                "Describe": "MASM汇编指令,大小写均可以  比如 mov eax, 1",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "AsmCall",
                    "Remark": "添加指令",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.AsmCall(hwnd, 1)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "AsmCall",
                        "Define": "iRet = AsmCall(hwnd, mode)",
                        "Describe": "执行用AsmAdd加到缓冲中的指令. 多线程下是收费功能, 免费版本多线程会异常.",
                        "RetType": "Integer",
                        "Return": "获取执行汇编代码以后的EAX的值.一般是函数的返回值.",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "窗口句柄",
                                "Optional": false
                            },
                            {
                                "Caption": "mode",
                                "DataType": "Integer",
                                "Describe": "模式，取值如下：<br>0 : 在本进程中进行执行，这时hwnd无效<br>1 : 对hwnd指定的进程内执行,注入模式为创建远程线程",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "AsmCode",
                    "Remark": "指令转换为机器码",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.AsmCode(&H405940)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "AsmCode",
                        "Define": "iRet = AsmCode(base_addr)",
                        "Describe": "把汇编缓冲区的指令转换为机器码 并用16进制字符串的形式输出",
                        "RetType": "String",
                        "Return": "机器码，比如 aa bb cc 这样的形式",
                        "Param": [
                            {
                                "Caption": "base_addr",
                                "DataType": "String",
                                "Describe": "用AsmAdd添加到缓冲区的第一条指令所在的地址",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "Assemble",
                    "Remark": "机器码转换为汇编",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.Assemble(\"81 05 E0 5A 47 00 01 00 00 00\", &H435fde, 0)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "Assemble",
                        "Define": "iRet = Assemble(asm_code, base_addr, is_upper)",
                        "Describe": "把指定的机器码转换为汇编语言输出",
                        "RetType": "String",
                        "Return": "MASM汇编语言字符串",
                        "Param": [
                            {
                                "Caption": "asm_code",
                                "DataType": "String",
                                "Describe": "机器码，形式如 aa bb cc 这样的16进制表示的字符串(空格无所谓)",
                                "Optional": false
                            },
                            {
                                "Caption": "base_addr",
                                "DataType": "Integer",
                                "Describe": "指令所在的地址",
                                "Optional": false
                            },
                            {
                                "Caption": "is_upper",
                                "DataType": "Integer",
                                "Describe": "表示转换的汇编语言是否以大写输出",
                                "Optional": false
                            }
                        ]
                    }
                }
            ]
        },
        {
            "Caption": "算法",
            "Icon": "文件夹",
            "Visible": true,
            "Templet": "index",
            "Help": {
                "Caption": ""
            },
            "Child": [
                {
                    "Caption": "ExcludePos",
                    "Remark": "排除坐标",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.ExcludePos(ret, 1, 100, 100, 300, 400)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "ExcludePos",
                        "Define": "iRet = ExcludePos(all_pos, type, x1, y1, x2, y2)",
                        "Describe": "根据部分Ex接口的返回值，排除指定范围区域内的坐标.",
                        "RetType": "String",
                        "Return": "经过筛选以后的返回值，格式和type指定的一致.",
                        "Param": [
                            {
                                "Caption": "all_pos",
                                "DataType": "String",
                                "Describe": "坐标描述串。  一般是FindStrEx,FindStrFastEx,FindStrWithFontEx, FindColorEx, FindMultiColorEx,和FindPicEx的返回值.",
                                "Optional": false
                            },
                            {
                                "Caption": "type",
                                "DataType": "Integer",
                                "Describe": "取值为0或者1：<br>如果all_pos的内容是由FindPicEx,FindStrEx,FindStrFastEx,FindStrWithFontEx返回，那么取值为0<br>如果all_pos的内容是由FindColorEx, FindMultiColorEx返回，那么取值为1",
                                "Optional": false
                            },
                            {
                                "Caption": "x1",
                                "DataType": "Integer",
                                "Describe": "左上角横坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y1",
                                "DataType": "Integer",
                                "Describe": "左上角纵坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "x2",
                                "DataType": "Integer",
                                "Describe": "右下角横坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y2",
                                "DataType": "Integer",
                                "Describe": "右下角纵坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindNearestPos",
                    "Remark": "找最近的坐标",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindNearestPos(ret, 1, 100, 100)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindNearestPos",
                        "Define": "iRet = FindNearestPos(all_pos, type, x, y)",
                        "Describe": "根据部分Ex接口的返回值，然后在所有坐标里找出距离指定坐标最近的那个坐标.",
                        "RetType": "String",
                        "Return": "返回的格式和type有关，如果type为0，那么返回的格式是 id,x,y<br>如果type为1,那么返回的格式是 x,y.",
                        "Param": [
                            {
                                "Caption": "all_pos",
                                "DataType": "String",
                                "Describe": "坐标描述串。  一般是FindStrEx,FindStrFastEx,FindStrWithFontEx, FindColorEx, FindMultiColorEx,和FindPicEx的返回值.",
                                "Optional": false
                            },
                            {
                                "Caption": "type",
                                "DataType": "Integer",
                                "Describe": "取值为0或者1：<br>如果all_pos的内容是由FindPicEx,FindStrEx,FindStrFastEx,FindStrWithFontEx返回，那么取值为0<br>如果all_pos的内容是由FindColorEx, FindMultiColorEx返回，那么取值为1",
                                "Optional": false
                            },
                            {
                                "Caption": "x",
                                "DataType": "Integer",
                                "Describe": "横坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y",
                                "DataType": "Integer",
                                "Describe": "纵坐标",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "SortPosDistance",
                    "Remark": "找最近的坐标",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.SortPosDistance(ret, 0, 100, 100)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "SortPosDistance",
                        "Define": "iRet = SortPosDistance(all_pos, type, x, y)",
                        "Describe": "根据部分Ex接口的返回值，然后对所有坐标根据对指定坐标的距离进行从小到大的排序.",
                        "RetType": "String",
                        "Return": "返回的格式和type指定的格式一致.",
                        "Param": [
                            {
                                "Caption": "all_pos",
                                "DataType": "String",
                                "Describe": "坐标描述串。  一般是FindStrEx,FindStrFastEx,FindStrWithFontEx, FindColorEx, FindMultiColorEx,和FindPicEx的返回值.",
                                "Optional": false
                            },
                            {
                                "Caption": "type",
                                "DataType": "Integer",
                                "Describe": "取值为0或者1：<br>如果all_pos的内容是由FindPicEx,FindStrEx,FindStrFastEx,FindStrWithFontEx返回，那么取值为0<br>如果all_pos的内容是由FindColorEx, FindMultiColorEx返回，那么取值为1",
                                "Optional": false
                            },
                            {
                                "Caption": "x",
                                "DataType": "Integer",
                                "Describe": "横坐标",
                                "Optional": false
                            },
                            {
                                "Caption": "y",
                                "DataType": "Integer",
                                "Describe": "纵坐标",
                                "Optional": false
                            }
                        ]
                    }
                }
            ]
        },
        {
            "Caption": "防护盾",
            "Icon": "文件夹",
            "Visible": true,
            "Templet": "index",
            "Help": {
                "Caption": ""
            },
            "Child": [
                {
                    "Caption": "DmGuard",
                    "Remark": "大漠防检测盾",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.DmGuard(true, \"np\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "DmGuard",
                        "Define": "iRet = DmGuard(enable, type)",
                        "Describe": "针对部分检测措施的保护盾.    收费功能",
                        "RetType": "Boolean",
                        "Return": "0 : 失败，1 : 成功",
                        "Param": [
                            {
                                "Caption": "enable",
                                "DataType": "Boolean",
                                "Describe": "0表示关闭保护盾,1表示打开保护盾.",
                                "Optional": false
                            },
                            {
                                "Caption": "type",
                                "DataType": "String",
                                "Describe": "参数具体内容可以是以下任意一个.<br>\\\"np\\\" : 这个是防止NP检测.<br>\\\"np2\\\" : 在NP下保护后台可以正常运行. (此模式需要加载驱动,目前仅支持32位系统)<br>\\\"memory\\\" : 这个保护内存系列接口和汇编接口可以正常运行.(不用带dx.public.memory的情况下)(此模式需要加载驱动,目前仅支持32位系统)<br>\\\"phide [pid]\\\" : 保护指定进程不被非法访问. pid为可选参数.如果不指定pid，默认保护当前进程.(此模式需要加载驱动,目前仅支持32位系统)<br>其它后续开发.",
                                "Optional": false
                            }
                        ]
                    }
                }
            ]
        },
        {
            "Caption": "Foobar",
            "Icon": "文件夹",
            "Visible": false,
            "Templet": "index",
            "Help": {
                "Caption": ""
            },
            "Child": [
                {
                    "Caption": "RedisConnect",
                    "Remark": "连接服务器",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.RedisConnect(\"127.0.0.1\", 6379)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "RedisConnect",
                        "Define": "iRet = RedisConnect(ip, port)",
                        "Describe": "连接到 Redis 服务器",
                        "RetType": "Boolean",
                        "Return": "成功返回 redisContext，失败返回 0",
                        "Param": [
                            {
                                "Caption": "ip",
                                "DataType": "String",
                                "Describe": "Redis服务器IP地址",
                                "Optional": false
                            },
                            {
                                "Caption": "port",
                                "DataType": "Integer",
                                "Describe": "Redis服务器端口",
                                "Optional": false
                            }
                        ]
                    }
                }
            ]
        },
        {
            "Caption": "答题",
            "Icon": "文件夹",
            "Visible": false,
            "Templet": "index",
            "Help": {
                "Caption": ""
            },
            "Child": [
                {
                    "Caption": "RedisConnect",
                    "Remark": "连接服务器",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.RedisConnect(\"127.0.0.1\", 6379)",
                    "Templet": "command",
                    "Help": {
                        "Caption": "RedisConnect",
                        "Define": "iRet = RedisConnect(ip, port)",
                        "Describe": "连接到 Redis 服务器",
                        "RetType": "Boolean",
                        "Return": "成功返回 redisContext，失败返回 0",
                        "Param": [
                            {
                                "Caption": "ip",
                                "DataType": "String",
                                "Describe": "Redis服务器IP地址",
                                "Optional": false
                            },
                            {
                                "Caption": "port",
                                "DataType": "Integer",
                                "Describe": "Redis服务器端口",
                                "Optional": false
                            }
                        ]
                    }
                }
            ]
        },
        {
            "Caption": "杂项",
            "Icon": "文件夹",
            "Visible": true,
            "Templet": "index",
            "Help": {
                "Caption": ""
            },
            "Child": [
                {
                    "Caption": "ActiveInputMethod",
                    "Remark": "激活输入法",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.ActiveInputMethod(hwnd, \"中文 - QQ拼音输入法\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "ActiveInputMethod",
                        "Define": "iRet = ActiveInputMethod(hwnd, input_method)",
                        "Describe": "激活指定窗口所在进程的输入法.",
                        "RetType": "Boolean",
                        "Return": "0 : 失败，1 : 成功",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "窗口句柄",
                                "Optional": false
                            },
                            {
                                "Caption": "input_method",
                                "DataType": "String",
                                "Describe": "输入法名字。具体输入法名字对应表查看注册表中以下位置:<br>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layouts<br>下面的每一项下的Layout Text的值就是输入法名字<br>比如 \\\"中文 - QQ拼音输入法\\\"<br>以此类推.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindInputMethod",
                    "Remark": "检测输入法是否安装",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindInputMethod(\"中文 - QQ拼音输入法\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindInputMethod",
                        "Define": "iRet = FindInputMethod(input_method)",
                        "Describe": "检测系统中是否安装了指定输入法",
                        "RetType": "Boolean",
                        "Return": "0 : 未安装，1 : 安装了",
                        "Param": [
                            {
                                "Caption": "input_method",
                                "DataType": "String",
                                "Describe": "输入法名字。具体输入法名字对应表查看注册表中以下位置:<br>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layouts<br>下面的每一项下的Layout Text的值就是输入法名字<br>比如 \\\"中文 - QQ拼音输入法\\\"<br>以此类推.",
                                "Optional": false
                            }
                        ]
                    }
                },
                {
                    "Caption": "FindInputMethod",
                    "Remark": "检测输入法是否开启",
                    "Visible": true,
                    "Keyword": true,
                    "InsCode": "dm.FindInputMethod(hwnd, \"中文 - QQ拼音输入法\")",
                    "Templet": "command",
                    "Help": {
                        "Caption": "FindInputMethod",
                        "Define": "iRet = FindInputMethod(hwnd, input_method)",
                        "Describe": "检测指定窗口所在线程输入法是否开启",
                        "RetType": "Boolean",
                        "Return": "0 : 未开启，1 : 开启了",
                        "Param": [
                            {
                                "Caption": "hwnd",
                                "DataType": "Integer",
                                "Describe": "窗口句柄",
                                "Optional": false
                            },
                            {
                                "Caption": "input_method",
                                "DataType": "String",
                                "Describe": "输入法名字。具体输入法名字对应表查看注册表中以下位置:<br>HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Keyboard Layouts<br>下面的每一项下的Layout Text的值就是输入法名字<br>比如 \\\"中文 - QQ拼音输入法\\\"<br>以此类推.",
                                "Optional": false
                            }
                        ]
                    }
                }
            ]
        }
    ]
}
